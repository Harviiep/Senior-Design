
Senior Design Sensors.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000266  00800100  00001f78  0000200c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001f78  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000006f  00800366  00800366  00002272  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00002272  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000022d0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001f0  00000000  00000000  00002310  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002c08  00000000  00000000  00002500  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001007  00000000  00000000  00005108  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001245  00000000  00000000  0000610f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000070c  00000000  00000000  00007354  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000c8e  00000000  00000000  00007a60  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000022a0  00000000  00000000  000086ee  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001e0  00000000  00000000  0000a98e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 db 00 	jmp	0x1b6	; 0x1b6 <__ctors_end>
       4:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
       8:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
       c:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
      10:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
      14:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
      18:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
      1c:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
      20:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
      24:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
      28:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
      2c:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
      30:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
      34:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
      38:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
      3c:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
      40:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
      44:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
      48:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
      4c:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
      50:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
      54:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
      58:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
      5c:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
      60:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
      64:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
      68:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
      6c:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
      70:	0c 94 76 03 	jmp	0x6ec	; 0x6ec <__vector_28>
      74:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
      78:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
      7c:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
      80:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
      84:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
      88:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
      8c:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
      90:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
      94:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
      98:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
      9c:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
      a0:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
      a4:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
      a8:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
      ac:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
      b0:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>

000000b4 <__trampolines_end>:
      b4:	6e 61       	ori	r22, 0x1E	; 30
      b6:	6e 00       	.word	0x006e	; ????

000000b8 <__c.2332>:
      b8:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
      c8:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
      d8:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
      e8:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
      f8:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     108:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     118:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     128:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     138:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     148:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     158:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     168:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     178:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     188:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     198:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     1a8:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

000001b6 <__ctors_end>:
     1b6:	11 24       	eor	r1, r1
     1b8:	1f be       	out	0x3f, r1	; 63
     1ba:	cf ef       	ldi	r28, 0xFF	; 255
     1bc:	d8 e0       	ldi	r29, 0x08	; 8
     1be:	de bf       	out	0x3e, r29	; 62
     1c0:	cd bf       	out	0x3d, r28	; 61

000001c2 <__do_copy_data>:
     1c2:	13 e0       	ldi	r17, 0x03	; 3
     1c4:	a0 e0       	ldi	r26, 0x00	; 0
     1c6:	b1 e0       	ldi	r27, 0x01	; 1
     1c8:	e8 e7       	ldi	r30, 0x78	; 120
     1ca:	ff e1       	ldi	r31, 0x1F	; 31
     1cc:	02 c0       	rjmp	.+4      	; 0x1d2 <__do_copy_data+0x10>
     1ce:	05 90       	lpm	r0, Z+
     1d0:	0d 92       	st	X+, r0
     1d2:	a6 36       	cpi	r26, 0x66	; 102
     1d4:	b1 07       	cpc	r27, r17
     1d6:	d9 f7       	brne	.-10     	; 0x1ce <__do_copy_data+0xc>

000001d8 <__do_clear_bss>:
     1d8:	23 e0       	ldi	r18, 0x03	; 3
     1da:	a6 e6       	ldi	r26, 0x66	; 102
     1dc:	b3 e0       	ldi	r27, 0x03	; 3
     1de:	01 c0       	rjmp	.+2      	; 0x1e2 <.do_clear_bss_start>

000001e0 <.do_clear_bss_loop>:
     1e0:	1d 92       	st	X+, r1

000001e2 <.do_clear_bss_start>:
     1e2:	a5 3d       	cpi	r26, 0xD5	; 213
     1e4:	b2 07       	cpc	r27, r18
     1e6:	e1 f7       	brne	.-8      	; 0x1e0 <.do_clear_bss_loop>
     1e8:	0e 94 34 02 	call	0x468	; 0x468 <main>
     1ec:	0c 94 ba 0f 	jmp	0x1f74	; 0x1f74 <_exit>

000001f0 <__bad_interrupt>:
     1f0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001f4 <uart0_putchar>:
	return 0;  
}

// Initialize printf for UART
void init_printf(void) {
	stdout = &uart0_output;  // Link stdout to uart0_output
     1f4:	e0 ec       	ldi	r30, 0xC0	; 192
     1f6:	f0 e0       	ldi	r31, 0x00	; 0
     1f8:	90 81       	ld	r25, Z
     1fa:	95 ff       	sbrs	r25, 5
     1fc:	fd cf       	rjmp	.-6      	; 0x1f8 <uart0_putchar+0x4>
     1fe:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
     202:	80 e0       	ldi	r24, 0x00	; 0
     204:	90 e0       	ldi	r25, 0x00	; 0
     206:	08 95       	ret

00000208 <uart0_init>:
     208:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
     20c:	87 e6       	ldi	r24, 0x67	; 103
     20e:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
     212:	e1 ec       	ldi	r30, 0xC1	; 193
     214:	f0 e0       	ldi	r31, 0x00	; 0
     216:	80 81       	ld	r24, Z
     218:	88 61       	ori	r24, 0x18	; 24
     21a:	80 83       	st	Z, r24
     21c:	e2 ec       	ldi	r30, 0xC2	; 194
     21e:	f0 e0       	ldi	r31, 0x00	; 0
     220:	80 81       	ld	r24, Z
     222:	86 60       	ori	r24, 0x06	; 6
     224:	80 83       	st	Z, r24
     226:	08 95       	ret

00000228 <uart1_init>:
}

// Initialize UART1
void uart1_init (void)
{
    SPCR1 &= ~(1 << SPE); // Disable SPI
     228:	ec ea       	ldi	r30, 0xAC	; 172
     22a:	f0 e0       	ldi	r31, 0x00	; 0
     22c:	80 81       	ld	r24, Z
     22e:	8f 7b       	andi	r24, 0xBF	; 191
     230:	80 83       	st	Z, r24
	PRR0 &= ~(1 << PRUSART1); // enable usart1 in power register
     232:	e4 e6       	ldi	r30, 0x64	; 100
     234:	f0 e0       	ldi	r31, 0x00	; 0
     236:	80 81       	ld	r24, Z
     238:	8f 7e       	andi	r24, 0xEF	; 239
     23a:	80 83       	st	Z, r24

    DDRB |= (1 << DDB3);  // Set TX1 (PB3) as output
     23c:	23 9a       	sbi	0x04, 3	; 4
    DDRB &= ~(1 << DDB4); // Set RX1 (PB4) as input
     23e:	24 98       	cbi	0x04, 4	; 4

    UBRR1H = (BAUDRATE>>8);        // shift the register right by 8 bits
     240:	10 92 cd 00 	sts	0x00CD, r1	; 0x8000cd <__DATA_REGION_ORIGIN__+0x6d>
	UBRR1L = BAUDRATE;             // set baud rate
     244:	87 e6       	ldi	r24, 0x67	; 103
     246:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__DATA_REGION_ORIGIN__+0x6c>
	UCSR1B|= (1<<TXEN1) | (1<<RXEN1) | (1 << RXCIE1);  // enable receiver and transmitter
     24a:	e9 ec       	ldi	r30, 0xC9	; 201
     24c:	f0 e0       	ldi	r31, 0x00	; 0
     24e:	80 81       	ld	r24, Z
     250:	88 69       	ori	r24, 0x98	; 152
     252:	80 83       	st	Z, r24
	UCSR1C|= (1<<UCSZ10) | (1<<UCSZ11);   // 8bit data format
     254:	ea ec       	ldi	r30, 0xCA	; 202
     256:	f0 e0       	ldi	r31, 0x00	; 0
     258:	80 81       	ld	r24, Z
     25a:	86 60       	ori	r24, 0x06	; 6
     25c:	80 83       	st	Z, r24
	UCSR1C &= ~((1 << UMSEL11) | (1 << UMSEL10)); // Clear UMSEL11 and UMSEL10 for async mode
     25e:	80 81       	ld	r24, Z
     260:	8f 73       	andi	r24, 0x3F	; 63
     262:	80 83       	st	Z, r24
     264:	08 95       	ret

00000266 <uart1_transmit>:

// Should use interrupt
void uart1_transmit(unsigned char data) 
{
	// Wait for buffer to be empty
    while (!(UCSR1A & (1<<UDRE1))); 
     266:	e8 ec       	ldi	r30, 0xC8	; 200
     268:	f0 e0       	ldi	r31, 0x00	; 0
     26a:	90 81       	ld	r25, Z
     26c:	95 ff       	sbrs	r25, 5
     26e:	fd cf       	rjmp	.-6      	; 0x26a <uart1_transmit+0x4>
    UDR1 = data;
     270:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__DATA_REGION_ORIGIN__+0x6e>
     274:	08 95       	ret

00000276 <HM10_transmit>:
// Send TX to HM10 over UART1 
// Any TX to HM10 while not paired to a device will be considered as AT commands
// Once HM10 is paired to a device, any TX is considered plain text
// To go back into AT mode, send "AT"
void HM10_transmit(const char* str) 
{
     276:	cf 93       	push	r28
     278:	df 93       	push	r29
     27a:	ec 01       	movw	r28, r24
	printf("\nSent ");
     27c:	8e e0       	ldi	r24, 0x0E	; 14
     27e:	91 e0       	ldi	r25, 0x01	; 1
     280:	9f 93       	push	r25
     282:	8f 93       	push	r24
     284:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <printf>
    while (*str) {
     288:	88 81       	ld	r24, Y
     28a:	0f 90       	pop	r0
     28c:	0f 90       	pop	r0
     28e:	88 23       	and	r24, r24
     290:	49 f0       	breq	.+18     	; 0x2a4 <HM10_transmit+0x2e>
		printf("%c", *str);
     292:	90 e0       	ldi	r25, 0x00	; 0
     294:	0e 94 03 0f 	call	0x1e06	; 0x1e06 <putchar>
        uart1_transmit(*str++);
     298:	89 91       	ld	r24, Y+
     29a:	0e 94 33 01 	call	0x266	; 0x266 <uart1_transmit>
// Once HM10 is paired to a device, any TX is considered plain text
// To go back into AT mode, send "AT"
void HM10_transmit(const char* str) 
{
	printf("\nSent ");
    while (*str) {
     29e:	88 81       	ld	r24, Y
     2a0:	81 11       	cpse	r24, r1
     2a2:	f7 cf       	rjmp	.-18     	; 0x292 <HM10_transmit+0x1c>
		printf("%c", *str);
        uart1_transmit(*str++);
    }
	printf(" to HM10\n\r");
     2a4:	85 e1       	ldi	r24, 0x15	; 21
     2a6:	91 e0       	ldi	r25, 0x01	; 1
     2a8:	9f 93       	push	r25
     2aa:	8f 93       	push	r24
     2ac:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <printf>
}
     2b0:	0f 90       	pop	r0
     2b2:	0f 90       	pop	r0
     2b4:	df 91       	pop	r29
     2b6:	cf 91       	pop	r28
     2b8:	08 95       	ret

000002ba <HM10_clear_response_buffer>:

// Clear HM10 buffer
void HM10_clear_response_buffer() 
{
    memset((char*)HM10_response_buffer, 0, HM10_response_buffer_SIZE);
     2ba:	80 e4       	ldi	r24, 0x40	; 64
     2bc:	e7 e6       	ldi	r30, 0x67	; 103
     2be:	f3 e0       	ldi	r31, 0x03	; 3
     2c0:	df 01       	movw	r26, r30
     2c2:	1d 92       	st	X+, r1
     2c4:	8a 95       	dec	r24
     2c6:	e9 f7       	brne	.-6      	; 0x2c2 <HM10_clear_response_buffer+0x8>
    HM10_response_buffer_index = 0;
     2c8:	10 92 66 03 	sts	0x0366, r1	; 0x800366 <__data_end>
     2cc:	08 95       	ret

000002ce <HM10_print_response_buffer>:
}

// Print the response from HM10
void HM10_print_response_buffer() 
{
     2ce:	cf 93       	push	r28
     2d0:	df 93       	push	r29
	printf("HM10 Response: ");
     2d2:	80 e2       	ldi	r24, 0x20	; 32
     2d4:	91 e0       	ldi	r25, 0x01	; 1
     2d6:	9f 93       	push	r25
     2d8:	8f 93       	push	r24
     2da:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <printf>
     2de:	0f 90       	pop	r0
     2e0:	0f 90       	pop	r0

	// Print the HM10_response_buffer, ignoring empty indexes
    for (uint16_t i = 0; i < HM10_response_buffer_SIZE; i++) {
     2e2:	c0 e0       	ldi	r28, 0x00	; 0
     2e4:	d0 e0       	ldi	r29, 0x00	; 0
        if (HM10_response_buffer[i] != 0x00) {  
     2e6:	fe 01       	movw	r30, r28
     2e8:	e9 59       	subi	r30, 0x99	; 153
     2ea:	fc 4f       	sbci	r31, 0xFC	; 252
     2ec:	80 81       	ld	r24, Z
     2ee:	88 23       	and	r24, r24
     2f0:	39 f0       	breq	.+14     	; 0x300 <HM10_print_response_buffer+0x32>
            printf("%c", HM10_response_buffer[i]); 
     2f2:	fe 01       	movw	r30, r28
     2f4:	e9 59       	subi	r30, 0x99	; 153
     2f6:	fc 4f       	sbci	r31, 0xFC	; 252
     2f8:	80 81       	ld	r24, Z
     2fa:	90 e0       	ldi	r25, 0x00	; 0
     2fc:	0e 94 03 0f 	call	0x1e06	; 0x1e06 <putchar>
void HM10_print_response_buffer() 
{
	printf("HM10 Response: ");

	// Print the HM10_response_buffer, ignoring empty indexes
    for (uint16_t i = 0; i < HM10_response_buffer_SIZE; i++) {
     300:	21 96       	adiw	r28, 0x01	; 1
     302:	c0 34       	cpi	r28, 0x40	; 64
     304:	d1 05       	cpc	r29, r1
     306:	79 f7       	brne	.-34     	; 0x2e6 <HM10_print_response_buffer+0x18>
        if (HM10_response_buffer[i] != 0x00) {  
            printf("%c", HM10_response_buffer[i]); 
        }
    }

    printf("\r\n\n"); 
     308:	80 e3       	ldi	r24, 0x30	; 48
     30a:	91 e0       	ldi	r25, 0x01	; 1
     30c:	0e 94 0a 0f 	call	0x1e14	; 0x1e14 <puts>
}
     310:	df 91       	pop	r29
     312:	cf 91       	pop	r28
     314:	08 95       	ret

00000316 <HM10_init>:

// Initialize HM10
void HM10_init()
{
     316:	cf 93       	push	r28
     318:	df 93       	push	r29
	HM10_transmit("AT");
     31a:	83 e3       	ldi	r24, 0x33	; 51
     31c:	91 e0       	ldi	r25, 0x01	; 1
     31e:	0e 94 3b 01 	call	0x276	; 0x276 <HM10_transmit>
	sensirion_sleep_usec(2000000);
     322:	60 e8       	ldi	r22, 0x80	; 128
     324:	74 e8       	ldi	r23, 0x84	; 132
     326:	8e e1       	ldi	r24, 0x1E	; 30
     328:	90 e0       	ldi	r25, 0x00	; 0
     32a:	0e 94 9b 06 	call	0xd36	; 0xd36 <sensirion_sleep_usec>

	// Wait until HM10 responds with "OK"
	while(!(HM10_response_buffer[0] == 0x4F && HM10_response_buffer[1] == 0x4B))
     32e:	c7 e6       	ldi	r28, 0x67	; 103
     330:	d3 e0       	ldi	r29, 0x03	; 3
     332:	0a c0       	rjmp	.+20     	; 0x348 <HM10_init+0x32>
	{
		HM10_transmit("AT");
     334:	83 e3       	ldi	r24, 0x33	; 51
     336:	91 e0       	ldi	r25, 0x01	; 1
     338:	0e 94 3b 01 	call	0x276	; 0x276 <HM10_transmit>
		sensirion_sleep_usec(2000000);
     33c:	60 e8       	ldi	r22, 0x80	; 128
     33e:	74 e8       	ldi	r23, 0x84	; 132
     340:	8e e1       	ldi	r24, 0x1E	; 30
     342:	90 e0       	ldi	r25, 0x00	; 0
     344:	0e 94 9b 06 	call	0xd36	; 0xd36 <sensirion_sleep_usec>
{
	HM10_transmit("AT");
	sensirion_sleep_usec(2000000);

	// Wait until HM10 responds with "OK"
	while(!(HM10_response_buffer[0] == 0x4F && HM10_response_buffer[1] == 0x4B))
     348:	88 81       	ld	r24, Y
     34a:	8f 34       	cpi	r24, 0x4F	; 79
     34c:	99 f7       	brne	.-26     	; 0x334 <HM10_init+0x1e>
     34e:	89 81       	ldd	r24, Y+1	; 0x01
     350:	8b 34       	cpi	r24, 0x4B	; 75
     352:	81 f7       	brne	.-32     	; 0x334 <HM10_init+0x1e>
	{
		HM10_transmit("AT");
		sensirion_sleep_usec(2000000);
	}
	HM10_print_response_buffer();
     354:	0e 94 67 01 	call	0x2ce	; 0x2ce <HM10_print_response_buffer>
	HM10_clear_response_buffer();
     358:	0e 94 5d 01 	call	0x2ba	; 0x2ba <HM10_clear_response_buffer>

	// Start broadcasting
	HM10_transmit("AT+NAMEScene_Safe");
     35c:	86 e3       	ldi	r24, 0x36	; 54
     35e:	91 e0       	ldi	r25, 0x01	; 1
     360:	0e 94 3b 01 	call	0x276	; 0x276 <HM10_transmit>
	HM10_print_response_buffer();
     364:	0e 94 67 01 	call	0x2ce	; 0x2ce <HM10_print_response_buffer>
	HM10_clear_response_buffer();
     368:	0e 94 5d 01 	call	0x2ba	; 0x2ba <HM10_clear_response_buffer>

	HM10_transmit("AT+ROLE0");
     36c:	88 e4       	ldi	r24, 0x48	; 72
     36e:	91 e0       	ldi	r25, 0x01	; 1
     370:	0e 94 3b 01 	call	0x276	; 0x276 <HM10_transmit>
	sensirion_sleep_usec(2000000);
     374:	60 e8       	ldi	r22, 0x80	; 128
     376:	74 e8       	ldi	r23, 0x84	; 132
     378:	8e e1       	ldi	r24, 0x1E	; 30
     37a:	90 e0       	ldi	r25, 0x00	; 0
     37c:	0e 94 9b 06 	call	0xd36	; 0xd36 <sensirion_sleep_usec>
	HM10_print_response_buffer();
     380:	0e 94 67 01 	call	0x2ce	; 0x2ce <HM10_print_response_buffer>
	HM10_clear_response_buffer();
     384:	0e 94 5d 01 	call	0x2ba	; 0x2ba <HM10_clear_response_buffer>

	HM10_transmit("AT+ROLE?");
     388:	81 e5       	ldi	r24, 0x51	; 81
     38a:	91 e0       	ldi	r25, 0x01	; 1
     38c:	0e 94 3b 01 	call	0x276	; 0x276 <HM10_transmit>
	sensirion_sleep_usec(2000000);
     390:	60 e8       	ldi	r22, 0x80	; 128
     392:	74 e8       	ldi	r23, 0x84	; 132
     394:	8e e1       	ldi	r24, 0x1E	; 30
     396:	90 e0       	ldi	r25, 0x00	; 0
     398:	0e 94 9b 06 	call	0xd36	; 0xd36 <sensirion_sleep_usec>
	HM10_print_response_buffer();
     39c:	0e 94 67 01 	call	0x2ce	; 0x2ce <HM10_print_response_buffer>
	HM10_clear_response_buffer();
     3a0:	0e 94 5d 01 	call	0x2ba	; 0x2ba <HM10_clear_response_buffer>
}
     3a4:	df 91       	pop	r29
     3a6:	cf 91       	pop	r28
     3a8:	08 95       	ret

000003aa <sps30_init>:

// Initialize SPS30
void sps30_init()
{
     3aa:	cf 93       	push	r28
     3ac:	df 93       	push	r29
     3ae:	cd b7       	in	r28, 0x3d	; 61
     3b0:	de b7       	in	r29, 0x3e	; 62
     3b2:	a2 97       	sbiw	r28, 0x22	; 34
     3b4:	0f b6       	in	r0, 0x3f	; 63
     3b6:	f8 94       	cli
     3b8:	de bf       	out	0x3e, r29	; 62
     3ba:	0f be       	out	0x3f, r0	; 63
     3bc:	cd bf       	out	0x3d, r28	; 61
	uint8_t fw_major;
    uint8_t fw_minor;
	int16_t SPS30_command_response_code;

	while (sps30_probe() != 0) {
     3be:	0a c0       	rjmp	.+20     	; 0x3d4 <sps30_init+0x2a>
        printf("SPS sensor probing failed\n");
     3c0:	8a e5       	ldi	r24, 0x5A	; 90
     3c2:	91 e0       	ldi	r25, 0x01	; 1
     3c4:	0e 94 0a 0f 	call	0x1e14	; 0x1e14 <puts>
        sensirion_sleep_usec(1000000); /* wait 1s */
     3c8:	60 e4       	ldi	r22, 0x40	; 64
     3ca:	72 e4       	ldi	r23, 0x42	; 66
     3cc:	8f e0       	ldi	r24, 0x0F	; 15
     3ce:	90 e0       	ldi	r25, 0x00	; 0
     3d0:	0e 94 9b 06 	call	0xd36	; 0xd36 <sensirion_sleep_usec>
{
	uint8_t fw_major;
    uint8_t fw_minor;
	int16_t SPS30_command_response_code;

	while (sps30_probe() != 0) {
     3d4:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <sps30_probe>
     3d8:	89 2b       	or	r24, r25
     3da:	91 f7       	brne	.-28     	; 0x3c0 <sps30_init+0x16>
        printf("SPS sensor probing failed\n");
        sensirion_sleep_usec(1000000); /* wait 1s */
    }
    printf("SPS sensor probing successful\n");
     3dc:	84 e7       	ldi	r24, 0x74	; 116
     3de:	91 e0       	ldi	r25, 0x01	; 1
     3e0:	0e 94 0a 0f 	call	0x1e14	; 0x1e14 <puts>

    SPS30_command_response_code = sps30_read_firmware_version(&fw_major, &fw_minor);
     3e4:	be 01       	movw	r22, r28
     3e6:	6e 5f       	subi	r22, 0xFE	; 254
     3e8:	7f 4f       	sbci	r23, 0xFF	; 255
     3ea:	ce 01       	movw	r24, r28
     3ec:	01 96       	adiw	r24, 0x01	; 1
     3ee:	0e 94 76 05 	call	0xaec	; 0xaec <sps30_read_firmware_version>
    if (SPS30_command_response_code) {
     3f2:	89 2b       	or	r24, r25
     3f4:	29 f0       	breq	.+10     	; 0x400 <__LOCK_REGION_LENGTH__>
        printf("error reading firmware version\n");
     3f6:	82 e9       	ldi	r24, 0x92	; 146
     3f8:	91 e0       	ldi	r25, 0x01	; 1
     3fa:	0e 94 0a 0f 	call	0x1e14	; 0x1e14 <puts>
     3fe:	12 c0       	rjmp	.+36     	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
    } 
	else {
        printf("FW: %u.%u\n", fw_major, fw_minor);
     400:	8a 81       	ldd	r24, Y+2	; 0x02
     402:	1f 92       	push	r1
     404:	8f 93       	push	r24
     406:	89 81       	ldd	r24, Y+1	; 0x01
     408:	1f 92       	push	r1
     40a:	8f 93       	push	r24
     40c:	81 eb       	ldi	r24, 0xB1	; 177
     40e:	91 e0       	ldi	r25, 0x01	; 1
     410:	9f 93       	push	r25
     412:	8f 93       	push	r24
     414:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <printf>
     418:	0f 90       	pop	r0
     41a:	0f 90       	pop	r0
     41c:	0f 90       	pop	r0
     41e:	0f 90       	pop	r0
     420:	0f 90       	pop	r0
     422:	0f 90       	pop	r0
    }

    char serial_number[SPS30_MAX_SERIAL_LEN];
    SPS30_command_response_code = sps30_get_serial(serial_number);
     424:	ce 01       	movw	r24, r28
     426:	03 96       	adiw	r24, 0x03	; 3
     428:	0e 94 9a 05 	call	0xb34	; 0xb34 <sps30_get_serial>
    if (SPS30_command_response_code) {
     42c:	89 2b       	or	r24, r25
     42e:	29 f0       	breq	.+10     	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
        printf("error reading serial number\n");
     430:	8c eb       	ldi	r24, 0xBC	; 188
     432:	91 e0       	ldi	r25, 0x01	; 1
     434:	0e 94 0a 0f 	call	0x1e14	; 0x1e14 <puts>
     438:	0e c0       	rjmp	.+28     	; 0x456 <__LOCK_REGION_LENGTH__+0x56>
    } 
	else {
        printf("Serial Number: %s\n", serial_number);
     43a:	ce 01       	movw	r24, r28
     43c:	03 96       	adiw	r24, 0x03	; 3
     43e:	9f 93       	push	r25
     440:	8f 93       	push	r24
     442:	88 ed       	ldi	r24, 0xD8	; 216
     444:	91 e0       	ldi	r25, 0x01	; 1
     446:	9f 93       	push	r25
     448:	8f 93       	push	r24
     44a:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <printf>
     44e:	0f 90       	pop	r0
     450:	0f 90       	pop	r0
     452:	0f 90       	pop	r0
     454:	0f 90       	pop	r0
    }
}
     456:	a2 96       	adiw	r28, 0x22	; 34
     458:	0f b6       	in	r0, 0x3f	; 63
     45a:	f8 94       	cli
     45c:	de bf       	out	0x3e, r29	; 62
     45e:	0f be       	out	0x3f, r0	; 63
     460:	cd bf       	out	0x3d, r28	; 61
     462:	df 91       	pop	r29
     464:	cf 91       	pop	r28
     466:	08 95       	ret

00000468 <main>:
volatile uint8_t HM10_response_buffer_index = 0;

struct sps30_measurement m; // Struct to store sps30 measurements

int main(void)
{
     468:	cf 93       	push	r28
     46a:	df 93       	push	r29
     46c:	cd b7       	in	r28, 0x3d	; 61
     46e:	de b7       	in	r29, 0x3e	; 62
     470:	da 95       	dec	r29
     472:	0f b6       	in	r0, 0x3f	; 63
     474:	f8 94       	cli
     476:	de bf       	out	0x3e, r29	; 62
     478:	0f be       	out	0x3f, r0	; 63
     47a:	cd bf       	out	0x3d, r28	; 61
	uart0_init();  // Initialize UART
     47c:	0e 94 04 01 	call	0x208	; 0x208 <uart0_init>
	return 0;  
}

// Initialize printf for UART
void init_printf(void) {
	stdout = &uart0_output;  // Link stdout to uart0_output
     480:	80 e0       	ldi	r24, 0x00	; 0
     482:	91 e0       	ldi	r25, 0x01	; 1
     484:	90 93 d2 03 	sts	0x03D2, r25	; 0x8003d2 <__iob+0x3>
     488:	80 93 d1 03 	sts	0x03D1, r24	; 0x8003d1 <__iob+0x2>

int main(void)
{
	uart0_init();  // Initialize UART
	init_printf();  // Initialize printf redirection
	uart1_init(); // Initalize UART 1 (HM10 Serial Connection)
     48c:	0e 94 14 01 	call	0x228	; 0x228 <uart1_init>
	sei(); // Enable global interrupts
     490:	78 94       	sei
	sensirion_i2c_init(); // Must call or sensirion libs don't work. Currently empty. 
     492:	0e 94 95 06 	call	0xd2a	; 0xd2a <sensirion_i2c_init>
	sps30_init(); // Initialize SPS30
     496:	0e 94 d5 01 	call	0x3aa	; 0x3aa <sps30_init>
	HM10_init(); 
     49a:	0e 94 8b 01 	call	0x316	; 0x316 <HM10_init>

	printf("Initialization Complete!\n\n");
     49e:	8b ee       	ldi	r24, 0xEB	; 235
     4a0:	91 e0       	ldi	r25, 0x01	; 1
     4a2:	0e 94 0a 0f 	call	0x1e14	; 0x1e14 <puts>

    int16_t SPS30_command_response_code = sps30_start_measurement();
     4a6:	0e 94 b1 05 	call	0xb62	; 0xb62 <sps30_start_measurement>
    if (SPS30_command_response_code < 0)
     4aa:	99 23       	and	r25, r25
     4ac:	24 f4       	brge	.+8      	; 0x4b6 <main+0x4e>
        printf("error starting measurement\n");
     4ae:	85 e0       	ldi	r24, 0x05	; 5
     4b0:	92 e0       	ldi	r25, 0x02	; 2
     4b2:	0e 94 0a 0f 	call	0x1e14	; 0x1e14 <puts>

    printf("measurements started\n");
     4b6:	80 e2       	ldi	r24, 0x20	; 32
     4b8:	92 e0       	ldi	r25, 0x02	; 2
     4ba:	0e 94 0a 0f 	call	0x1e14	; 0x1e14 <puts>
			// 				m.mc_1p0, m.mc_2p5, m.mc_4p0, m.mc_10p0, 
			// 				m.nc_0p5, m.nc_1p0, m.nc_2p5, m.nc_4p0, 
			// 				m.nc_10p0, m.typical_particle_size);

			// Commented out code above is more concise. but formatting on DSD tech app is weird so have to send each measurement individually
			sprintf(SPS30_measurements, "measured values:\n\r");
     4be:	ce 01       	movw	r24, r28
     4c0:	01 96       	adiw	r24, 0x01	; 1
     4c2:	7c 01       	movw	r14, r24
			HM10_transmit(SPS30_measurements);  
			sprintf(SPS30_measurements, "%.2f pm1.0\n\r", m.mc_1p0);
     4c4:	0f 2e       	mov	r0, r31
     4c6:	f2 e6       	ldi	r31, 0x62	; 98
     4c8:	8f 2e       	mov	r8, r31
     4ca:	f2 e0       	ldi	r31, 0x02	; 2
     4cc:	9f 2e       	mov	r9, r31
     4ce:	f0 2d       	mov	r31, r0
			HM10_transmit(SPS30_measurements);  
			sprintf(SPS30_measurements, "%.2f pm2.5\n\r", m.mc_2p5);
     4d0:	0f 2e       	mov	r0, r31
     4d2:	ff e6       	ldi	r31, 0x6F	; 111
     4d4:	af 2e       	mov	r10, r31
     4d6:	f2 e0       	ldi	r31, 0x02	; 2
     4d8:	bf 2e       	mov	r11, r31
     4da:	f0 2d       	mov	r31, r0
			HM10_transmit(SPS30_measurements);  
			sprintf(SPS30_measurements, "%.2f pm4.0\n\r", m.mc_4p0);
     4dc:	0f 2e       	mov	r0, r31
     4de:	fc e7       	ldi	r31, 0x7C	; 124
     4e0:	cf 2e       	mov	r12, r31
     4e2:	f2 e0       	ldi	r31, 0x02	; 2
     4e4:	df 2e       	mov	r13, r31
     4e6:	f0 2d       	mov	r31, r0
			HM10_transmit(SPS30_measurements);  
			sprintf(SPS30_measurements, "%.2f pm10.0\n\r", m.mc_10p0);
     4e8:	0f 2e       	mov	r0, r31
     4ea:	f9 e8       	ldi	r31, 0x89	; 137
     4ec:	6f 2e       	mov	r6, r31
     4ee:	f2 e0       	ldi	r31, 0x02	; 2
     4f0:	7f 2e       	mov	r7, r31
     4f2:	f0 2d       	mov	r31, r0
			HM10_transmit(SPS30_measurements);  
			sprintf(SPS30_measurements, "%.2f nc0.5\n\r", m.nc_0p5);
     4f4:	0f 2e       	mov	r0, r31
     4f6:	f7 e9       	ldi	r31, 0x97	; 151
     4f8:	4f 2e       	mov	r4, r31
     4fa:	f2 e0       	ldi	r31, 0x02	; 2
     4fc:	5f 2e       	mov	r5, r31
     4fe:	f0 2d       	mov	r31, r0
			HM10_transmit(SPS30_measurements);  
			sprintf(SPS30_measurements, "%.2f nc1.0\n\r", m.nc_1p0);
     500:	0f 2e       	mov	r0, r31
     502:	f4 ea       	ldi	r31, 0xA4	; 164
     504:	2f 2e       	mov	r2, r31
     506:	f2 e0       	ldi	r31, 0x02	; 2
     508:	3f 2e       	mov	r3, r31
     50a:	f0 2d       	mov	r31, r0

    printf("measurements started\n");

    while (1) 
	{
        sensirion_sleep_usec(SPS30_MEASUREMENT_DURATION_USEC); /* wait 1s */
     50c:	60 e4       	ldi	r22, 0x40	; 64
     50e:	72 e4       	ldi	r23, 0x42	; 66
     510:	8f e0       	ldi	r24, 0x0F	; 15
     512:	90 e0       	ldi	r25, 0x00	; 0
     514:	0e 94 9b 06 	call	0xd36	; 0xd36 <sensirion_sleep_usec>
        SPS30_command_response_code = sps30_read_measurement(&m);
     518:	87 ea       	ldi	r24, 0xA7	; 167
     51a:	93 e0       	ldi	r25, 0x03	; 3
     51c:	0e 94 d5 05 	call	0xbaa	; 0xbaa <sps30_read_measurement>
		
        if (SPS30_command_response_code < 0) 
     520:	99 23       	and	r25, r25
     522:	2c f4       	brge	.+10     	; 0x52e <main+0xc6>
		{
            printf("error reading measurement\n");
     524:	85 e3       	ldi	r24, 0x35	; 53
     526:	92 e0       	ldi	r25, 0x02	; 2
     528:	0e 94 0a 0f 	call	0x1e14	; 0x1e14 <puts>
     52c:	ef cf       	rjmp	.-34     	; 0x50c <main+0xa4>
			// 				m.mc_1p0, m.mc_2p5, m.mc_4p0, m.mc_10p0, 
			// 				m.nc_0p5, m.nc_1p0, m.nc_2p5, m.nc_4p0, 
			// 				m.nc_10p0, m.typical_particle_size);

			// Commented out code above is more concise. but formatting on DSD tech app is weird so have to send each measurement individually
			sprintf(SPS30_measurements, "measured values:\n\r");
     52e:	83 e1       	ldi	r24, 0x13	; 19
     530:	ef e4       	ldi	r30, 0x4F	; 79
     532:	f2 e0       	ldi	r31, 0x02	; 2
     534:	d7 01       	movw	r26, r14
     536:	01 90       	ld	r0, Z+
     538:	0d 92       	st	X+, r0
     53a:	8a 95       	dec	r24
     53c:	e1 f7       	brne	.-8      	; 0x536 <main+0xce>
			HM10_transmit(SPS30_measurements);  
     53e:	c7 01       	movw	r24, r14
     540:	0e 94 3b 01 	call	0x276	; 0x276 <HM10_transmit>
			sprintf(SPS30_measurements, "%.2f pm1.0\n\r", m.mc_1p0);
     544:	07 ea       	ldi	r16, 0xA7	; 167
     546:	13 e0       	ldi	r17, 0x03	; 3
     548:	f8 01       	movw	r30, r16
     54a:	83 81       	ldd	r24, Z+3	; 0x03
     54c:	8f 93       	push	r24
     54e:	82 81       	ldd	r24, Z+2	; 0x02
     550:	8f 93       	push	r24
     552:	81 81       	ldd	r24, Z+1	; 0x01
     554:	8f 93       	push	r24
     556:	80 81       	ld	r24, Z
     558:	8f 93       	push	r24
     55a:	9f 92       	push	r9
     55c:	8f 92       	push	r8
     55e:	ff 92       	push	r15
     560:	ef 92       	push	r14
     562:	0e 94 3a 0f 	call	0x1e74	; 0x1e74 <sprintf>
			HM10_transmit(SPS30_measurements);  
     566:	c7 01       	movw	r24, r14
     568:	0e 94 3b 01 	call	0x276	; 0x276 <HM10_transmit>
			sprintf(SPS30_measurements, "%.2f pm2.5\n\r", m.mc_2p5);
     56c:	f8 01       	movw	r30, r16
     56e:	87 81       	ldd	r24, Z+7	; 0x07
     570:	8f 93       	push	r24
     572:	86 81       	ldd	r24, Z+6	; 0x06
     574:	8f 93       	push	r24
     576:	85 81       	ldd	r24, Z+5	; 0x05
     578:	8f 93       	push	r24
     57a:	84 81       	ldd	r24, Z+4	; 0x04
     57c:	8f 93       	push	r24
     57e:	bf 92       	push	r11
     580:	af 92       	push	r10
     582:	ff 92       	push	r15
     584:	ef 92       	push	r14
     586:	0e 94 3a 0f 	call	0x1e74	; 0x1e74 <sprintf>
			HM10_transmit(SPS30_measurements);  
     58a:	c7 01       	movw	r24, r14
     58c:	0e 94 3b 01 	call	0x276	; 0x276 <HM10_transmit>
			sprintf(SPS30_measurements, "%.2f pm4.0\n\r", m.mc_4p0);
     590:	f8 01       	movw	r30, r16
     592:	83 85       	ldd	r24, Z+11	; 0x0b
     594:	8f 93       	push	r24
     596:	82 85       	ldd	r24, Z+10	; 0x0a
     598:	8f 93       	push	r24
     59a:	81 85       	ldd	r24, Z+9	; 0x09
     59c:	8f 93       	push	r24
     59e:	80 85       	ldd	r24, Z+8	; 0x08
     5a0:	8f 93       	push	r24
     5a2:	df 92       	push	r13
     5a4:	cf 92       	push	r12
     5a6:	ff 92       	push	r15
     5a8:	ef 92       	push	r14
     5aa:	0e 94 3a 0f 	call	0x1e74	; 0x1e74 <sprintf>
			HM10_transmit(SPS30_measurements);  
     5ae:	c7 01       	movw	r24, r14
     5b0:	0e 94 3b 01 	call	0x276	; 0x276 <HM10_transmit>
			sprintf(SPS30_measurements, "%.2f pm10.0\n\r", m.mc_10p0);
     5b4:	f8 01       	movw	r30, r16
     5b6:	87 85       	ldd	r24, Z+15	; 0x0f
     5b8:	8f 93       	push	r24
     5ba:	86 85       	ldd	r24, Z+14	; 0x0e
     5bc:	8f 93       	push	r24
     5be:	85 85       	ldd	r24, Z+13	; 0x0d
     5c0:	8f 93       	push	r24
     5c2:	84 85       	ldd	r24, Z+12	; 0x0c
     5c4:	8f 93       	push	r24
     5c6:	7f 92       	push	r7
     5c8:	6f 92       	push	r6
     5ca:	ff 92       	push	r15
     5cc:	ef 92       	push	r14
     5ce:	0e 94 3a 0f 	call	0x1e74	; 0x1e74 <sprintf>
			HM10_transmit(SPS30_measurements);  
     5d2:	0f b6       	in	r0, 0x3f	; 63
     5d4:	f8 94       	cli
     5d6:	de bf       	out	0x3e, r29	; 62
     5d8:	0f be       	out	0x3f, r0	; 63
     5da:	cd bf       	out	0x3d, r28	; 61
     5dc:	c7 01       	movw	r24, r14
     5de:	0e 94 3b 01 	call	0x276	; 0x276 <HM10_transmit>
			sprintf(SPS30_measurements, "%.2f nc0.5\n\r", m.nc_0p5);
     5e2:	f8 01       	movw	r30, r16
     5e4:	83 89       	ldd	r24, Z+19	; 0x13
     5e6:	8f 93       	push	r24
     5e8:	82 89       	ldd	r24, Z+18	; 0x12
     5ea:	8f 93       	push	r24
     5ec:	81 89       	ldd	r24, Z+17	; 0x11
     5ee:	8f 93       	push	r24
     5f0:	80 89       	ldd	r24, Z+16	; 0x10
     5f2:	8f 93       	push	r24
     5f4:	5f 92       	push	r5
     5f6:	4f 92       	push	r4
     5f8:	ff 92       	push	r15
     5fa:	ef 92       	push	r14
     5fc:	0e 94 3a 0f 	call	0x1e74	; 0x1e74 <sprintf>
			HM10_transmit(SPS30_measurements);  
     600:	c7 01       	movw	r24, r14
     602:	0e 94 3b 01 	call	0x276	; 0x276 <HM10_transmit>
			sprintf(SPS30_measurements, "%.2f nc1.0\n\r", m.nc_1p0);
     606:	f8 01       	movw	r30, r16
     608:	87 89       	ldd	r24, Z+23	; 0x17
     60a:	8f 93       	push	r24
     60c:	86 89       	ldd	r24, Z+22	; 0x16
     60e:	8f 93       	push	r24
     610:	85 89       	ldd	r24, Z+21	; 0x15
     612:	8f 93       	push	r24
     614:	84 89       	ldd	r24, Z+20	; 0x14
     616:	8f 93       	push	r24
     618:	3f 92       	push	r3
     61a:	2f 92       	push	r2
     61c:	ff 92       	push	r15
     61e:	ef 92       	push	r14
     620:	0e 94 3a 0f 	call	0x1e74	; 0x1e74 <sprintf>
			HM10_transmit(SPS30_measurements);  
     624:	c7 01       	movw	r24, r14
     626:	0e 94 3b 01 	call	0x276	; 0x276 <HM10_transmit>
			sprintf(SPS30_measurements, "%.2f nc2.5\n\r", m.nc_2p5);
     62a:	f8 01       	movw	r30, r16
     62c:	83 8d       	ldd	r24, Z+27	; 0x1b
     62e:	8f 93       	push	r24
     630:	82 8d       	ldd	r24, Z+26	; 0x1a
     632:	8f 93       	push	r24
     634:	81 8d       	ldd	r24, Z+25	; 0x19
     636:	8f 93       	push	r24
     638:	80 8d       	ldd	r24, Z+24	; 0x18
     63a:	8f 93       	push	r24
     63c:	81 eb       	ldi	r24, 0xB1	; 177
     63e:	92 e0       	ldi	r25, 0x02	; 2
     640:	9f 93       	push	r25
     642:	8f 93       	push	r24
     644:	ff 92       	push	r15
     646:	ef 92       	push	r14
     648:	0e 94 3a 0f 	call	0x1e74	; 0x1e74 <sprintf>
			HM10_transmit(SPS30_measurements);  
     64c:	c7 01       	movw	r24, r14
     64e:	0e 94 3b 01 	call	0x276	; 0x276 <HM10_transmit>
			sprintf(SPS30_measurements, "%.2f nc4.5\n\r", m.nc_4p0);
     652:	f8 01       	movw	r30, r16
     654:	87 8d       	ldd	r24, Z+31	; 0x1f
     656:	8f 93       	push	r24
     658:	86 8d       	ldd	r24, Z+30	; 0x1e
     65a:	8f 93       	push	r24
     65c:	85 8d       	ldd	r24, Z+29	; 0x1d
     65e:	8f 93       	push	r24
     660:	84 8d       	ldd	r24, Z+28	; 0x1c
     662:	8f 93       	push	r24
     664:	8e eb       	ldi	r24, 0xBE	; 190
     666:	92 e0       	ldi	r25, 0x02	; 2
     668:	9f 93       	push	r25
     66a:	8f 93       	push	r24
     66c:	ff 92       	push	r15
     66e:	ef 92       	push	r14
     670:	0e 94 3a 0f 	call	0x1e74	; 0x1e74 <sprintf>
			HM10_transmit(SPS30_measurements);  
     674:	0f b6       	in	r0, 0x3f	; 63
     676:	f8 94       	cli
     678:	de bf       	out	0x3e, r29	; 62
     67a:	0f be       	out	0x3f, r0	; 63
     67c:	cd bf       	out	0x3d, r28	; 61
     67e:	c7 01       	movw	r24, r14
     680:	0e 94 3b 01 	call	0x276	; 0x276 <HM10_transmit>
			sprintf(SPS30_measurements, "%.2f nc10.0\n\r", m.nc_10p0);
     684:	f8 01       	movw	r30, r16
     686:	83 a1       	ldd	r24, Z+35	; 0x23
     688:	8f 93       	push	r24
     68a:	82 a1       	ldd	r24, Z+34	; 0x22
     68c:	8f 93       	push	r24
     68e:	81 a1       	ldd	r24, Z+33	; 0x21
     690:	8f 93       	push	r24
     692:	80 a1       	ldd	r24, Z+32	; 0x20
     694:	8f 93       	push	r24
     696:	8b ec       	ldi	r24, 0xCB	; 203
     698:	92 e0       	ldi	r25, 0x02	; 2
     69a:	9f 93       	push	r25
     69c:	8f 93       	push	r24
     69e:	ff 92       	push	r15
     6a0:	ef 92       	push	r14
     6a2:	0e 94 3a 0f 	call	0x1e74	; 0x1e74 <sprintf>
			HM10_transmit(SPS30_measurements);  
     6a6:	c7 01       	movw	r24, r14
     6a8:	0e 94 3b 01 	call	0x276	; 0x276 <HM10_transmit>
			sprintf(SPS30_measurements, "%.2f typical particle size\n\r", m.typical_particle_size);
     6ac:	f8 01       	movw	r30, r16
     6ae:	87 a1       	ldd	r24, Z+39	; 0x27
     6b0:	8f 93       	push	r24
     6b2:	86 a1       	ldd	r24, Z+38	; 0x26
     6b4:	8f 93       	push	r24
     6b6:	85 a1       	ldd	r24, Z+37	; 0x25
     6b8:	8f 93       	push	r24
     6ba:	84 a1       	ldd	r24, Z+36	; 0x24
     6bc:	8f 93       	push	r24
     6be:	89 ed       	ldi	r24, 0xD9	; 217
     6c0:	92 e0       	ldi	r25, 0x02	; 2
     6c2:	9f 93       	push	r25
     6c4:	8f 93       	push	r24
     6c6:	ff 92       	push	r15
     6c8:	ef 92       	push	r14
     6ca:	0e 94 3a 0f 	call	0x1e74	; 0x1e74 <sprintf>
			HM10_transmit(SPS30_measurements);  
     6ce:	c7 01       	movw	r24, r14
     6d0:	0e 94 3b 01 	call	0x276	; 0x276 <HM10_transmit>
			
			sensirion_sleep_usec(5000000);
     6d4:	60 e4       	ldi	r22, 0x40	; 64
     6d6:	7b e4       	ldi	r23, 0x4B	; 75
     6d8:	8c e4       	ldi	r24, 0x4C	; 76
     6da:	90 e0       	ldi	r25, 0x00	; 0
     6dc:	0e 94 9b 06 	call	0xd36	; 0xd36 <sensirion_sleep_usec>
     6e0:	0f b6       	in	r0, 0x3f	; 63
     6e2:	f8 94       	cli
     6e4:	de bf       	out	0x3e, r29	; 62
     6e6:	0f be       	out	0x3f, r0	; 63
     6e8:	cd bf       	out	0x3d, r28	; 61
     6ea:	10 cf       	rjmp	.-480    	; 0x50c <main+0xa4>

000006ec <__vector_28>:
    }
}

// ISR to handle USART1 rx from HM10
ISR(USART1_RX_vect) 
{
     6ec:	1f 92       	push	r1
     6ee:	0f 92       	push	r0
     6f0:	0f b6       	in	r0, 0x3f	; 63
     6f2:	0f 92       	push	r0
     6f4:	11 24       	eor	r1, r1
     6f6:	2f 93       	push	r18
     6f8:	3f 93       	push	r19
     6fa:	4f 93       	push	r20
     6fc:	5f 93       	push	r21
     6fe:	6f 93       	push	r22
     700:	7f 93       	push	r23
     702:	8f 93       	push	r24
     704:	9f 93       	push	r25
     706:	af 93       	push	r26
     708:	bf 93       	push	r27
     70a:	ef 93       	push	r30
     70c:	ff 93       	push	r31
	char received_char = UDR1; 
     70e:	90 91 ce 00 	lds	r25, 0x00CE	; 0x8000ce <__DATA_REGION_ORIGIN__+0x6e>

	// Ensure buffer does not overflow
	if (HM10_response_buffer_index < HM10_response_buffer_SIZE - 1) {  
     712:	80 91 66 03 	lds	r24, 0x0366	; 0x800366 <__data_end>
     716:	8f 33       	cpi	r24, 0x3F	; 63
     718:	60 f4       	brcc	.+24     	; 0x732 <__vector_28+0x46>
		HM10_response_buffer[HM10_response_buffer_index] = received_char;
     71a:	e0 91 66 03 	lds	r30, 0x0366	; 0x800366 <__data_end>
     71e:	f0 e0       	ldi	r31, 0x00	; 0
     720:	e9 59       	subi	r30, 0x99	; 153
     722:	fc 4f       	sbci	r31, 0xFC	; 252
     724:	90 83       	st	Z, r25
		HM10_response_buffer_index++;
     726:	80 91 66 03 	lds	r24, 0x0366	; 0x800366 <__data_end>
     72a:	8f 5f       	subi	r24, 0xFF	; 255
     72c:	80 93 66 03 	sts	0x0366, r24	; 0x800366 <__data_end>
     730:	0a c0       	rjmp	.+20     	; 0x746 <__vector_28+0x5a>
	}
	else {
		printf("Buffer full, clearing...");
     732:	86 ef       	ldi	r24, 0xF6	; 246
     734:	92 e0       	ldi	r25, 0x02	; 2
     736:	9f 93       	push	r25
     738:	8f 93       	push	r24
     73a:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <printf>
		HM10_clear_response_buffer();
     73e:	0e 94 5d 01 	call	0x2ba	; 0x2ba <HM10_clear_response_buffer>
     742:	0f 90       	pop	r0
     744:	0f 90       	pop	r0
	}
     746:	ff 91       	pop	r31
     748:	ef 91       	pop	r30
     74a:	bf 91       	pop	r27
     74c:	af 91       	pop	r26
     74e:	9f 91       	pop	r25
     750:	8f 91       	pop	r24
     752:	7f 91       	pop	r23
     754:	6f 91       	pop	r22
     756:	5f 91       	pop	r21
     758:	4f 91       	pop	r20
     75a:	3f 91       	pop	r19
     75c:	2f 91       	pop	r18
     75e:	0f 90       	pop	r0
     760:	0f be       	out	0x3f, r0	; 63
     762:	0f 90       	pop	r0
     764:	1f 90       	pop	r1
     766:	18 95       	reti

00000768 <sensirion_bytes_to_uint32_t>:
     768:	fc 01       	movw	r30, r24
     76a:	20 81       	ld	r18, Z
     76c:	61 81       	ldd	r22, Z+1	; 0x01
     76e:	86 2f       	mov	r24, r22
     770:	90 e0       	ldi	r25, 0x00	; 0
     772:	a0 e0       	ldi	r26, 0x00	; 0
     774:	b0 e0       	ldi	r27, 0x00	; 0
     776:	dc 01       	movw	r26, r24
     778:	99 27       	eor	r25, r25
     77a:	88 27       	eor	r24, r24
     77c:	b2 2b       	or	r27, r18
     77e:	23 81       	ldd	r18, Z+3	; 0x03
     780:	82 2b       	or	r24, r18
     782:	22 81       	ldd	r18, Z+2	; 0x02
     784:	bc 01       	movw	r22, r24
     786:	cd 01       	movw	r24, r26
     788:	72 2b       	or	r23, r18
     78a:	08 95       	ret

0000078c <sensirion_bytes_to_float>:
     78c:	0e 94 b4 03 	call	0x768	; 0x768 <sensirion_bytes_to_uint32_t>
     790:	08 95       	ret

00000792 <sensirion_common_generate_crc>:
     792:	61 15       	cp	r22, r1
     794:	71 05       	cpc	r23, r1
     796:	a1 f0       	breq	.+40     	; 0x7c0 <sensirion_common_generate_crc+0x2e>
     798:	fc 01       	movw	r30, r24
     79a:	68 0f       	add	r22, r24
     79c:	79 1f       	adc	r23, r25
     79e:	8f ef       	ldi	r24, 0xFF	; 255
     7a0:	21 e3       	ldi	r18, 0x31	; 49
     7a2:	91 91       	ld	r25, Z+
     7a4:	89 27       	eor	r24, r25
     7a6:	98 e0       	ldi	r25, 0x08	; 8
     7a8:	88 23       	and	r24, r24
     7aa:	1c f4       	brge	.+6      	; 0x7b2 <sensirion_common_generate_crc+0x20>
     7ac:	88 0f       	add	r24, r24
     7ae:	82 27       	eor	r24, r18
     7b0:	01 c0       	rjmp	.+2      	; 0x7b4 <sensirion_common_generate_crc+0x22>
     7b2:	88 0f       	add	r24, r24
     7b4:	91 50       	subi	r25, 0x01	; 1
     7b6:	c1 f7       	brne	.-16     	; 0x7a8 <sensirion_common_generate_crc+0x16>
     7b8:	e6 17       	cp	r30, r22
     7ba:	f7 07       	cpc	r31, r23
     7bc:	91 f7       	brne	.-28     	; 0x7a2 <sensirion_common_generate_crc+0x10>
     7be:	08 95       	ret
     7c0:	8f ef       	ldi	r24, 0xFF	; 255
     7c2:	08 95       	ret

000007c4 <sensirion_common_check_crc>:
     7c4:	cf 93       	push	r28
     7c6:	c4 2f       	mov	r28, r20
     7c8:	0e 94 c9 03 	call	0x792	; 0x792 <sensirion_common_generate_crc>
     7cc:	91 e0       	ldi	r25, 0x01	; 1
     7ce:	8c 13       	cpse	r24, r28
     7d0:	01 c0       	rjmp	.+2      	; 0x7d4 <sensirion_common_check_crc+0x10>
     7d2:	90 e0       	ldi	r25, 0x00	; 0
     7d4:	89 2f       	mov	r24, r25
     7d6:	81 95       	neg	r24
     7d8:	cf 91       	pop	r28
     7da:	08 95       	ret

000007dc <sensirion_fill_cmd_send_buf>:
     7dc:	ef 92       	push	r14
     7de:	ff 92       	push	r15
     7e0:	0f 93       	push	r16
     7e2:	1f 93       	push	r17
     7e4:	cf 93       	push	r28
     7e6:	df 93       	push	r29
     7e8:	ec 01       	movw	r28, r24
     7ea:	78 83       	st	Y, r23
     7ec:	69 83       	std	Y+1, r22	; 0x01
     7ee:	22 23       	and	r18, r18
     7f0:	01 f1       	breq	.+64     	; 0x832 <sensirion_fill_cmd_send_buf+0x56>
     7f2:	e2 2e       	mov	r14, r18
     7f4:	22 96       	adiw	r28, 0x02	; 2
     7f6:	04 2f       	mov	r16, r20
     7f8:	15 2f       	mov	r17, r21
     7fa:	f1 2c       	mov	r15, r1
     7fc:	f8 01       	movw	r30, r16
     7fe:	81 81       	ldd	r24, Z+1	; 0x01
     800:	88 83       	st	Y, r24
     802:	80 81       	ld	r24, Z
     804:	0e 5f       	subi	r16, 0xFE	; 254
     806:	1f 4f       	sbci	r17, 0xFF	; 255
     808:	89 83       	std	Y+1, r24	; 0x01
     80a:	62 e0       	ldi	r22, 0x02	; 2
     80c:	70 e0       	ldi	r23, 0x00	; 0
     80e:	ce 01       	movw	r24, r28
     810:	0e 94 c9 03 	call	0x792	; 0x792 <sensirion_common_generate_crc>
     814:	8a 83       	std	Y+2, r24	; 0x02
     816:	f3 94       	inc	r15
     818:	23 96       	adiw	r28, 0x03	; 3
     81a:	ef 10       	cpse	r14, r15
     81c:	ef cf       	rjmp	.-34     	; 0x7fc <sensirion_fill_cmd_send_buf+0x20>
     81e:	ea 94       	dec	r14
     820:	8e 2d       	mov	r24, r14
     822:	90 e0       	ldi	r25, 0x00	; 0
     824:	9c 01       	movw	r18, r24
     826:	22 0f       	add	r18, r18
     828:	33 1f       	adc	r19, r19
     82a:	82 0f       	add	r24, r18
     82c:	93 1f       	adc	r25, r19
     82e:	05 96       	adiw	r24, 0x05	; 5
     830:	02 c0       	rjmp	.+4      	; 0x836 <sensirion_fill_cmd_send_buf+0x5a>
     832:	82 e0       	ldi	r24, 0x02	; 2
     834:	90 e0       	ldi	r25, 0x00	; 0
     836:	df 91       	pop	r29
     838:	cf 91       	pop	r28
     83a:	1f 91       	pop	r17
     83c:	0f 91       	pop	r16
     83e:	ff 90       	pop	r15
     840:	ef 90       	pop	r14
     842:	08 95       	ret

00000844 <sensirion_i2c_read_words_as_bytes>:
     844:	6f 92       	push	r6
     846:	7f 92       	push	r7
     848:	8f 92       	push	r8
     84a:	9f 92       	push	r9
     84c:	af 92       	push	r10
     84e:	bf 92       	push	r11
     850:	cf 92       	push	r12
     852:	df 92       	push	r13
     854:	ef 92       	push	r14
     856:	ff 92       	push	r15
     858:	0f 93       	push	r16
     85a:	1f 93       	push	r17
     85c:	cf 93       	push	r28
     85e:	df 93       	push	r29
     860:	cd b7       	in	r28, 0x3d	; 61
     862:	de b7       	in	r29, 0x3e	; 62
     864:	c0 54       	subi	r28, 0x40	; 64
     866:	d1 09       	sbc	r29, r1
     868:	0f b6       	in	r0, 0x3f	; 63
     86a:	f8 94       	cli
     86c:	de bf       	out	0x3e, r29	; 62
     86e:	0f be       	out	0x3f, r0	; 63
     870:	cd bf       	out	0x3d, r28	; 61
     872:	c6 2e       	mov	r12, r22
     874:	d7 2e       	mov	r13, r23
     876:	4a 01       	movw	r8, r20
     878:	88 0c       	add	r8, r8
     87a:	99 1c       	adc	r9, r9
     87c:	84 0e       	add	r8, r20
     87e:	95 1e       	adc	r9, r21
     880:	a4 01       	movw	r20, r8
     882:	be 01       	movw	r22, r28
     884:	6f 5f       	subi	r22, 0xFF	; 255
     886:	7f 4f       	sbci	r23, 0xFF	; 255
     888:	0e 94 1f 08 	call	0x103e	; 0x103e <sensirion_i2c_read>
     88c:	08 2f       	mov	r16, r24
     88e:	08 2e       	mov	r0, r24
     890:	00 0c       	add	r0, r0
     892:	11 0b       	sbc	r17, r17
     894:	01 15       	cp	r16, r1
     896:	11 05       	cpc	r17, r1
     898:	31 f4       	brne	.+12     	; 0x8a6 <sensirion_i2c_read_words_as_bytes+0x62>
     89a:	81 14       	cp	r8, r1
     89c:	91 04       	cpc	r9, r1
     89e:	91 f4       	brne	.+36     	; 0x8c4 <sensirion_i2c_read_words_as_bytes+0x80>
     8a0:	80 e0       	ldi	r24, 0x00	; 0
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	4a c0       	rjmp	.+148    	; 0x93a <__stack+0x3b>
     8a6:	1f 93       	push	r17
     8a8:	8f 93       	push	r24
     8aa:	8f e0       	ldi	r24, 0x0F	; 15
     8ac:	93 e0       	ldi	r25, 0x03	; 3
     8ae:	9f 93       	push	r25
     8b0:	8f 93       	push	r24
     8b2:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <printf>
     8b6:	0f 90       	pop	r0
     8b8:	0f 90       	pop	r0
     8ba:	0f 90       	pop	r0
     8bc:	0f 90       	pop	r0
     8be:	80 2f       	mov	r24, r16
     8c0:	91 2f       	mov	r25, r17
     8c2:	3b c0       	rjmp	.+118    	; 0x93a <__stack+0x3b>
     8c4:	8e 01       	movw	r16, r28
     8c6:	0f 5f       	subi	r16, 0xFF	; 255
     8c8:	1f 4f       	sbci	r17, 0xFF	; 255
     8ca:	ec 2c       	mov	r14, r12
     8cc:	fd 2c       	mov	r15, r13
     8ce:	c1 2c       	mov	r12, r1
     8d0:	d1 2c       	mov	r13, r1
     8d2:	0f 2e       	mov	r0, r31
     8d4:	fa e2       	ldi	r31, 0x2A	; 42
     8d6:	6f 2e       	mov	r6, r31
     8d8:	f3 e0       	ldi	r31, 0x03	; 3
     8da:	7f 2e       	mov	r7, r31
     8dc:	f0 2d       	mov	r31, r0
     8de:	58 01       	movw	r10, r16
     8e0:	f8 01       	movw	r30, r16
     8e2:	42 81       	ldd	r20, Z+2	; 0x02
     8e4:	62 e0       	ldi	r22, 0x02	; 2
     8e6:	70 e0       	ldi	r23, 0x00	; 0
     8e8:	c8 01       	movw	r24, r16
     8ea:	0e 94 e2 03 	call	0x7c4	; 0x7c4 <sensirion_common_check_crc>
     8ee:	28 2f       	mov	r18, r24
     8f0:	08 2e       	mov	r0, r24
     8f2:	00 0c       	add	r0, r0
     8f4:	33 0b       	sbc	r19, r19
     8f6:	21 15       	cp	r18, r1
     8f8:	31 05       	cpc	r19, r1
     8fa:	51 f0       	breq	.+20     	; 0x910 <__stack+0x11>
     8fc:	3f 93       	push	r19
     8fe:	8f 93       	push	r24
     900:	7f 92       	push	r7
     902:	6f 92       	push	r6
     904:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <printf>
     908:	0f 90       	pop	r0
     90a:	0f 90       	pop	r0
     90c:	0f 90       	pop	r0
     90e:	0f 90       	pop	r0
     910:	f5 01       	movw	r30, r10
     912:	80 81       	ld	r24, Z
     914:	f7 01       	movw	r30, r14
     916:	80 83       	st	Z, r24
     918:	f5 01       	movw	r30, r10
     91a:	81 81       	ldd	r24, Z+1	; 0x01
     91c:	f7 01       	movw	r30, r14
     91e:	81 83       	std	Z+1, r24	; 0x01
     920:	f3 e0       	ldi	r31, 0x03	; 3
     922:	cf 0e       	add	r12, r31
     924:	d1 1c       	adc	r13, r1
     926:	0d 5f       	subi	r16, 0xFD	; 253
     928:	1f 4f       	sbci	r17, 0xFF	; 255
     92a:	82 e0       	ldi	r24, 0x02	; 2
     92c:	e8 0e       	add	r14, r24
     92e:	f1 1c       	adc	r15, r1
     930:	c8 14       	cp	r12, r8
     932:	d9 04       	cpc	r13, r9
     934:	a0 f2       	brcs	.-88     	; 0x8de <sensirion_i2c_read_words_as_bytes+0x9a>
     936:	80 e0       	ldi	r24, 0x00	; 0
     938:	90 e0       	ldi	r25, 0x00	; 0
     93a:	c0 5c       	subi	r28, 0xC0	; 192
     93c:	df 4f       	sbci	r29, 0xFF	; 255
     93e:	0f b6       	in	r0, 0x3f	; 63
     940:	f8 94       	cli
     942:	de bf       	out	0x3e, r29	; 62
     944:	0f be       	out	0x3f, r0	; 63
     946:	cd bf       	out	0x3d, r28	; 61
     948:	df 91       	pop	r29
     94a:	cf 91       	pop	r28
     94c:	1f 91       	pop	r17
     94e:	0f 91       	pop	r16
     950:	ff 90       	pop	r15
     952:	ef 90       	pop	r14
     954:	df 90       	pop	r13
     956:	cf 90       	pop	r12
     958:	bf 90       	pop	r11
     95a:	af 90       	pop	r10
     95c:	9f 90       	pop	r9
     95e:	8f 90       	pop	r8
     960:	7f 90       	pop	r7
     962:	6f 90       	pop	r6
     964:	08 95       	ret

00000966 <sensirion_i2c_read_words>:
     966:	0f 93       	push	r16
     968:	1f 93       	push	r17
     96a:	cf 93       	push	r28
     96c:	df 93       	push	r29
     96e:	8b 01       	movw	r16, r22
     970:	ea 01       	movw	r28, r20
     972:	0e 94 22 04 	call	0x844	; 0x844 <sensirion_i2c_read_words_as_bytes>
     976:	00 97       	sbiw	r24, 0x00	; 0
     978:	e1 f4       	brne	.+56     	; 0x9b2 <sensirion_i2c_read_words+0x4c>
     97a:	20 97       	sbiw	r28, 0x00	; 0
     97c:	c1 f0       	breq	.+48     	; 0x9ae <sensirion_i2c_read_words+0x48>
     97e:	e0 e0       	ldi	r30, 0x00	; 0
     980:	f0 e0       	ldi	r31, 0x00	; 0
     982:	20 e0       	ldi	r18, 0x00	; 0
     984:	ee 0f       	add	r30, r30
     986:	ff 1f       	adc	r31, r31
     988:	e0 0f       	add	r30, r16
     98a:	f1 1f       	adc	r31, r17
     98c:	80 81       	ld	r24, Z
     98e:	90 e0       	ldi	r25, 0x00	; 0
     990:	98 2f       	mov	r25, r24
     992:	88 27       	eor	r24, r24
     994:	31 81       	ldd	r19, Z+1	; 0x01
     996:	83 2b       	or	r24, r19
     998:	91 83       	std	Z+1, r25	; 0x01
     99a:	80 83       	st	Z, r24
     99c:	2f 5f       	subi	r18, 0xFF	; 255
     99e:	e2 2f       	mov	r30, r18
     9a0:	f0 e0       	ldi	r31, 0x00	; 0
     9a2:	ec 17       	cp	r30, r28
     9a4:	fd 07       	cpc	r31, r29
     9a6:	70 f3       	brcs	.-36     	; 0x984 <sensirion_i2c_read_words+0x1e>
     9a8:	80 e0       	ldi	r24, 0x00	; 0
     9aa:	90 e0       	ldi	r25, 0x00	; 0
     9ac:	02 c0       	rjmp	.+4      	; 0x9b2 <sensirion_i2c_read_words+0x4c>
     9ae:	80 e0       	ldi	r24, 0x00	; 0
     9b0:	90 e0       	ldi	r25, 0x00	; 0
     9b2:	df 91       	pop	r29
     9b4:	cf 91       	pop	r28
     9b6:	1f 91       	pop	r17
     9b8:	0f 91       	pop	r16
     9ba:	08 95       	ret

000009bc <sensirion_i2c_write_cmd>:
     9bc:	1f 93       	push	r17
     9be:	cf 93       	push	r28
     9c0:	df 93       	push	r29
     9c2:	00 d0       	rcall	.+0      	; 0x9c4 <sensirion_i2c_write_cmd+0x8>
     9c4:	cd b7       	in	r28, 0x3d	; 61
     9c6:	de b7       	in	r29, 0x3e	; 62
     9c8:	18 2f       	mov	r17, r24
     9ca:	20 e0       	ldi	r18, 0x00	; 0
     9cc:	40 e0       	ldi	r20, 0x00	; 0
     9ce:	50 e0       	ldi	r21, 0x00	; 0
     9d0:	ce 01       	movw	r24, r28
     9d2:	01 96       	adiw	r24, 0x01	; 1
     9d4:	0e 94 ee 03 	call	0x7dc	; 0x7dc <sensirion_fill_cmd_send_buf>
     9d8:	42 e0       	ldi	r20, 0x02	; 2
     9da:	50 e0       	ldi	r21, 0x00	; 0
     9dc:	be 01       	movw	r22, r28
     9de:	6f 5f       	subi	r22, 0xFF	; 255
     9e0:	7f 4f       	sbci	r23, 0xFF	; 255
     9e2:	81 2f       	mov	r24, r17
     9e4:	0e 94 33 08 	call	0x1066	; 0x1066 <sensirion_i2c_write>
     9e8:	08 2e       	mov	r0, r24
     9ea:	00 0c       	add	r0, r0
     9ec:	99 0b       	sbc	r25, r25
     9ee:	0f 90       	pop	r0
     9f0:	0f 90       	pop	r0
     9f2:	df 91       	pop	r29
     9f4:	cf 91       	pop	r28
     9f6:	1f 91       	pop	r17
     9f8:	08 95       	ret

000009fa <sensirion_i2c_write_cmd_with_args>:
     9fa:	1f 93       	push	r17
     9fc:	cf 93       	push	r28
     9fe:	df 93       	push	r29
     a00:	cd b7       	in	r28, 0x3d	; 61
     a02:	de b7       	in	r29, 0x3e	; 62
     a04:	a0 97       	sbiw	r28, 0x20	; 32
     a06:	0f b6       	in	r0, 0x3f	; 63
     a08:	f8 94       	cli
     a0a:	de bf       	out	0x3e, r29	; 62
     a0c:	0f be       	out	0x3f, r0	; 63
     a0e:	cd bf       	out	0x3d, r28	; 61
     a10:	18 2f       	mov	r17, r24
     a12:	ce 01       	movw	r24, r28
     a14:	01 96       	adiw	r24, 0x01	; 1
     a16:	0e 94 ee 03 	call	0x7dc	; 0x7dc <sensirion_fill_cmd_send_buf>
     a1a:	ac 01       	movw	r20, r24
     a1c:	be 01       	movw	r22, r28
     a1e:	6f 5f       	subi	r22, 0xFF	; 255
     a20:	7f 4f       	sbci	r23, 0xFF	; 255
     a22:	81 2f       	mov	r24, r17
     a24:	0e 94 33 08 	call	0x1066	; 0x1066 <sensirion_i2c_write>
     a28:	08 2e       	mov	r0, r24
     a2a:	00 0c       	add	r0, r0
     a2c:	99 0b       	sbc	r25, r25
     a2e:	a0 96       	adiw	r28, 0x20	; 32
     a30:	0f b6       	in	r0, 0x3f	; 63
     a32:	f8 94       	cli
     a34:	de bf       	out	0x3e, r29	; 62
     a36:	0f be       	out	0x3f, r0	; 63
     a38:	cd bf       	out	0x3d, r28	; 61
     a3a:	df 91       	pop	r29
     a3c:	cf 91       	pop	r28
     a3e:	1f 91       	pop	r17
     a40:	08 95       	ret

00000a42 <sensirion_i2c_delayed_read_cmd>:
     a42:	8f 92       	push	r8
     a44:	9f 92       	push	r9
     a46:	af 92       	push	r10
     a48:	bf 92       	push	r11
     a4a:	df 92       	push	r13
     a4c:	ef 92       	push	r14
     a4e:	ff 92       	push	r15
     a50:	0f 93       	push	r16
     a52:	1f 93       	push	r17
     a54:	cf 93       	push	r28
     a56:	df 93       	push	r29
     a58:	00 d0       	rcall	.+0      	; 0xa5a <sensirion_i2c_delayed_read_cmd+0x18>
     a5a:	cd b7       	in	r28, 0x3d	; 61
     a5c:	de b7       	in	r29, 0x3e	; 62
     a5e:	d8 2e       	mov	r13, r24
     a60:	49 01       	movw	r8, r18
     a62:	5a 01       	movw	r10, r20
     a64:	20 e0       	ldi	r18, 0x00	; 0
     a66:	40 e0       	ldi	r20, 0x00	; 0
     a68:	50 e0       	ldi	r21, 0x00	; 0
     a6a:	ce 01       	movw	r24, r28
     a6c:	01 96       	adiw	r24, 0x01	; 1
     a6e:	0e 94 ee 03 	call	0x7dc	; 0x7dc <sensirion_fill_cmd_send_buf>
     a72:	42 e0       	ldi	r20, 0x02	; 2
     a74:	50 e0       	ldi	r21, 0x00	; 0
     a76:	be 01       	movw	r22, r28
     a78:	6f 5f       	subi	r22, 0xFF	; 255
     a7a:	7f 4f       	sbci	r23, 0xFF	; 255
     a7c:	8d 2d       	mov	r24, r13
     a7e:	0e 94 33 08 	call	0x1066	; 0x1066 <sensirion_i2c_write>
     a82:	28 2f       	mov	r18, r24
     a84:	88 0f       	add	r24, r24
     a86:	33 0b       	sbc	r19, r19
     a88:	21 15       	cp	r18, r1
     a8a:	31 05       	cpc	r19, r1
     a8c:	79 f4       	brne	.+30     	; 0xaac <sensirion_i2c_delayed_read_cmd+0x6a>
     a8e:	81 14       	cp	r8, r1
     a90:	91 04       	cpc	r9, r1
     a92:	a1 04       	cpc	r10, r1
     a94:	b1 04       	cpc	r11, r1
     a96:	21 f0       	breq	.+8      	; 0xaa0 <sensirion_i2c_delayed_read_cmd+0x5e>
     a98:	c5 01       	movw	r24, r10
     a9a:	b4 01       	movw	r22, r8
     a9c:	0e 94 9b 06 	call	0xd36	; 0xd36 <sensirion_sleep_usec>
     aa0:	a7 01       	movw	r20, r14
     aa2:	b8 01       	movw	r22, r16
     aa4:	8d 2d       	mov	r24, r13
     aa6:	0e 94 b3 04 	call	0x966	; 0x966 <sensirion_i2c_read_words>
     aaa:	02 c0       	rjmp	.+4      	; 0xab0 <sensirion_i2c_delayed_read_cmd+0x6e>
     aac:	82 2f       	mov	r24, r18
     aae:	93 2f       	mov	r25, r19
     ab0:	0f 90       	pop	r0
     ab2:	0f 90       	pop	r0
     ab4:	df 91       	pop	r29
     ab6:	cf 91       	pop	r28
     ab8:	1f 91       	pop	r17
     aba:	0f 91       	pop	r16
     abc:	ff 90       	pop	r15
     abe:	ef 90       	pop	r14
     ac0:	df 90       	pop	r13
     ac2:	bf 90       	pop	r11
     ac4:	af 90       	pop	r10
     ac6:	9f 90       	pop	r9
     ac8:	8f 90       	pop	r8
     aca:	08 95       	ret

00000acc <sensirion_i2c_read_cmd>:
     acc:	ef 92       	push	r14
     ace:	ff 92       	push	r15
     ad0:	0f 93       	push	r16
     ad2:	1f 93       	push	r17
     ad4:	79 01       	movw	r14, r18
     ad6:	8a 01       	movw	r16, r20
     ad8:	20 e0       	ldi	r18, 0x00	; 0
     ada:	30 e0       	ldi	r19, 0x00	; 0
     adc:	a9 01       	movw	r20, r18
     ade:	0e 94 21 05 	call	0xa42	; 0xa42 <sensirion_i2c_delayed_read_cmd>
     ae2:	1f 91       	pop	r17
     ae4:	0f 91       	pop	r16
     ae6:	ff 90       	pop	r15
     ae8:	ef 90       	pop	r14
     aea:	08 95       	ret

00000aec <sps30_read_firmware_version>:
     aec:	ef 92       	push	r14
     aee:	ff 92       	push	r15
     af0:	0f 93       	push	r16
     af2:	1f 93       	push	r17
     af4:	cf 93       	push	r28
     af6:	df 93       	push	r29
     af8:	00 d0       	rcall	.+0      	; 0xafa <sps30_read_firmware_version+0xe>
     afa:	cd b7       	in	r28, 0x3d	; 61
     afc:	de b7       	in	r29, 0x3e	; 62
     afe:	7c 01       	movw	r14, r24
     b00:	8b 01       	movw	r16, r22
     b02:	21 e0       	ldi	r18, 0x01	; 1
     b04:	30 e0       	ldi	r19, 0x00	; 0
     b06:	ae 01       	movw	r20, r28
     b08:	4f 5f       	subi	r20, 0xFF	; 255
     b0a:	5f 4f       	sbci	r21, 0xFF	; 255
     b0c:	60 e0       	ldi	r22, 0x00	; 0
     b0e:	71 ed       	ldi	r23, 0xD1	; 209
     b10:	89 e6       	ldi	r24, 0x69	; 105
     b12:	0e 94 66 05 	call	0xacc	; 0xacc <sensirion_i2c_read_cmd>
     b16:	29 81       	ldd	r18, Y+1	; 0x01
     b18:	3a 81       	ldd	r19, Y+2	; 0x02
     b1a:	f7 01       	movw	r30, r14
     b1c:	30 83       	st	Z, r19
     b1e:	f8 01       	movw	r30, r16
     b20:	20 83       	st	Z, r18
     b22:	0f 90       	pop	r0
     b24:	0f 90       	pop	r0
     b26:	df 91       	pop	r29
     b28:	cf 91       	pop	r28
     b2a:	1f 91       	pop	r17
     b2c:	0f 91       	pop	r16
     b2e:	ff 90       	pop	r15
     b30:	ef 90       	pop	r14
     b32:	08 95       	ret

00000b34 <sps30_get_serial>:
     b34:	cf 93       	push	r28
     b36:	df 93       	push	r29
     b38:	ec 01       	movw	r28, r24
     b3a:	63 e3       	ldi	r22, 0x33	; 51
     b3c:	70 ed       	ldi	r23, 0xD0	; 208
     b3e:	89 e6       	ldi	r24, 0x69	; 105
     b40:	0e 94 de 04 	call	0x9bc	; 0x9bc <sensirion_i2c_write_cmd>
     b44:	9c 01       	movw	r18, r24
     b46:	00 97       	sbiw	r24, 0x00	; 0
     b48:	41 f4       	brne	.+16     	; 0xb5a <sps30_get_serial+0x26>
     b4a:	40 e1       	ldi	r20, 0x10	; 16
     b4c:	50 e0       	ldi	r21, 0x00	; 0
     b4e:	be 01       	movw	r22, r28
     b50:	89 e6       	ldi	r24, 0x69	; 105
     b52:	0e 94 22 04 	call	0x844	; 0x844 <sensirion_i2c_read_words_as_bytes>
     b56:	1f 8e       	std	Y+31, r1	; 0x1f
     b58:	01 c0       	rjmp	.+2      	; 0xb5c <sps30_get_serial+0x28>
     b5a:	93 2f       	mov	r25, r19
     b5c:	df 91       	pop	r29
     b5e:	cf 91       	pop	r28
     b60:	08 95       	ret

00000b62 <sps30_start_measurement>:
     b62:	0f 93       	push	r16
     b64:	1f 93       	push	r17
     b66:	cf 93       	push	r28
     b68:	df 93       	push	r29
     b6a:	00 d0       	rcall	.+0      	; 0xb6c <sps30_start_measurement+0xa>
     b6c:	cd b7       	in	r28, 0x3d	; 61
     b6e:	de b7       	in	r29, 0x3e	; 62
     b70:	80 e0       	ldi	r24, 0x00	; 0
     b72:	93 e0       	ldi	r25, 0x03	; 3
     b74:	9a 83       	std	Y+2, r25	; 0x02
     b76:	89 83       	std	Y+1, r24	; 0x01
     b78:	21 e0       	ldi	r18, 0x01	; 1
     b7a:	30 e0       	ldi	r19, 0x00	; 0
     b7c:	ae 01       	movw	r20, r28
     b7e:	4f 5f       	subi	r20, 0xFF	; 255
     b80:	5f 4f       	sbci	r21, 0xFF	; 255
     b82:	60 e1       	ldi	r22, 0x10	; 16
     b84:	70 e0       	ldi	r23, 0x00	; 0
     b86:	89 e6       	ldi	r24, 0x69	; 105
     b88:	0e 94 fd 04 	call	0x9fa	; 0x9fa <sensirion_i2c_write_cmd_with_args>
     b8c:	8c 01       	movw	r16, r24
     b8e:	60 e2       	ldi	r22, 0x20	; 32
     b90:	7e e4       	ldi	r23, 0x4E	; 78
     b92:	80 e0       	ldi	r24, 0x00	; 0
     b94:	90 e0       	ldi	r25, 0x00	; 0
     b96:	0e 94 9b 06 	call	0xd36	; 0xd36 <sensirion_sleep_usec>
     b9a:	c8 01       	movw	r24, r16
     b9c:	0f 90       	pop	r0
     b9e:	0f 90       	pop	r0
     ba0:	df 91       	pop	r29
     ba2:	cf 91       	pop	r28
     ba4:	1f 91       	pop	r17
     ba6:	0f 91       	pop	r16
     ba8:	08 95       	ret

00000baa <sps30_read_measurement>:
     baa:	ef 92       	push	r14
     bac:	ff 92       	push	r15
     bae:	0f 93       	push	r16
     bb0:	1f 93       	push	r17
     bb2:	cf 93       	push	r28
     bb4:	df 93       	push	r29
     bb6:	cd b7       	in	r28, 0x3d	; 61
     bb8:	de b7       	in	r29, 0x3e	; 62
     bba:	a8 97       	sbiw	r28, 0x28	; 40
     bbc:	0f b6       	in	r0, 0x3f	; 63
     bbe:	f8 94       	cli
     bc0:	de bf       	out	0x3e, r29	; 62
     bc2:	0f be       	out	0x3f, r0	; 63
     bc4:	cd bf       	out	0x3d, r28	; 61
     bc6:	8c 01       	movw	r16, r24
     bc8:	60 e0       	ldi	r22, 0x00	; 0
     bca:	73 e0       	ldi	r23, 0x03	; 3
     bcc:	89 e6       	ldi	r24, 0x69	; 105
     bce:	0e 94 de 04 	call	0x9bc	; 0x9bc <sensirion_i2c_write_cmd>
     bd2:	00 97       	sbiw	r24, 0x00	; 0
     bd4:	09 f0       	breq	.+2      	; 0xbd8 <sps30_read_measurement+0x2e>
     bd6:	6a c0       	rjmp	.+212    	; 0xcac <sps30_read_measurement+0x102>
     bd8:	44 e1       	ldi	r20, 0x14	; 20
     bda:	50 e0       	ldi	r21, 0x00	; 0
     bdc:	be 01       	movw	r22, r28
     bde:	6f 5f       	subi	r22, 0xFF	; 255
     be0:	7f 4f       	sbci	r23, 0xFF	; 255
     be2:	89 e6       	ldi	r24, 0x69	; 105
     be4:	0e 94 22 04 	call	0x844	; 0x844 <sensirion_i2c_read_words_as_bytes>
     be8:	7c 01       	movw	r14, r24
     bea:	00 97       	sbiw	r24, 0x00	; 0
     bec:	09 f0       	breq	.+2      	; 0xbf0 <sps30_read_measurement+0x46>
     bee:	5d c0       	rjmp	.+186    	; 0xcaa <sps30_read_measurement+0x100>
     bf0:	ce 01       	movw	r24, r28
     bf2:	01 96       	adiw	r24, 0x01	; 1
     bf4:	0e 94 c6 03 	call	0x78c	; 0x78c <sensirion_bytes_to_float>
     bf8:	f8 01       	movw	r30, r16
     bfa:	60 83       	st	Z, r22
     bfc:	71 83       	std	Z+1, r23	; 0x01
     bfe:	82 83       	std	Z+2, r24	; 0x02
     c00:	93 83       	std	Z+3, r25	; 0x03
     c02:	ce 01       	movw	r24, r28
     c04:	05 96       	adiw	r24, 0x05	; 5
     c06:	0e 94 c6 03 	call	0x78c	; 0x78c <sensirion_bytes_to_float>
     c0a:	f8 01       	movw	r30, r16
     c0c:	64 83       	std	Z+4, r22	; 0x04
     c0e:	75 83       	std	Z+5, r23	; 0x05
     c10:	86 83       	std	Z+6, r24	; 0x06
     c12:	97 83       	std	Z+7, r25	; 0x07
     c14:	ce 01       	movw	r24, r28
     c16:	09 96       	adiw	r24, 0x09	; 9
     c18:	0e 94 c6 03 	call	0x78c	; 0x78c <sensirion_bytes_to_float>
     c1c:	f8 01       	movw	r30, r16
     c1e:	60 87       	std	Z+8, r22	; 0x08
     c20:	71 87       	std	Z+9, r23	; 0x09
     c22:	82 87       	std	Z+10, r24	; 0x0a
     c24:	93 87       	std	Z+11, r25	; 0x0b
     c26:	ce 01       	movw	r24, r28
     c28:	0d 96       	adiw	r24, 0x0d	; 13
     c2a:	0e 94 c6 03 	call	0x78c	; 0x78c <sensirion_bytes_to_float>
     c2e:	f8 01       	movw	r30, r16
     c30:	64 87       	std	Z+12, r22	; 0x0c
     c32:	75 87       	std	Z+13, r23	; 0x0d
     c34:	86 87       	std	Z+14, r24	; 0x0e
     c36:	97 87       	std	Z+15, r25	; 0x0f
     c38:	ce 01       	movw	r24, r28
     c3a:	41 96       	adiw	r24, 0x11	; 17
     c3c:	0e 94 c6 03 	call	0x78c	; 0x78c <sensirion_bytes_to_float>
     c40:	f8 01       	movw	r30, r16
     c42:	60 8b       	std	Z+16, r22	; 0x10
     c44:	71 8b       	std	Z+17, r23	; 0x11
     c46:	82 8b       	std	Z+18, r24	; 0x12
     c48:	93 8b       	std	Z+19, r25	; 0x13
     c4a:	ce 01       	movw	r24, r28
     c4c:	45 96       	adiw	r24, 0x15	; 21
     c4e:	0e 94 c6 03 	call	0x78c	; 0x78c <sensirion_bytes_to_float>
     c52:	f8 01       	movw	r30, r16
     c54:	64 8b       	std	Z+20, r22	; 0x14
     c56:	75 8b       	std	Z+21, r23	; 0x15
     c58:	86 8b       	std	Z+22, r24	; 0x16
     c5a:	97 8b       	std	Z+23, r25	; 0x17
     c5c:	ce 01       	movw	r24, r28
     c5e:	49 96       	adiw	r24, 0x19	; 25
     c60:	0e 94 c6 03 	call	0x78c	; 0x78c <sensirion_bytes_to_float>
     c64:	f8 01       	movw	r30, r16
     c66:	60 8f       	std	Z+24, r22	; 0x18
     c68:	71 8f       	std	Z+25, r23	; 0x19
     c6a:	82 8f       	std	Z+26, r24	; 0x1a
     c6c:	93 8f       	std	Z+27, r25	; 0x1b
     c6e:	ce 01       	movw	r24, r28
     c70:	4d 96       	adiw	r24, 0x1d	; 29
     c72:	0e 94 c6 03 	call	0x78c	; 0x78c <sensirion_bytes_to_float>
     c76:	f8 01       	movw	r30, r16
     c78:	64 8f       	std	Z+28, r22	; 0x1c
     c7a:	75 8f       	std	Z+29, r23	; 0x1d
     c7c:	86 8f       	std	Z+30, r24	; 0x1e
     c7e:	97 8f       	std	Z+31, r25	; 0x1f
     c80:	ce 01       	movw	r24, r28
     c82:	81 96       	adiw	r24, 0x21	; 33
     c84:	0e 94 c6 03 	call	0x78c	; 0x78c <sensirion_bytes_to_float>
     c88:	f8 01       	movw	r30, r16
     c8a:	60 a3       	std	Z+32, r22	; 0x20
     c8c:	71 a3       	std	Z+33, r23	; 0x21
     c8e:	82 a3       	std	Z+34, r24	; 0x22
     c90:	93 a3       	std	Z+35, r25	; 0x23
     c92:	ce 01       	movw	r24, r28
     c94:	85 96       	adiw	r24, 0x25	; 37
     c96:	0e 94 c6 03 	call	0x78c	; 0x78c <sensirion_bytes_to_float>
     c9a:	f8 01       	movw	r30, r16
     c9c:	64 a3       	std	Z+36, r22	; 0x24
     c9e:	75 a3       	std	Z+37, r23	; 0x25
     ca0:	86 a3       	std	Z+38, r24	; 0x26
     ca2:	97 a3       	std	Z+39, r25	; 0x27
     ca4:	8e 2d       	mov	r24, r14
     ca6:	9f 2d       	mov	r25, r15
     ca8:	01 c0       	rjmp	.+2      	; 0xcac <sps30_read_measurement+0x102>
     caa:	9f 2d       	mov	r25, r15
     cac:	a8 96       	adiw	r28, 0x28	; 40
     cae:	0f b6       	in	r0, 0x3f	; 63
     cb0:	f8 94       	cli
     cb2:	de bf       	out	0x3e, r29	; 62
     cb4:	0f be       	out	0x3f, r0	; 63
     cb6:	cd bf       	out	0x3d, r28	; 61
     cb8:	df 91       	pop	r29
     cba:	cf 91       	pop	r28
     cbc:	1f 91       	pop	r17
     cbe:	0f 91       	pop	r16
     cc0:	ff 90       	pop	r15
     cc2:	ef 90       	pop	r14
     cc4:	08 95       	ret

00000cc6 <sps30_wake_up>:
     cc6:	cf 93       	push	r28
     cc8:	df 93       	push	r29
     cca:	63 e0       	ldi	r22, 0x03	; 3
     ccc:	71 e1       	ldi	r23, 0x11	; 17
     cce:	89 e6       	ldi	r24, 0x69	; 105
     cd0:	0e 94 de 04 	call	0x9bc	; 0x9bc <sensirion_i2c_write_cmd>
     cd4:	63 e0       	ldi	r22, 0x03	; 3
     cd6:	71 e1       	ldi	r23, 0x11	; 17
     cd8:	89 e6       	ldi	r24, 0x69	; 105
     cda:	0e 94 de 04 	call	0x9bc	; 0x9bc <sensirion_i2c_write_cmd>
     cde:	ec 01       	movw	r28, r24
     ce0:	89 2b       	or	r24, r25
     ce2:	31 f4       	brne	.+12     	; 0xcf0 <sps30_wake_up+0x2a>
     ce4:	68 e8       	ldi	r22, 0x88	; 136
     ce6:	73 e1       	ldi	r23, 0x13	; 19
     ce8:	80 e0       	ldi	r24, 0x00	; 0
     cea:	90 e0       	ldi	r25, 0x00	; 0
     cec:	0e 94 9b 06 	call	0xd36	; 0xd36 <sensirion_sleep_usec>
     cf0:	ce 01       	movw	r24, r28
     cf2:	df 91       	pop	r29
     cf4:	cf 91       	pop	r28
     cf6:	08 95       	ret

00000cf8 <sps30_probe>:
     cf8:	cf 93       	push	r28
     cfa:	df 93       	push	r29
     cfc:	cd b7       	in	r28, 0x3d	; 61
     cfe:	de b7       	in	r29, 0x3e	; 62
     d00:	a0 97       	sbiw	r28, 0x20	; 32
     d02:	0f b6       	in	r0, 0x3f	; 63
     d04:	f8 94       	cli
     d06:	de bf       	out	0x3e, r29	; 62
     d08:	0f be       	out	0x3f, r0	; 63
     d0a:	cd bf       	out	0x3d, r28	; 61
     d0c:	0e 94 63 06 	call	0xcc6	; 0xcc6 <sps30_wake_up>
     d10:	ce 01       	movw	r24, r28
     d12:	01 96       	adiw	r24, 0x01	; 1
     d14:	0e 94 9a 05 	call	0xb34	; 0xb34 <sps30_get_serial>
     d18:	a0 96       	adiw	r28, 0x20	; 32
     d1a:	0f b6       	in	r0, 0x3f	; 63
     d1c:	f8 94       	cli
     d1e:	de bf       	out	0x3e, r29	; 62
     d20:	0f be       	out	0x3f, r0	; 63
     d22:	cd bf       	out	0x3d, r28	; 61
     d24:	df 91       	pop	r29
     d26:	cf 91       	pop	r28
     d28:	08 95       	ret

00000d2a <sensirion_i2c_init>:
     d2a:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
     d2e:	89 e4       	ldi	r24, 0x49	; 73
     d30:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__DATA_REGION_ORIGIN__+0x58>
     d34:	08 95       	ret

00000d36 <sensirion_sleep_usec>:
     d36:	4f 92       	push	r4
     d38:	5f 92       	push	r5
     d3a:	6f 92       	push	r6
     d3c:	7f 92       	push	r7
     d3e:	8f 92       	push	r8
     d40:	9f 92       	push	r9
     d42:	af 92       	push	r10
     d44:	bf 92       	push	r11
     d46:	cf 92       	push	r12
     d48:	df 92       	push	r13
     d4a:	ef 92       	push	r14
     d4c:	ff 92       	push	r15
     d4e:	cf 93       	push	r28
     d50:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <__floatunsisf>
     d54:	6b 01       	movw	r12, r22
     d56:	7c 01       	movw	r14, r24
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
     d58:	2b ea       	ldi	r18, 0xAB	; 171
     d5a:	3a ea       	ldi	r19, 0xAA	; 170
     d5c:	4a ea       	ldi	r20, 0xAA	; 170
     d5e:	50 e4       	ldi	r21, 0x40	; 64
     d60:	0e 94 a2 09 	call	0x1344	; 0x1344 <__mulsf3>
     d64:	4b 01       	movw	r8, r22
     d66:	5c 01       	movw	r10, r24
	__tmp2 = ((F_CPU) / 4e6) * __us;
	if (__tmp < 1.0)
     d68:	20 e0       	ldi	r18, 0x00	; 0
     d6a:	30 e0       	ldi	r19, 0x00	; 0
     d6c:	40 e8       	ldi	r20, 0x80	; 128
     d6e:	5f e3       	ldi	r21, 0x3F	; 63
     d70:	0e 94 45 08 	call	0x108a	; 0x108a <__cmpsf2>
     d74:	88 23       	and	r24, r24
     d76:	0c f4       	brge	.+2      	; 0xd7a <sensirion_sleep_usec+0x44>
     d78:	70 c0       	rjmp	.+224    	; 0xe5a <sensirion_sleep_usec+0x124>

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
	__tmp2 = ((F_CPU) / 4e6) * __us;
     d7a:	20 e0       	ldi	r18, 0x00	; 0
     d7c:	30 e0       	ldi	r19, 0x00	; 0
     d7e:	40 e8       	ldi	r20, 0x80	; 128
     d80:	50 e4       	ldi	r21, 0x40	; 64
     d82:	c7 01       	movw	r24, r14
     d84:	b6 01       	movw	r22, r12
     d86:	0e 94 a2 09 	call	0x1344	; 0x1344 <__mulsf3>
     d8a:	2b 01       	movw	r4, r22
     d8c:	3c 01       	movw	r6, r24
	if (__tmp < 1.0)
		__ticks = 1;
	else if (__tmp2 > 65535)
     d8e:	20 e0       	ldi	r18, 0x00	; 0
     d90:	3f ef       	ldi	r19, 0xFF	; 255
     d92:	4f e7       	ldi	r20, 0x7F	; 127
     d94:	57 e4       	ldi	r21, 0x47	; 71
     d96:	0e 94 9d 09 	call	0x133a	; 0x133a <__gesf2>
     d9a:	18 16       	cp	r1, r24
     d9c:	0c f0       	brlt	.+2      	; 0xda0 <sensirion_sleep_usec+0x6a>
     d9e:	45 c0       	rjmp	.+138    	; 0xe2a <sensirion_sleep_usec+0xf4>
	{
		_delay_ms(__us / 1000.0);
     da0:	20 e0       	ldi	r18, 0x00	; 0
     da2:	30 e0       	ldi	r19, 0x00	; 0
     da4:	4a e7       	ldi	r20, 0x7A	; 122
     da6:	54 e4       	ldi	r21, 0x44	; 68
     da8:	c7 01       	movw	r24, r14
     daa:	b6 01       	movw	r22, r12
     dac:	0e 94 4a 08 	call	0x1094	; 0x1094 <__divsf3>
     db0:	4b 01       	movw	r8, r22
     db2:	5c 01       	movw	r10, r24

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     db4:	20 e0       	ldi	r18, 0x00	; 0
     db6:	30 e0       	ldi	r19, 0x00	; 0
     db8:	4a e7       	ldi	r20, 0x7A	; 122
     dba:	55 e4       	ldi	r21, 0x45	; 69
     dbc:	0e 94 a2 09 	call	0x1344	; 0x1344 <__mulsf3>
     dc0:	6b 01       	movw	r12, r22
     dc2:	7c 01       	movw	r14, r24
	if (__tmp < 1.0)
     dc4:	20 e0       	ldi	r18, 0x00	; 0
     dc6:	30 e0       	ldi	r19, 0x00	; 0
     dc8:	40 e8       	ldi	r20, 0x80	; 128
     dca:	5f e3       	ldi	r21, 0x3F	; 63
     dcc:	0e 94 45 08 	call	0x108a	; 0x108a <__cmpsf2>
     dd0:	88 23       	and	r24, r24
     dd2:	2c f1       	brlt	.+74     	; 0xe1e <sensirion_sleep_usec+0xe8>
		__ticks = 1;
	else if (__tmp > 65535)
     dd4:	20 e0       	ldi	r18, 0x00	; 0
     dd6:	3f ef       	ldi	r19, 0xFF	; 255
     dd8:	4f e7       	ldi	r20, 0x7F	; 127
     dda:	57 e4       	ldi	r21, 0x47	; 71
     ddc:	c7 01       	movw	r24, r14
     dde:	b6 01       	movw	r22, r12
     de0:	0e 94 9d 09 	call	0x133a	; 0x133a <__gesf2>
     de4:	18 16       	cp	r1, r24
     de6:	b4 f4       	brge	.+44     	; 0xe14 <sensirion_sleep_usec+0xde>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     de8:	20 e0       	ldi	r18, 0x00	; 0
     dea:	30 e0       	ldi	r19, 0x00	; 0
     dec:	40 e2       	ldi	r20, 0x20	; 32
     dee:	51 e4       	ldi	r21, 0x41	; 65
     df0:	c5 01       	movw	r24, r10
     df2:	b4 01       	movw	r22, r8
     df4:	0e 94 a2 09 	call	0x1344	; 0x1344 <__mulsf3>
     df8:	0e 94 bc 08 	call	0x1178	; 0x1178 <__fixunssfsi>
		while(__ticks)
     dfc:	61 15       	cp	r22, r1
     dfe:	71 05       	cpc	r23, r1
     e00:	69 f1       	breq	.+90     	; 0xe5c <sensirion_sleep_usec+0x126>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     e02:	20 e9       	ldi	r18, 0x90	; 144
     e04:	31 e0       	ldi	r19, 0x01	; 1
     e06:	c9 01       	movw	r24, r18
     e08:	01 97       	sbiw	r24, 0x01	; 1
     e0a:	f1 f7       	brne	.-4      	; 0xe08 <sensirion_sleep_usec+0xd2>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e0c:	61 50       	subi	r22, 0x01	; 1
     e0e:	71 09       	sbc	r23, r1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e10:	d1 f7       	brne	.-12     	; 0xe06 <sensirion_sleep_usec+0xd0>
     e12:	24 c0       	rjmp	.+72     	; 0xe5c <sensirion_sleep_usec+0x126>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e14:	c7 01       	movw	r24, r14
     e16:	b6 01       	movw	r22, r12
     e18:	0e 94 bc 08 	call	0x1178	; 0x1178 <__fixunssfsi>
     e1c:	02 c0       	rjmp	.+4      	; 0xe22 <sensirion_sleep_usec+0xec>

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
     e1e:	61 e0       	ldi	r22, 0x01	; 1
     e20:	70 e0       	ldi	r23, 0x00	; 0
     e22:	cb 01       	movw	r24, r22
     e24:	01 97       	sbiw	r24, 0x01	; 1
     e26:	f1 f7       	brne	.-4      	; 0xe24 <sensirion_sleep_usec+0xee>
     e28:	19 c0       	rjmp	.+50     	; 0xe5c <sensirion_sleep_usec+0x126>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
     e2a:	20 e0       	ldi	r18, 0x00	; 0
     e2c:	30 e0       	ldi	r19, 0x00	; 0
     e2e:	4f e7       	ldi	r20, 0x7F	; 127
     e30:	53 e4       	ldi	r21, 0x43	; 67
     e32:	c5 01       	movw	r24, r10
     e34:	b4 01       	movw	r22, r8
     e36:	0e 94 9d 09 	call	0x133a	; 0x133a <__gesf2>
     e3a:	18 16       	cp	r1, r24
     e3c:	44 f4       	brge	.+16     	; 0xe4e <sensirion_sleep_usec+0x118>
     e3e:	c3 01       	movw	r24, r6
     e40:	b2 01       	movw	r22, r4
     e42:	0e 94 bc 08 	call	0x1178	; 0x1178 <__fixunssfsi>
     e46:	cb 01       	movw	r24, r22
     e48:	01 97       	sbiw	r24, 0x01	; 1
     e4a:	f1 f7       	brne	.-4      	; 0xe48 <sensirion_sleep_usec+0x112>
     e4c:	0a c0       	rjmp	.+20     	; 0xe62 <sensirion_sleep_usec+0x12c>
		uint16_t __ticks=(uint16_t)__tmp2;
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     e4e:	c5 01       	movw	r24, r10
     e50:	b4 01       	movw	r22, r8
     e52:	0e 94 bc 08 	call	0x1178	; 0x1178 <__fixunssfsi>
     e56:	c6 2f       	mov	r28, r22
     e58:	01 c0       	rjmp	.+2      	; 0xe5c <sensirion_sleep_usec+0x126>
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
	__tmp2 = ((F_CPU) / 4e6) * __us;
	if (__tmp < 1.0)
		__ticks = 1;
     e5a:	c1 e0       	ldi	r28, 0x01	; 1
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     e5c:	6c 2f       	mov	r22, r28
     e5e:	6a 95       	dec	r22
     e60:	f1 f7       	brne	.-4      	; 0xe5e <sensirion_sleep_usec+0x128>
     e62:	cf 91       	pop	r28
     e64:	ff 90       	pop	r15
     e66:	ef 90       	pop	r14
     e68:	df 90       	pop	r13
     e6a:	cf 90       	pop	r12
     e6c:	bf 90       	pop	r11
     e6e:	af 90       	pop	r10
     e70:	9f 90       	pop	r9
     e72:	8f 90       	pop	r8
     e74:	7f 90       	pop	r7
     e76:	6f 90       	pop	r6
     e78:	5f 90       	pop	r5
     e7a:	4f 90       	pop	r4
     e7c:	08 95       	ret

00000e7e <i2c_io>:
     e7e:	bf 92       	push	r11
     e80:	cf 92       	push	r12
     e82:	df 92       	push	r13
     e84:	ef 92       	push	r14
     e86:	ff 92       	push	r15
     e88:	0f 93       	push	r16
     e8a:	1f 93       	push	r17
     e8c:	cf 93       	push	r28
     e8e:	df 93       	push	r29
     e90:	41 15       	cp	r20, r1
     e92:	51 05       	cpc	r21, r1
     e94:	09 f4       	brne	.+2      	; 0xe98 <i2c_io+0x1a>
     e96:	b1 c0       	rjmp	.+354    	; 0xffa <i2c_io+0x17c>
     e98:	94 ea       	ldi	r25, 0xA4	; 164
     e9a:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
     e9e:	ec eb       	ldi	r30, 0xBC	; 188
     ea0:	f0 e0       	ldi	r31, 0x00	; 0
     ea2:	90 81       	ld	r25, Z
     ea4:	99 23       	and	r25, r25
     ea6:	ec f7       	brge	.-6      	; 0xea2 <i2c_io+0x24>
     ea8:	68 01       	movw	r12, r16
     eaa:	98 2f       	mov	r25, r24
     eac:	c0 91 b9 00 	lds	r28, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
     eb0:	c8 7f       	andi	r28, 0xF8	; 248
     eb2:	c8 30       	cpi	r28, 0x08	; 8
     eb4:	31 f0       	breq	.+12     	; 0xec2 <i2c_io+0x44>
     eb6:	85 e4       	ldi	r24, 0x45	; 69
     eb8:	93 e0       	ldi	r25, 0x03	; 3
     eba:	0e 94 0a 0f 	call	0x1e14	; 0x1e14 <puts>
     ebe:	8c 2f       	mov	r24, r28
     ec0:	b4 c0       	rjmp	.+360    	; 0x102a <i2c_io+0x1ac>
     ec2:	99 0f       	add	r25, r25
     ec4:	90 93 bb 00 	sts	0x00BB, r25	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
     ec8:	94 e8       	ldi	r25, 0x84	; 132
     eca:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
     ece:	ec eb       	ldi	r30, 0xBC	; 188
     ed0:	f0 e0       	ldi	r31, 0x00	; 0
     ed2:	90 81       	ld	r25, Z
     ed4:	99 23       	and	r25, r25
     ed6:	ec f7       	brge	.-6      	; 0xed2 <i2c_io+0x54>
     ed8:	c0 91 b9 00 	lds	r28, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
     edc:	c8 7f       	andi	r28, 0xF8	; 248
     ede:	c8 31       	cpi	r28, 0x18	; 24
     ee0:	09 f4       	brne	.+2      	; 0xee4 <i2c_io+0x66>
     ee2:	96 c0       	rjmp	.+300    	; 0x1010 <i2c_io+0x192>
     ee4:	c0 32       	cpi	r28, 0x20	; 32
     ee6:	09 f0       	breq	.+2      	; 0xeea <i2c_io+0x6c>
     ee8:	80 c0       	rjmp	.+256    	; 0xfea <i2c_io+0x16c>
     eea:	84 e5       	ldi	r24, 0x54	; 84
     eec:	93 e0       	ldi	r25, 0x03	; 3
     eee:	0e 94 0a 0f 	call	0x1e14	; 0x1e14 <puts>
     ef2:	76 c0       	rjmp	.+236    	; 0xfe0 <i2c_io+0x162>
     ef4:	e7 01       	movw	r28, r14
     ef6:	99 91       	ld	r25, Y+
     ef8:	7e 01       	movw	r14, r28
     efa:	eb 01       	movw	r28, r22
     efc:	98 83       	st	Y, r25
     efe:	b0 82       	st	Z, r11
     f00:	90 81       	ld	r25, Z
     f02:	99 23       	and	r25, r25
     f04:	ec f7       	brge	.-6      	; 0xf00 <i2c_io+0x82>
     f06:	cc 91       	ld	r28, X
     f08:	c8 7f       	andi	r28, 0xF8	; 248
     f0a:	c8 32       	cpi	r28, 0x28	; 40
     f0c:	29 f0       	breq	.+10     	; 0xf18 <i2c_io+0x9a>
     f0e:	c0 33       	cpi	r28, 0x30	; 48
     f10:	09 f4       	brne	.+2      	; 0xf14 <i2c_io+0x96>
     f12:	66 c0       	rjmp	.+204    	; 0xfe0 <i2c_io+0x162>
     f14:	8c 2f       	mov	r24, r28
     f16:	89 c0       	rjmp	.+274    	; 0x102a <i2c_io+0x1ac>
     f18:	41 50       	subi	r20, 0x01	; 1
     f1a:	51 09       	sbc	r21, r1
     f1c:	59 f7       	brne	.-42     	; 0xef4 <i2c_io+0x76>
     f1e:	73 c0       	rjmp	.+230    	; 0x1006 <i2c_io+0x188>
     f20:	48 e0       	ldi	r20, 0x08	; 8
     f22:	01 c0       	rjmp	.+2      	; 0xf26 <i2c_io+0xa8>
     f24:	40 e1       	ldi	r20, 0x10	; 16
     f26:	94 ea       	ldi	r25, 0xA4	; 164
     f28:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
     f2c:	ec eb       	ldi	r30, 0xBC	; 188
     f2e:	f0 e0       	ldi	r31, 0x00	; 0
     f30:	90 81       	ld	r25, Z
     f32:	99 23       	and	r25, r25
     f34:	ec f7       	brge	.-6      	; 0xf30 <i2c_io+0xb2>
     f36:	c0 91 b9 00 	lds	r28, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
     f3a:	c8 7f       	andi	r28, 0xF8	; 248
     f3c:	4c 13       	cpse	r20, r28
     f3e:	57 c0       	rjmp	.+174    	; 0xfee <i2c_io+0x170>
     f40:	88 0f       	add	r24, r24
     f42:	81 60       	ori	r24, 0x01	; 1
     f44:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
     f48:	84 e8       	ldi	r24, 0x84	; 132
     f4a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
     f4e:	ec eb       	ldi	r30, 0xBC	; 188
     f50:	f0 e0       	ldi	r31, 0x00	; 0
     f52:	80 81       	ld	r24, Z
     f54:	88 23       	and	r24, r24
     f56:	ec f7       	brge	.-6      	; 0xf52 <i2c_io+0xd4>
     f58:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
     f5c:	c8 2f       	mov	r28, r24
     f5e:	c8 7f       	andi	r28, 0xF8	; 248
     f60:	c0 34       	cpi	r28, 0x40	; 64
     f62:	21 f0       	breq	.+8      	; 0xf6c <i2c_io+0xee>
     f64:	c8 34       	cpi	r28, 0x48	; 72
     f66:	e1 f1       	breq	.+120    	; 0xfe0 <i2c_io+0x162>
     f68:	8c 2f       	mov	r24, r28
     f6a:	5f c0       	rjmp	.+190    	; 0x102a <i2c_io+0x1ac>
     f6c:	01 30       	cpi	r16, 0x01	; 1
     f6e:	11 05       	cpc	r17, r1
     f70:	21 f1       	breq	.+72     	; 0xfba <i2c_io+0x13c>
     f72:	d9 01       	movw	r26, r18
     f74:	ec eb       	ldi	r30, 0xBC	; 188
     f76:	f0 e0       	ldi	r31, 0x00	; 0
     f78:	0f 2e       	mov	r0, r31
     f7a:	f4 ec       	ldi	r31, 0xC4	; 196
     f7c:	ff 2e       	mov	r15, r31
     f7e:	f0 2d       	mov	r31, r0
     f80:	49 eb       	ldi	r20, 0xB9	; 185
     f82:	50 e0       	ldi	r21, 0x00	; 0
     f84:	6b eb       	ldi	r22, 0xBB	; 187
     f86:	70 e0       	ldi	r23, 0x00	; 0
     f88:	01 50       	subi	r16, 0x01	; 1
     f8a:	11 09       	sbc	r17, r1
     f8c:	f0 82       	st	Z, r15
     f8e:	80 81       	ld	r24, Z
     f90:	88 23       	and	r24, r24
     f92:	ec f7       	brge	.-6      	; 0xf8e <i2c_io+0x110>
     f94:	ea 01       	movw	r28, r20
     f96:	88 81       	ld	r24, Y
     f98:	c8 2f       	mov	r28, r24
     f9a:	c8 7f       	andi	r28, 0xF8	; 248
     f9c:	c0 35       	cpi	r28, 0x50	; 80
     f9e:	49 f5       	brne	.+82     	; 0xff2 <i2c_io+0x174>
     fa0:	11 96       	adiw	r26, 0x01	; 1
     fa2:	eb 01       	movw	r28, r22
     fa4:	88 81       	ld	r24, Y
     fa6:	ed 01       	movw	r28, r26
     fa8:	21 97       	sbiw	r28, 0x01	; 1
     faa:	88 83       	st	Y, r24
     fac:	cd 01       	movw	r24, r26
     fae:	80 1b       	sub	r24, r16
     fb0:	91 0b       	sbc	r25, r17
     fb2:	82 17       	cp	r24, r18
     fb4:	93 07       	cpc	r25, r19
     fb6:	51 f7       	brne	.-44     	; 0xf8c <i2c_io+0x10e>
     fb8:	01 c0       	rjmp	.+2      	; 0xfbc <i2c_io+0x13e>
     fba:	d9 01       	movw	r26, r18
     fbc:	84 e8       	ldi	r24, 0x84	; 132
     fbe:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
     fc2:	ec eb       	ldi	r30, 0xBC	; 188
     fc4:	f0 e0       	ldi	r31, 0x00	; 0
     fc6:	80 81       	ld	r24, Z
     fc8:	88 23       	and	r24, r24
     fca:	ec f7       	brge	.-6      	; 0xfc6 <i2c_io+0x148>
     fcc:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
     fd0:	c8 2f       	mov	r28, r24
     fd2:	c8 7f       	andi	r28, 0xF8	; 248
     fd4:	c8 35       	cpi	r28, 0x58	; 88
     fd6:	79 f4       	brne	.+30     	; 0xff6 <i2c_io+0x178>
     fd8:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
     fdc:	8c 93       	st	X, r24
     fde:	c0 e0       	ldi	r28, 0x00	; 0
     fe0:	84 e9       	ldi	r24, 0x94	; 148
     fe2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
     fe6:	8c 2f       	mov	r24, r28
     fe8:	20 c0       	rjmp	.+64     	; 0x102a <i2c_io+0x1ac>
     fea:	8c 2f       	mov	r24, r28
     fec:	1e c0       	rjmp	.+60     	; 0x102a <i2c_io+0x1ac>
     fee:	8c 2f       	mov	r24, r28
     ff0:	1c c0       	rjmp	.+56     	; 0x102a <i2c_io+0x1ac>
     ff2:	8c 2f       	mov	r24, r28
     ff4:	1a c0       	rjmp	.+52     	; 0x102a <i2c_io+0x1ac>
     ff6:	8c 2f       	mov	r24, r28
     ff8:	18 c0       	rjmp	.+48     	; 0x102a <i2c_io+0x1ac>
     ffa:	01 15       	cp	r16, r1
     ffc:	11 05       	cpc	r17, r1
     ffe:	09 f0       	breq	.+2      	; 0x1002 <i2c_io+0x184>
    1000:	8f cf       	rjmp	.-226    	; 0xf20 <i2c_io+0xa2>
    1002:	80 e0       	ldi	r24, 0x00	; 0
    1004:	12 c0       	rjmp	.+36     	; 0x102a <i2c_io+0x1ac>
    1006:	cd 28       	or	r12, r13
    1008:	09 f0       	breq	.+2      	; 0x100c <i2c_io+0x18e>
    100a:	8c cf       	rjmp	.-232    	; 0xf24 <i2c_io+0xa6>
    100c:	c0 e0       	ldi	r28, 0x00	; 0
    100e:	e8 cf       	rjmp	.-48     	; 0xfe0 <i2c_io+0x162>
    1010:	e6 2e       	mov	r14, r22
    1012:	f7 2e       	mov	r15, r23
    1014:	6b eb       	ldi	r22, 0xBB	; 187
    1016:	70 e0       	ldi	r23, 0x00	; 0
    1018:	ec eb       	ldi	r30, 0xBC	; 188
    101a:	f0 e0       	ldi	r31, 0x00	; 0
    101c:	0f 2e       	mov	r0, r31
    101e:	f4 e8       	ldi	r31, 0x84	; 132
    1020:	bf 2e       	mov	r11, r31
    1022:	f0 2d       	mov	r31, r0
    1024:	a9 eb       	ldi	r26, 0xB9	; 185
    1026:	b0 e0       	ldi	r27, 0x00	; 0
    1028:	65 cf       	rjmp	.-310    	; 0xef4 <i2c_io+0x76>
    102a:	df 91       	pop	r29
    102c:	cf 91       	pop	r28
    102e:	1f 91       	pop	r17
    1030:	0f 91       	pop	r16
    1032:	ff 90       	pop	r15
    1034:	ef 90       	pop	r14
    1036:	df 90       	pop	r13
    1038:	cf 90       	pop	r12
    103a:	bf 90       	pop	r11
    103c:	08 95       	ret

0000103e <sensirion_i2c_read>:
    103e:	0f 93       	push	r16
    1040:	1f 93       	push	r17
    1042:	9b 01       	movw	r18, r22
    1044:	8a 01       	movw	r16, r20
    1046:	40 e0       	ldi	r20, 0x00	; 0
    1048:	50 e0       	ldi	r21, 0x00	; 0
    104a:	60 e0       	ldi	r22, 0x00	; 0
    104c:	70 e0       	ldi	r23, 0x00	; 0
    104e:	89 e6       	ldi	r24, 0x69	; 105
    1050:	0e 94 3f 07 	call	0xe7e	; 0xe7e <i2c_io>
    1054:	91 e0       	ldi	r25, 0x01	; 1
    1056:	81 11       	cpse	r24, r1
    1058:	01 c0       	rjmp	.+2      	; 0x105c <sensirion_i2c_read+0x1e>
    105a:	90 e0       	ldi	r25, 0x00	; 0
    105c:	89 2f       	mov	r24, r25
    105e:	81 95       	neg	r24
    1060:	1f 91       	pop	r17
    1062:	0f 91       	pop	r16
    1064:	08 95       	ret

00001066 <sensirion_i2c_write>:
    1066:	0f 93       	push	r16
    1068:	1f 93       	push	r17
    106a:	00 e0       	ldi	r16, 0x00	; 0
    106c:	10 e0       	ldi	r17, 0x00	; 0
    106e:	20 e0       	ldi	r18, 0x00	; 0
    1070:	30 e0       	ldi	r19, 0x00	; 0
    1072:	89 e6       	ldi	r24, 0x69	; 105
    1074:	0e 94 3f 07 	call	0xe7e	; 0xe7e <i2c_io>
    1078:	91 e0       	ldi	r25, 0x01	; 1
    107a:	81 11       	cpse	r24, r1
    107c:	01 c0       	rjmp	.+2      	; 0x1080 <sensirion_i2c_write+0x1a>
    107e:	90 e0       	ldi	r25, 0x00	; 0
    1080:	89 2f       	mov	r24, r25
    1082:	81 95       	neg	r24
    1084:	1f 91       	pop	r17
    1086:	0f 91       	pop	r16
    1088:	08 95       	ret

0000108a <__cmpsf2>:
    108a:	0e 94 28 09 	call	0x1250	; 0x1250 <__fp_cmp>
    108e:	08 f4       	brcc	.+2      	; 0x1092 <__cmpsf2+0x8>
    1090:	81 e0       	ldi	r24, 0x01	; 1
    1092:	08 95       	ret

00001094 <__divsf3>:
    1094:	0e 94 5e 08 	call	0x10bc	; 0x10bc <__divsf3x>
    1098:	0c 94 63 09 	jmp	0x12c6	; 0x12c6 <__fp_round>
    109c:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <__fp_pscB>
    10a0:	58 f0       	brcs	.+22     	; 0x10b8 <__divsf3+0x24>
    10a2:	0e 94 55 09 	call	0x12aa	; 0x12aa <__fp_pscA>
    10a6:	40 f0       	brcs	.+16     	; 0x10b8 <__divsf3+0x24>
    10a8:	29 f4       	brne	.+10     	; 0x10b4 <__divsf3+0x20>
    10aa:	5f 3f       	cpi	r21, 0xFF	; 255
    10ac:	29 f0       	breq	.+10     	; 0x10b8 <__divsf3+0x24>
    10ae:	0c 94 4c 09 	jmp	0x1298	; 0x1298 <__fp_inf>
    10b2:	51 11       	cpse	r21, r1
    10b4:	0c 94 97 09 	jmp	0x132e	; 0x132e <__fp_szero>
    10b8:	0c 94 52 09 	jmp	0x12a4	; 0x12a4 <__fp_nan>

000010bc <__divsf3x>:
    10bc:	0e 94 74 09 	call	0x12e8	; 0x12e8 <__fp_split3>
    10c0:	68 f3       	brcs	.-38     	; 0x109c <__divsf3+0x8>

000010c2 <__divsf3_pse>:
    10c2:	99 23       	and	r25, r25
    10c4:	b1 f3       	breq	.-20     	; 0x10b2 <__divsf3+0x1e>
    10c6:	55 23       	and	r21, r21
    10c8:	91 f3       	breq	.-28     	; 0x10ae <__divsf3+0x1a>
    10ca:	95 1b       	sub	r25, r21
    10cc:	55 0b       	sbc	r21, r21
    10ce:	bb 27       	eor	r27, r27
    10d0:	aa 27       	eor	r26, r26
    10d2:	62 17       	cp	r22, r18
    10d4:	73 07       	cpc	r23, r19
    10d6:	84 07       	cpc	r24, r20
    10d8:	38 f0       	brcs	.+14     	; 0x10e8 <__divsf3_pse+0x26>
    10da:	9f 5f       	subi	r25, 0xFF	; 255
    10dc:	5f 4f       	sbci	r21, 0xFF	; 255
    10de:	22 0f       	add	r18, r18
    10e0:	33 1f       	adc	r19, r19
    10e2:	44 1f       	adc	r20, r20
    10e4:	aa 1f       	adc	r26, r26
    10e6:	a9 f3       	breq	.-22     	; 0x10d2 <__divsf3_pse+0x10>
    10e8:	35 d0       	rcall	.+106    	; 0x1154 <__divsf3_pse+0x92>
    10ea:	0e 2e       	mov	r0, r30
    10ec:	3a f0       	brmi	.+14     	; 0x10fc <__divsf3_pse+0x3a>
    10ee:	e0 e8       	ldi	r30, 0x80	; 128
    10f0:	32 d0       	rcall	.+100    	; 0x1156 <__divsf3_pse+0x94>
    10f2:	91 50       	subi	r25, 0x01	; 1
    10f4:	50 40       	sbci	r21, 0x00	; 0
    10f6:	e6 95       	lsr	r30
    10f8:	00 1c       	adc	r0, r0
    10fa:	ca f7       	brpl	.-14     	; 0x10ee <__divsf3_pse+0x2c>
    10fc:	2b d0       	rcall	.+86     	; 0x1154 <__divsf3_pse+0x92>
    10fe:	fe 2f       	mov	r31, r30
    1100:	29 d0       	rcall	.+82     	; 0x1154 <__divsf3_pse+0x92>
    1102:	66 0f       	add	r22, r22
    1104:	77 1f       	adc	r23, r23
    1106:	88 1f       	adc	r24, r24
    1108:	bb 1f       	adc	r27, r27
    110a:	26 17       	cp	r18, r22
    110c:	37 07       	cpc	r19, r23
    110e:	48 07       	cpc	r20, r24
    1110:	ab 07       	cpc	r26, r27
    1112:	b0 e8       	ldi	r27, 0x80	; 128
    1114:	09 f0       	breq	.+2      	; 0x1118 <__divsf3_pse+0x56>
    1116:	bb 0b       	sbc	r27, r27
    1118:	80 2d       	mov	r24, r0
    111a:	bf 01       	movw	r22, r30
    111c:	ff 27       	eor	r31, r31
    111e:	93 58       	subi	r25, 0x83	; 131
    1120:	5f 4f       	sbci	r21, 0xFF	; 255
    1122:	3a f0       	brmi	.+14     	; 0x1132 <__divsf3_pse+0x70>
    1124:	9e 3f       	cpi	r25, 0xFE	; 254
    1126:	51 05       	cpc	r21, r1
    1128:	78 f0       	brcs	.+30     	; 0x1148 <__divsf3_pse+0x86>
    112a:	0c 94 4c 09 	jmp	0x1298	; 0x1298 <__fp_inf>
    112e:	0c 94 97 09 	jmp	0x132e	; 0x132e <__fp_szero>
    1132:	5f 3f       	cpi	r21, 0xFF	; 255
    1134:	e4 f3       	brlt	.-8      	; 0x112e <__divsf3_pse+0x6c>
    1136:	98 3e       	cpi	r25, 0xE8	; 232
    1138:	d4 f3       	brlt	.-12     	; 0x112e <__divsf3_pse+0x6c>
    113a:	86 95       	lsr	r24
    113c:	77 95       	ror	r23
    113e:	67 95       	ror	r22
    1140:	b7 95       	ror	r27
    1142:	f7 95       	ror	r31
    1144:	9f 5f       	subi	r25, 0xFF	; 255
    1146:	c9 f7       	brne	.-14     	; 0x113a <__divsf3_pse+0x78>
    1148:	88 0f       	add	r24, r24
    114a:	91 1d       	adc	r25, r1
    114c:	96 95       	lsr	r25
    114e:	87 95       	ror	r24
    1150:	97 f9       	bld	r25, 7
    1152:	08 95       	ret
    1154:	e1 e0       	ldi	r30, 0x01	; 1
    1156:	66 0f       	add	r22, r22
    1158:	77 1f       	adc	r23, r23
    115a:	88 1f       	adc	r24, r24
    115c:	bb 1f       	adc	r27, r27
    115e:	62 17       	cp	r22, r18
    1160:	73 07       	cpc	r23, r19
    1162:	84 07       	cpc	r24, r20
    1164:	ba 07       	cpc	r27, r26
    1166:	20 f0       	brcs	.+8      	; 0x1170 <__divsf3_pse+0xae>
    1168:	62 1b       	sub	r22, r18
    116a:	73 0b       	sbc	r23, r19
    116c:	84 0b       	sbc	r24, r20
    116e:	ba 0b       	sbc	r27, r26
    1170:	ee 1f       	adc	r30, r30
    1172:	88 f7       	brcc	.-30     	; 0x1156 <__divsf3_pse+0x94>
    1174:	e0 95       	com	r30
    1176:	08 95       	ret

00001178 <__fixunssfsi>:
    1178:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <__fp_splitA>
    117c:	88 f0       	brcs	.+34     	; 0x11a0 <__fixunssfsi+0x28>
    117e:	9f 57       	subi	r25, 0x7F	; 127
    1180:	98 f0       	brcs	.+38     	; 0x11a8 <__fixunssfsi+0x30>
    1182:	b9 2f       	mov	r27, r25
    1184:	99 27       	eor	r25, r25
    1186:	b7 51       	subi	r27, 0x17	; 23
    1188:	b0 f0       	brcs	.+44     	; 0x11b6 <__fixunssfsi+0x3e>
    118a:	e1 f0       	breq	.+56     	; 0x11c4 <__fixunssfsi+0x4c>
    118c:	66 0f       	add	r22, r22
    118e:	77 1f       	adc	r23, r23
    1190:	88 1f       	adc	r24, r24
    1192:	99 1f       	adc	r25, r25
    1194:	1a f0       	brmi	.+6      	; 0x119c <__fixunssfsi+0x24>
    1196:	ba 95       	dec	r27
    1198:	c9 f7       	brne	.-14     	; 0x118c <__fixunssfsi+0x14>
    119a:	14 c0       	rjmp	.+40     	; 0x11c4 <__fixunssfsi+0x4c>
    119c:	b1 30       	cpi	r27, 0x01	; 1
    119e:	91 f0       	breq	.+36     	; 0x11c4 <__fixunssfsi+0x4c>
    11a0:	0e 94 96 09 	call	0x132c	; 0x132c <__fp_zero>
    11a4:	b1 e0       	ldi	r27, 0x01	; 1
    11a6:	08 95       	ret
    11a8:	0c 94 96 09 	jmp	0x132c	; 0x132c <__fp_zero>
    11ac:	67 2f       	mov	r22, r23
    11ae:	78 2f       	mov	r23, r24
    11b0:	88 27       	eor	r24, r24
    11b2:	b8 5f       	subi	r27, 0xF8	; 248
    11b4:	39 f0       	breq	.+14     	; 0x11c4 <__fixunssfsi+0x4c>
    11b6:	b9 3f       	cpi	r27, 0xF9	; 249
    11b8:	cc f3       	brlt	.-14     	; 0x11ac <__fixunssfsi+0x34>
    11ba:	86 95       	lsr	r24
    11bc:	77 95       	ror	r23
    11be:	67 95       	ror	r22
    11c0:	b3 95       	inc	r27
    11c2:	d9 f7       	brne	.-10     	; 0x11ba <__fixunssfsi+0x42>
    11c4:	3e f4       	brtc	.+14     	; 0x11d4 <__fixunssfsi+0x5c>
    11c6:	90 95       	com	r25
    11c8:	80 95       	com	r24
    11ca:	70 95       	com	r23
    11cc:	61 95       	neg	r22
    11ce:	7f 4f       	sbci	r23, 0xFF	; 255
    11d0:	8f 4f       	sbci	r24, 0xFF	; 255
    11d2:	9f 4f       	sbci	r25, 0xFF	; 255
    11d4:	08 95       	ret

000011d6 <__floatunsisf>:
    11d6:	e8 94       	clt
    11d8:	09 c0       	rjmp	.+18     	; 0x11ec <__floatsisf+0x12>

000011da <__floatsisf>:
    11da:	97 fb       	bst	r25, 7
    11dc:	3e f4       	brtc	.+14     	; 0x11ec <__floatsisf+0x12>
    11de:	90 95       	com	r25
    11e0:	80 95       	com	r24
    11e2:	70 95       	com	r23
    11e4:	61 95       	neg	r22
    11e6:	7f 4f       	sbci	r23, 0xFF	; 255
    11e8:	8f 4f       	sbci	r24, 0xFF	; 255
    11ea:	9f 4f       	sbci	r25, 0xFF	; 255
    11ec:	99 23       	and	r25, r25
    11ee:	a9 f0       	breq	.+42     	; 0x121a <__floatsisf+0x40>
    11f0:	f9 2f       	mov	r31, r25
    11f2:	96 e9       	ldi	r25, 0x96	; 150
    11f4:	bb 27       	eor	r27, r27
    11f6:	93 95       	inc	r25
    11f8:	f6 95       	lsr	r31
    11fa:	87 95       	ror	r24
    11fc:	77 95       	ror	r23
    11fe:	67 95       	ror	r22
    1200:	b7 95       	ror	r27
    1202:	f1 11       	cpse	r31, r1
    1204:	f8 cf       	rjmp	.-16     	; 0x11f6 <__floatsisf+0x1c>
    1206:	fa f4       	brpl	.+62     	; 0x1246 <__floatsisf+0x6c>
    1208:	bb 0f       	add	r27, r27
    120a:	11 f4       	brne	.+4      	; 0x1210 <__floatsisf+0x36>
    120c:	60 ff       	sbrs	r22, 0
    120e:	1b c0       	rjmp	.+54     	; 0x1246 <__floatsisf+0x6c>
    1210:	6f 5f       	subi	r22, 0xFF	; 255
    1212:	7f 4f       	sbci	r23, 0xFF	; 255
    1214:	8f 4f       	sbci	r24, 0xFF	; 255
    1216:	9f 4f       	sbci	r25, 0xFF	; 255
    1218:	16 c0       	rjmp	.+44     	; 0x1246 <__floatsisf+0x6c>
    121a:	88 23       	and	r24, r24
    121c:	11 f0       	breq	.+4      	; 0x1222 <__floatsisf+0x48>
    121e:	96 e9       	ldi	r25, 0x96	; 150
    1220:	11 c0       	rjmp	.+34     	; 0x1244 <__floatsisf+0x6a>
    1222:	77 23       	and	r23, r23
    1224:	21 f0       	breq	.+8      	; 0x122e <__floatsisf+0x54>
    1226:	9e e8       	ldi	r25, 0x8E	; 142
    1228:	87 2f       	mov	r24, r23
    122a:	76 2f       	mov	r23, r22
    122c:	05 c0       	rjmp	.+10     	; 0x1238 <__floatsisf+0x5e>
    122e:	66 23       	and	r22, r22
    1230:	71 f0       	breq	.+28     	; 0x124e <__floatsisf+0x74>
    1232:	96 e8       	ldi	r25, 0x86	; 134
    1234:	86 2f       	mov	r24, r22
    1236:	70 e0       	ldi	r23, 0x00	; 0
    1238:	60 e0       	ldi	r22, 0x00	; 0
    123a:	2a f0       	brmi	.+10     	; 0x1246 <__floatsisf+0x6c>
    123c:	9a 95       	dec	r25
    123e:	66 0f       	add	r22, r22
    1240:	77 1f       	adc	r23, r23
    1242:	88 1f       	adc	r24, r24
    1244:	da f7       	brpl	.-10     	; 0x123c <__floatsisf+0x62>
    1246:	88 0f       	add	r24, r24
    1248:	96 95       	lsr	r25
    124a:	87 95       	ror	r24
    124c:	97 f9       	bld	r25, 7
    124e:	08 95       	ret

00001250 <__fp_cmp>:
    1250:	99 0f       	add	r25, r25
    1252:	00 08       	sbc	r0, r0
    1254:	55 0f       	add	r21, r21
    1256:	aa 0b       	sbc	r26, r26
    1258:	e0 e8       	ldi	r30, 0x80	; 128
    125a:	fe ef       	ldi	r31, 0xFE	; 254
    125c:	16 16       	cp	r1, r22
    125e:	17 06       	cpc	r1, r23
    1260:	e8 07       	cpc	r30, r24
    1262:	f9 07       	cpc	r31, r25
    1264:	c0 f0       	brcs	.+48     	; 0x1296 <__fp_cmp+0x46>
    1266:	12 16       	cp	r1, r18
    1268:	13 06       	cpc	r1, r19
    126a:	e4 07       	cpc	r30, r20
    126c:	f5 07       	cpc	r31, r21
    126e:	98 f0       	brcs	.+38     	; 0x1296 <__fp_cmp+0x46>
    1270:	62 1b       	sub	r22, r18
    1272:	73 0b       	sbc	r23, r19
    1274:	84 0b       	sbc	r24, r20
    1276:	95 0b       	sbc	r25, r21
    1278:	39 f4       	brne	.+14     	; 0x1288 <__fp_cmp+0x38>
    127a:	0a 26       	eor	r0, r26
    127c:	61 f0       	breq	.+24     	; 0x1296 <__fp_cmp+0x46>
    127e:	23 2b       	or	r18, r19
    1280:	24 2b       	or	r18, r20
    1282:	25 2b       	or	r18, r21
    1284:	21 f4       	brne	.+8      	; 0x128e <__fp_cmp+0x3e>
    1286:	08 95       	ret
    1288:	0a 26       	eor	r0, r26
    128a:	09 f4       	brne	.+2      	; 0x128e <__fp_cmp+0x3e>
    128c:	a1 40       	sbci	r26, 0x01	; 1
    128e:	a6 95       	lsr	r26
    1290:	8f ef       	ldi	r24, 0xFF	; 255
    1292:	81 1d       	adc	r24, r1
    1294:	81 1d       	adc	r24, r1
    1296:	08 95       	ret

00001298 <__fp_inf>:
    1298:	97 f9       	bld	r25, 7
    129a:	9f 67       	ori	r25, 0x7F	; 127
    129c:	80 e8       	ldi	r24, 0x80	; 128
    129e:	70 e0       	ldi	r23, 0x00	; 0
    12a0:	60 e0       	ldi	r22, 0x00	; 0
    12a2:	08 95       	ret

000012a4 <__fp_nan>:
    12a4:	9f ef       	ldi	r25, 0xFF	; 255
    12a6:	80 ec       	ldi	r24, 0xC0	; 192
    12a8:	08 95       	ret

000012aa <__fp_pscA>:
    12aa:	00 24       	eor	r0, r0
    12ac:	0a 94       	dec	r0
    12ae:	16 16       	cp	r1, r22
    12b0:	17 06       	cpc	r1, r23
    12b2:	18 06       	cpc	r1, r24
    12b4:	09 06       	cpc	r0, r25
    12b6:	08 95       	ret

000012b8 <__fp_pscB>:
    12b8:	00 24       	eor	r0, r0
    12ba:	0a 94       	dec	r0
    12bc:	12 16       	cp	r1, r18
    12be:	13 06       	cpc	r1, r19
    12c0:	14 06       	cpc	r1, r20
    12c2:	05 06       	cpc	r0, r21
    12c4:	08 95       	ret

000012c6 <__fp_round>:
    12c6:	09 2e       	mov	r0, r25
    12c8:	03 94       	inc	r0
    12ca:	00 0c       	add	r0, r0
    12cc:	11 f4       	brne	.+4      	; 0x12d2 <__fp_round+0xc>
    12ce:	88 23       	and	r24, r24
    12d0:	52 f0       	brmi	.+20     	; 0x12e6 <__fp_round+0x20>
    12d2:	bb 0f       	add	r27, r27
    12d4:	40 f4       	brcc	.+16     	; 0x12e6 <__fp_round+0x20>
    12d6:	bf 2b       	or	r27, r31
    12d8:	11 f4       	brne	.+4      	; 0x12de <__fp_round+0x18>
    12da:	60 ff       	sbrs	r22, 0
    12dc:	04 c0       	rjmp	.+8      	; 0x12e6 <__fp_round+0x20>
    12de:	6f 5f       	subi	r22, 0xFF	; 255
    12e0:	7f 4f       	sbci	r23, 0xFF	; 255
    12e2:	8f 4f       	sbci	r24, 0xFF	; 255
    12e4:	9f 4f       	sbci	r25, 0xFF	; 255
    12e6:	08 95       	ret

000012e8 <__fp_split3>:
    12e8:	57 fd       	sbrc	r21, 7
    12ea:	90 58       	subi	r25, 0x80	; 128
    12ec:	44 0f       	add	r20, r20
    12ee:	55 1f       	adc	r21, r21
    12f0:	59 f0       	breq	.+22     	; 0x1308 <__fp_splitA+0x10>
    12f2:	5f 3f       	cpi	r21, 0xFF	; 255
    12f4:	71 f0       	breq	.+28     	; 0x1312 <__fp_splitA+0x1a>
    12f6:	47 95       	ror	r20

000012f8 <__fp_splitA>:
    12f8:	88 0f       	add	r24, r24
    12fa:	97 fb       	bst	r25, 7
    12fc:	99 1f       	adc	r25, r25
    12fe:	61 f0       	breq	.+24     	; 0x1318 <__fp_splitA+0x20>
    1300:	9f 3f       	cpi	r25, 0xFF	; 255
    1302:	79 f0       	breq	.+30     	; 0x1322 <__fp_splitA+0x2a>
    1304:	87 95       	ror	r24
    1306:	08 95       	ret
    1308:	12 16       	cp	r1, r18
    130a:	13 06       	cpc	r1, r19
    130c:	14 06       	cpc	r1, r20
    130e:	55 1f       	adc	r21, r21
    1310:	f2 cf       	rjmp	.-28     	; 0x12f6 <__fp_split3+0xe>
    1312:	46 95       	lsr	r20
    1314:	f1 df       	rcall	.-30     	; 0x12f8 <__fp_splitA>
    1316:	08 c0       	rjmp	.+16     	; 0x1328 <__fp_splitA+0x30>
    1318:	16 16       	cp	r1, r22
    131a:	17 06       	cpc	r1, r23
    131c:	18 06       	cpc	r1, r24
    131e:	99 1f       	adc	r25, r25
    1320:	f1 cf       	rjmp	.-30     	; 0x1304 <__fp_splitA+0xc>
    1322:	86 95       	lsr	r24
    1324:	71 05       	cpc	r23, r1
    1326:	61 05       	cpc	r22, r1
    1328:	08 94       	sec
    132a:	08 95       	ret

0000132c <__fp_zero>:
    132c:	e8 94       	clt

0000132e <__fp_szero>:
    132e:	bb 27       	eor	r27, r27
    1330:	66 27       	eor	r22, r22
    1332:	77 27       	eor	r23, r23
    1334:	cb 01       	movw	r24, r22
    1336:	97 f9       	bld	r25, 7
    1338:	08 95       	ret

0000133a <__gesf2>:
    133a:	0e 94 28 09 	call	0x1250	; 0x1250 <__fp_cmp>
    133e:	08 f4       	brcc	.+2      	; 0x1342 <__gesf2+0x8>
    1340:	8f ef       	ldi	r24, 0xFF	; 255
    1342:	08 95       	ret

00001344 <__mulsf3>:
    1344:	0e 94 b5 09 	call	0x136a	; 0x136a <__mulsf3x>
    1348:	0c 94 63 09 	jmp	0x12c6	; 0x12c6 <__fp_round>
    134c:	0e 94 55 09 	call	0x12aa	; 0x12aa <__fp_pscA>
    1350:	38 f0       	brcs	.+14     	; 0x1360 <__mulsf3+0x1c>
    1352:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <__fp_pscB>
    1356:	20 f0       	brcs	.+8      	; 0x1360 <__mulsf3+0x1c>
    1358:	95 23       	and	r25, r21
    135a:	11 f0       	breq	.+4      	; 0x1360 <__mulsf3+0x1c>
    135c:	0c 94 4c 09 	jmp	0x1298	; 0x1298 <__fp_inf>
    1360:	0c 94 52 09 	jmp	0x12a4	; 0x12a4 <__fp_nan>
    1364:	11 24       	eor	r1, r1
    1366:	0c 94 97 09 	jmp	0x132e	; 0x132e <__fp_szero>

0000136a <__mulsf3x>:
    136a:	0e 94 74 09 	call	0x12e8	; 0x12e8 <__fp_split3>
    136e:	70 f3       	brcs	.-36     	; 0x134c <__mulsf3+0x8>

00001370 <__mulsf3_pse>:
    1370:	95 9f       	mul	r25, r21
    1372:	c1 f3       	breq	.-16     	; 0x1364 <__mulsf3+0x20>
    1374:	95 0f       	add	r25, r21
    1376:	50 e0       	ldi	r21, 0x00	; 0
    1378:	55 1f       	adc	r21, r21
    137a:	62 9f       	mul	r22, r18
    137c:	f0 01       	movw	r30, r0
    137e:	72 9f       	mul	r23, r18
    1380:	bb 27       	eor	r27, r27
    1382:	f0 0d       	add	r31, r0
    1384:	b1 1d       	adc	r27, r1
    1386:	63 9f       	mul	r22, r19
    1388:	aa 27       	eor	r26, r26
    138a:	f0 0d       	add	r31, r0
    138c:	b1 1d       	adc	r27, r1
    138e:	aa 1f       	adc	r26, r26
    1390:	64 9f       	mul	r22, r20
    1392:	66 27       	eor	r22, r22
    1394:	b0 0d       	add	r27, r0
    1396:	a1 1d       	adc	r26, r1
    1398:	66 1f       	adc	r22, r22
    139a:	82 9f       	mul	r24, r18
    139c:	22 27       	eor	r18, r18
    139e:	b0 0d       	add	r27, r0
    13a0:	a1 1d       	adc	r26, r1
    13a2:	62 1f       	adc	r22, r18
    13a4:	73 9f       	mul	r23, r19
    13a6:	b0 0d       	add	r27, r0
    13a8:	a1 1d       	adc	r26, r1
    13aa:	62 1f       	adc	r22, r18
    13ac:	83 9f       	mul	r24, r19
    13ae:	a0 0d       	add	r26, r0
    13b0:	61 1d       	adc	r22, r1
    13b2:	22 1f       	adc	r18, r18
    13b4:	74 9f       	mul	r23, r20
    13b6:	33 27       	eor	r19, r19
    13b8:	a0 0d       	add	r26, r0
    13ba:	61 1d       	adc	r22, r1
    13bc:	23 1f       	adc	r18, r19
    13be:	84 9f       	mul	r24, r20
    13c0:	60 0d       	add	r22, r0
    13c2:	21 1d       	adc	r18, r1
    13c4:	82 2f       	mov	r24, r18
    13c6:	76 2f       	mov	r23, r22
    13c8:	6a 2f       	mov	r22, r26
    13ca:	11 24       	eor	r1, r1
    13cc:	9f 57       	subi	r25, 0x7F	; 127
    13ce:	50 40       	sbci	r21, 0x00	; 0
    13d0:	9a f0       	brmi	.+38     	; 0x13f8 <__mulsf3_pse+0x88>
    13d2:	f1 f0       	breq	.+60     	; 0x1410 <__mulsf3_pse+0xa0>
    13d4:	88 23       	and	r24, r24
    13d6:	4a f0       	brmi	.+18     	; 0x13ea <__mulsf3_pse+0x7a>
    13d8:	ee 0f       	add	r30, r30
    13da:	ff 1f       	adc	r31, r31
    13dc:	bb 1f       	adc	r27, r27
    13de:	66 1f       	adc	r22, r22
    13e0:	77 1f       	adc	r23, r23
    13e2:	88 1f       	adc	r24, r24
    13e4:	91 50       	subi	r25, 0x01	; 1
    13e6:	50 40       	sbci	r21, 0x00	; 0
    13e8:	a9 f7       	brne	.-22     	; 0x13d4 <__mulsf3_pse+0x64>
    13ea:	9e 3f       	cpi	r25, 0xFE	; 254
    13ec:	51 05       	cpc	r21, r1
    13ee:	80 f0       	brcs	.+32     	; 0x1410 <__mulsf3_pse+0xa0>
    13f0:	0c 94 4c 09 	jmp	0x1298	; 0x1298 <__fp_inf>
    13f4:	0c 94 97 09 	jmp	0x132e	; 0x132e <__fp_szero>
    13f8:	5f 3f       	cpi	r21, 0xFF	; 255
    13fa:	e4 f3       	brlt	.-8      	; 0x13f4 <__mulsf3_pse+0x84>
    13fc:	98 3e       	cpi	r25, 0xE8	; 232
    13fe:	d4 f3       	brlt	.-12     	; 0x13f4 <__mulsf3_pse+0x84>
    1400:	86 95       	lsr	r24
    1402:	77 95       	ror	r23
    1404:	67 95       	ror	r22
    1406:	b7 95       	ror	r27
    1408:	f7 95       	ror	r31
    140a:	e7 95       	ror	r30
    140c:	9f 5f       	subi	r25, 0xFF	; 255
    140e:	c1 f7       	brne	.-16     	; 0x1400 <__mulsf3_pse+0x90>
    1410:	fe 2b       	or	r31, r30
    1412:	88 0f       	add	r24, r24
    1414:	91 1d       	adc	r25, r1
    1416:	96 95       	lsr	r25
    1418:	87 95       	ror	r24
    141a:	97 f9       	bld	r25, 7
    141c:	08 95       	ret

0000141e <vfprintf>:
    141e:	a0 e1       	ldi	r26, 0x10	; 16
    1420:	b0 e0       	ldi	r27, 0x00	; 0
    1422:	e5 e1       	ldi	r30, 0x15	; 21
    1424:	fa e0       	ldi	r31, 0x0A	; 10
    1426:	0c 94 8c 0d 	jmp	0x1b18	; 0x1b18 <__prologue_saves__>
    142a:	7c 01       	movw	r14, r24
    142c:	1b 01       	movw	r2, r22
    142e:	6a 01       	movw	r12, r20
    1430:	fc 01       	movw	r30, r24
    1432:	17 82       	std	Z+7, r1	; 0x07
    1434:	16 82       	std	Z+6, r1	; 0x06
    1436:	83 81       	ldd	r24, Z+3	; 0x03
    1438:	81 ff       	sbrs	r24, 1
    143a:	44 c3       	rjmp	.+1672   	; 0x1ac4 <vfprintf+0x6a6>
    143c:	9e 01       	movw	r18, r28
    143e:	2f 5f       	subi	r18, 0xFF	; 255
    1440:	3f 4f       	sbci	r19, 0xFF	; 255
    1442:	39 01       	movw	r6, r18
    1444:	f7 01       	movw	r30, r14
    1446:	93 81       	ldd	r25, Z+3	; 0x03
    1448:	f1 01       	movw	r30, r2
    144a:	93 fd       	sbrc	r25, 3
    144c:	85 91       	lpm	r24, Z+
    144e:	93 ff       	sbrs	r25, 3
    1450:	81 91       	ld	r24, Z+
    1452:	1f 01       	movw	r2, r30
    1454:	88 23       	and	r24, r24
    1456:	09 f4       	brne	.+2      	; 0x145a <vfprintf+0x3c>
    1458:	31 c3       	rjmp	.+1634   	; 0x1abc <vfprintf+0x69e>
    145a:	85 32       	cpi	r24, 0x25	; 37
    145c:	39 f4       	brne	.+14     	; 0x146c <vfprintf+0x4e>
    145e:	93 fd       	sbrc	r25, 3
    1460:	85 91       	lpm	r24, Z+
    1462:	93 ff       	sbrs	r25, 3
    1464:	81 91       	ld	r24, Z+
    1466:	1f 01       	movw	r2, r30
    1468:	85 32       	cpi	r24, 0x25	; 37
    146a:	39 f4       	brne	.+14     	; 0x147a <vfprintf+0x5c>
    146c:	b7 01       	movw	r22, r14
    146e:	90 e0       	ldi	r25, 0x00	; 0
    1470:	0e 94 b1 0e 	call	0x1d62	; 0x1d62 <fputc>
    1474:	56 01       	movw	r10, r12
    1476:	65 01       	movw	r12, r10
    1478:	e5 cf       	rjmp	.-54     	; 0x1444 <vfprintf+0x26>
    147a:	10 e0       	ldi	r17, 0x00	; 0
    147c:	51 2c       	mov	r5, r1
    147e:	91 2c       	mov	r9, r1
    1480:	ff e1       	ldi	r31, 0x1F	; 31
    1482:	f9 15       	cp	r31, r9
    1484:	d8 f0       	brcs	.+54     	; 0x14bc <vfprintf+0x9e>
    1486:	8b 32       	cpi	r24, 0x2B	; 43
    1488:	79 f0       	breq	.+30     	; 0x14a8 <vfprintf+0x8a>
    148a:	38 f4       	brcc	.+14     	; 0x149a <vfprintf+0x7c>
    148c:	80 32       	cpi	r24, 0x20	; 32
    148e:	79 f0       	breq	.+30     	; 0x14ae <vfprintf+0x90>
    1490:	83 32       	cpi	r24, 0x23	; 35
    1492:	a1 f4       	brne	.+40     	; 0x14bc <vfprintf+0x9e>
    1494:	f9 2d       	mov	r31, r9
    1496:	f0 61       	ori	r31, 0x10	; 16
    1498:	2e c0       	rjmp	.+92     	; 0x14f6 <vfprintf+0xd8>
    149a:	8d 32       	cpi	r24, 0x2D	; 45
    149c:	61 f0       	breq	.+24     	; 0x14b6 <vfprintf+0x98>
    149e:	80 33       	cpi	r24, 0x30	; 48
    14a0:	69 f4       	brne	.+26     	; 0x14bc <vfprintf+0x9e>
    14a2:	29 2d       	mov	r18, r9
    14a4:	21 60       	ori	r18, 0x01	; 1
    14a6:	2d c0       	rjmp	.+90     	; 0x1502 <vfprintf+0xe4>
    14a8:	39 2d       	mov	r19, r9
    14aa:	32 60       	ori	r19, 0x02	; 2
    14ac:	93 2e       	mov	r9, r19
    14ae:	89 2d       	mov	r24, r9
    14b0:	84 60       	ori	r24, 0x04	; 4
    14b2:	98 2e       	mov	r9, r24
    14b4:	2a c0       	rjmp	.+84     	; 0x150a <vfprintf+0xec>
    14b6:	e9 2d       	mov	r30, r9
    14b8:	e8 60       	ori	r30, 0x08	; 8
    14ba:	15 c0       	rjmp	.+42     	; 0x14e6 <vfprintf+0xc8>
    14bc:	97 fc       	sbrc	r9, 7
    14be:	2d c0       	rjmp	.+90     	; 0x151a <vfprintf+0xfc>
    14c0:	20 ed       	ldi	r18, 0xD0	; 208
    14c2:	28 0f       	add	r18, r24
    14c4:	2a 30       	cpi	r18, 0x0A	; 10
    14c6:	88 f4       	brcc	.+34     	; 0x14ea <vfprintf+0xcc>
    14c8:	96 fe       	sbrs	r9, 6
    14ca:	06 c0       	rjmp	.+12     	; 0x14d8 <vfprintf+0xba>
    14cc:	3a e0       	ldi	r19, 0x0A	; 10
    14ce:	13 9f       	mul	r17, r19
    14d0:	20 0d       	add	r18, r0
    14d2:	11 24       	eor	r1, r1
    14d4:	12 2f       	mov	r17, r18
    14d6:	19 c0       	rjmp	.+50     	; 0x150a <vfprintf+0xec>
    14d8:	8a e0       	ldi	r24, 0x0A	; 10
    14da:	58 9e       	mul	r5, r24
    14dc:	20 0d       	add	r18, r0
    14de:	11 24       	eor	r1, r1
    14e0:	52 2e       	mov	r5, r18
    14e2:	e9 2d       	mov	r30, r9
    14e4:	e0 62       	ori	r30, 0x20	; 32
    14e6:	9e 2e       	mov	r9, r30
    14e8:	10 c0       	rjmp	.+32     	; 0x150a <vfprintf+0xec>
    14ea:	8e 32       	cpi	r24, 0x2E	; 46
    14ec:	31 f4       	brne	.+12     	; 0x14fa <vfprintf+0xdc>
    14ee:	96 fc       	sbrc	r9, 6
    14f0:	e5 c2       	rjmp	.+1482   	; 0x1abc <vfprintf+0x69e>
    14f2:	f9 2d       	mov	r31, r9
    14f4:	f0 64       	ori	r31, 0x40	; 64
    14f6:	9f 2e       	mov	r9, r31
    14f8:	08 c0       	rjmp	.+16     	; 0x150a <vfprintf+0xec>
    14fa:	8c 36       	cpi	r24, 0x6C	; 108
    14fc:	21 f4       	brne	.+8      	; 0x1506 <vfprintf+0xe8>
    14fe:	29 2d       	mov	r18, r9
    1500:	20 68       	ori	r18, 0x80	; 128
    1502:	92 2e       	mov	r9, r18
    1504:	02 c0       	rjmp	.+4      	; 0x150a <vfprintf+0xec>
    1506:	88 36       	cpi	r24, 0x68	; 104
    1508:	41 f4       	brne	.+16     	; 0x151a <vfprintf+0xfc>
    150a:	f1 01       	movw	r30, r2
    150c:	93 fd       	sbrc	r25, 3
    150e:	85 91       	lpm	r24, Z+
    1510:	93 ff       	sbrs	r25, 3
    1512:	81 91       	ld	r24, Z+
    1514:	1f 01       	movw	r2, r30
    1516:	81 11       	cpse	r24, r1
    1518:	b3 cf       	rjmp	.-154    	; 0x1480 <vfprintf+0x62>
    151a:	9b eb       	ldi	r25, 0xBB	; 187
    151c:	98 0f       	add	r25, r24
    151e:	93 30       	cpi	r25, 0x03	; 3
    1520:	20 f4       	brcc	.+8      	; 0x152a <vfprintf+0x10c>
    1522:	99 2d       	mov	r25, r9
    1524:	90 61       	ori	r25, 0x10	; 16
    1526:	80 5e       	subi	r24, 0xE0	; 224
    1528:	07 c0       	rjmp	.+14     	; 0x1538 <vfprintf+0x11a>
    152a:	9b e9       	ldi	r25, 0x9B	; 155
    152c:	98 0f       	add	r25, r24
    152e:	93 30       	cpi	r25, 0x03	; 3
    1530:	08 f0       	brcs	.+2      	; 0x1534 <vfprintf+0x116>
    1532:	66 c1       	rjmp	.+716    	; 0x1800 <vfprintf+0x3e2>
    1534:	99 2d       	mov	r25, r9
    1536:	9f 7e       	andi	r25, 0xEF	; 239
    1538:	96 ff       	sbrs	r25, 6
    153a:	16 e0       	ldi	r17, 0x06	; 6
    153c:	9f 73       	andi	r25, 0x3F	; 63
    153e:	99 2e       	mov	r9, r25
    1540:	85 36       	cpi	r24, 0x65	; 101
    1542:	19 f4       	brne	.+6      	; 0x154a <vfprintf+0x12c>
    1544:	90 64       	ori	r25, 0x40	; 64
    1546:	99 2e       	mov	r9, r25
    1548:	08 c0       	rjmp	.+16     	; 0x155a <vfprintf+0x13c>
    154a:	86 36       	cpi	r24, 0x66	; 102
    154c:	21 f4       	brne	.+8      	; 0x1556 <vfprintf+0x138>
    154e:	39 2f       	mov	r19, r25
    1550:	30 68       	ori	r19, 0x80	; 128
    1552:	93 2e       	mov	r9, r19
    1554:	02 c0       	rjmp	.+4      	; 0x155a <vfprintf+0x13c>
    1556:	11 11       	cpse	r17, r1
    1558:	11 50       	subi	r17, 0x01	; 1
    155a:	97 fe       	sbrs	r9, 7
    155c:	07 c0       	rjmp	.+14     	; 0x156c <vfprintf+0x14e>
    155e:	1c 33       	cpi	r17, 0x3C	; 60
    1560:	50 f4       	brcc	.+20     	; 0x1576 <vfprintf+0x158>
    1562:	44 24       	eor	r4, r4
    1564:	43 94       	inc	r4
    1566:	41 0e       	add	r4, r17
    1568:	27 e0       	ldi	r18, 0x07	; 7
    156a:	0b c0       	rjmp	.+22     	; 0x1582 <vfprintf+0x164>
    156c:	18 30       	cpi	r17, 0x08	; 8
    156e:	38 f0       	brcs	.+14     	; 0x157e <vfprintf+0x160>
    1570:	27 e0       	ldi	r18, 0x07	; 7
    1572:	17 e0       	ldi	r17, 0x07	; 7
    1574:	05 c0       	rjmp	.+10     	; 0x1580 <vfprintf+0x162>
    1576:	27 e0       	ldi	r18, 0x07	; 7
    1578:	9c e3       	ldi	r25, 0x3C	; 60
    157a:	49 2e       	mov	r4, r25
    157c:	02 c0       	rjmp	.+4      	; 0x1582 <vfprintf+0x164>
    157e:	21 2f       	mov	r18, r17
    1580:	41 2c       	mov	r4, r1
    1582:	56 01       	movw	r10, r12
    1584:	84 e0       	ldi	r24, 0x04	; 4
    1586:	a8 0e       	add	r10, r24
    1588:	b1 1c       	adc	r11, r1
    158a:	f6 01       	movw	r30, r12
    158c:	60 81       	ld	r22, Z
    158e:	71 81       	ldd	r23, Z+1	; 0x01
    1590:	82 81       	ldd	r24, Z+2	; 0x02
    1592:	93 81       	ldd	r25, Z+3	; 0x03
    1594:	04 2d       	mov	r16, r4
    1596:	a3 01       	movw	r20, r6
    1598:	0e 94 c3 0d 	call	0x1b86	; 0x1b86 <__ftoa_engine>
    159c:	6c 01       	movw	r12, r24
    159e:	f9 81       	ldd	r31, Y+1	; 0x01
    15a0:	fc 87       	std	Y+12, r31	; 0x0c
    15a2:	f0 ff       	sbrs	r31, 0
    15a4:	02 c0       	rjmp	.+4      	; 0x15aa <vfprintf+0x18c>
    15a6:	f3 ff       	sbrs	r31, 3
    15a8:	06 c0       	rjmp	.+12     	; 0x15b6 <vfprintf+0x198>
    15aa:	91 fc       	sbrc	r9, 1
    15ac:	06 c0       	rjmp	.+12     	; 0x15ba <vfprintf+0x19c>
    15ae:	92 fe       	sbrs	r9, 2
    15b0:	06 c0       	rjmp	.+12     	; 0x15be <vfprintf+0x1a0>
    15b2:	00 e2       	ldi	r16, 0x20	; 32
    15b4:	05 c0       	rjmp	.+10     	; 0x15c0 <vfprintf+0x1a2>
    15b6:	0d e2       	ldi	r16, 0x2D	; 45
    15b8:	03 c0       	rjmp	.+6      	; 0x15c0 <vfprintf+0x1a2>
    15ba:	0b e2       	ldi	r16, 0x2B	; 43
    15bc:	01 c0       	rjmp	.+2      	; 0x15c0 <vfprintf+0x1a2>
    15be:	00 e0       	ldi	r16, 0x00	; 0
    15c0:	8c 85       	ldd	r24, Y+12	; 0x0c
    15c2:	8c 70       	andi	r24, 0x0C	; 12
    15c4:	19 f0       	breq	.+6      	; 0x15cc <vfprintf+0x1ae>
    15c6:	01 11       	cpse	r16, r1
    15c8:	5a c2       	rjmp	.+1204   	; 0x1a7e <vfprintf+0x660>
    15ca:	9b c2       	rjmp	.+1334   	; 0x1b02 <vfprintf+0x6e4>
    15cc:	97 fe       	sbrs	r9, 7
    15ce:	10 c0       	rjmp	.+32     	; 0x15f0 <vfprintf+0x1d2>
    15d0:	4c 0c       	add	r4, r12
    15d2:	fc 85       	ldd	r31, Y+12	; 0x0c
    15d4:	f4 ff       	sbrs	r31, 4
    15d6:	04 c0       	rjmp	.+8      	; 0x15e0 <vfprintf+0x1c2>
    15d8:	8a 81       	ldd	r24, Y+2	; 0x02
    15da:	81 33       	cpi	r24, 0x31	; 49
    15dc:	09 f4       	brne	.+2      	; 0x15e0 <vfprintf+0x1c2>
    15de:	4a 94       	dec	r4
    15e0:	14 14       	cp	r1, r4
    15e2:	74 f5       	brge	.+92     	; 0x1640 <vfprintf+0x222>
    15e4:	28 e0       	ldi	r18, 0x08	; 8
    15e6:	24 15       	cp	r18, r4
    15e8:	78 f5       	brcc	.+94     	; 0x1648 <vfprintf+0x22a>
    15ea:	88 e0       	ldi	r24, 0x08	; 8
    15ec:	48 2e       	mov	r4, r24
    15ee:	2c c0       	rjmp	.+88     	; 0x1648 <vfprintf+0x22a>
    15f0:	96 fc       	sbrc	r9, 6
    15f2:	2a c0       	rjmp	.+84     	; 0x1648 <vfprintf+0x22a>
    15f4:	81 2f       	mov	r24, r17
    15f6:	90 e0       	ldi	r25, 0x00	; 0
    15f8:	8c 15       	cp	r24, r12
    15fa:	9d 05       	cpc	r25, r13
    15fc:	9c f0       	brlt	.+38     	; 0x1624 <vfprintf+0x206>
    15fe:	3c ef       	ldi	r19, 0xFC	; 252
    1600:	c3 16       	cp	r12, r19
    1602:	3f ef       	ldi	r19, 0xFF	; 255
    1604:	d3 06       	cpc	r13, r19
    1606:	74 f0       	brlt	.+28     	; 0x1624 <vfprintf+0x206>
    1608:	89 2d       	mov	r24, r9
    160a:	80 68       	ori	r24, 0x80	; 128
    160c:	98 2e       	mov	r9, r24
    160e:	0a c0       	rjmp	.+20     	; 0x1624 <vfprintf+0x206>
    1610:	e2 e0       	ldi	r30, 0x02	; 2
    1612:	f0 e0       	ldi	r31, 0x00	; 0
    1614:	ec 0f       	add	r30, r28
    1616:	fd 1f       	adc	r31, r29
    1618:	e1 0f       	add	r30, r17
    161a:	f1 1d       	adc	r31, r1
    161c:	80 81       	ld	r24, Z
    161e:	80 33       	cpi	r24, 0x30	; 48
    1620:	19 f4       	brne	.+6      	; 0x1628 <vfprintf+0x20a>
    1622:	11 50       	subi	r17, 0x01	; 1
    1624:	11 11       	cpse	r17, r1
    1626:	f4 cf       	rjmp	.-24     	; 0x1610 <vfprintf+0x1f2>
    1628:	97 fe       	sbrs	r9, 7
    162a:	0e c0       	rjmp	.+28     	; 0x1648 <vfprintf+0x22a>
    162c:	44 24       	eor	r4, r4
    162e:	43 94       	inc	r4
    1630:	41 0e       	add	r4, r17
    1632:	81 2f       	mov	r24, r17
    1634:	90 e0       	ldi	r25, 0x00	; 0
    1636:	c8 16       	cp	r12, r24
    1638:	d9 06       	cpc	r13, r25
    163a:	2c f4       	brge	.+10     	; 0x1646 <vfprintf+0x228>
    163c:	1c 19       	sub	r17, r12
    163e:	04 c0       	rjmp	.+8      	; 0x1648 <vfprintf+0x22a>
    1640:	44 24       	eor	r4, r4
    1642:	43 94       	inc	r4
    1644:	01 c0       	rjmp	.+2      	; 0x1648 <vfprintf+0x22a>
    1646:	10 e0       	ldi	r17, 0x00	; 0
    1648:	97 fe       	sbrs	r9, 7
    164a:	06 c0       	rjmp	.+12     	; 0x1658 <vfprintf+0x23a>
    164c:	1c 14       	cp	r1, r12
    164e:	1d 04       	cpc	r1, r13
    1650:	34 f4       	brge	.+12     	; 0x165e <vfprintf+0x240>
    1652:	c6 01       	movw	r24, r12
    1654:	01 96       	adiw	r24, 0x01	; 1
    1656:	05 c0       	rjmp	.+10     	; 0x1662 <vfprintf+0x244>
    1658:	85 e0       	ldi	r24, 0x05	; 5
    165a:	90 e0       	ldi	r25, 0x00	; 0
    165c:	02 c0       	rjmp	.+4      	; 0x1662 <vfprintf+0x244>
    165e:	81 e0       	ldi	r24, 0x01	; 1
    1660:	90 e0       	ldi	r25, 0x00	; 0
    1662:	01 11       	cpse	r16, r1
    1664:	01 96       	adiw	r24, 0x01	; 1
    1666:	11 23       	and	r17, r17
    1668:	31 f0       	breq	.+12     	; 0x1676 <vfprintf+0x258>
    166a:	21 2f       	mov	r18, r17
    166c:	30 e0       	ldi	r19, 0x00	; 0
    166e:	2f 5f       	subi	r18, 0xFF	; 255
    1670:	3f 4f       	sbci	r19, 0xFF	; 255
    1672:	82 0f       	add	r24, r18
    1674:	93 1f       	adc	r25, r19
    1676:	25 2d       	mov	r18, r5
    1678:	30 e0       	ldi	r19, 0x00	; 0
    167a:	82 17       	cp	r24, r18
    167c:	93 07       	cpc	r25, r19
    167e:	14 f4       	brge	.+4      	; 0x1684 <vfprintf+0x266>
    1680:	58 1a       	sub	r5, r24
    1682:	01 c0       	rjmp	.+2      	; 0x1686 <vfprintf+0x268>
    1684:	51 2c       	mov	r5, r1
    1686:	89 2d       	mov	r24, r9
    1688:	89 70       	andi	r24, 0x09	; 9
    168a:	49 f4       	brne	.+18     	; 0x169e <vfprintf+0x280>
    168c:	55 20       	and	r5, r5
    168e:	39 f0       	breq	.+14     	; 0x169e <vfprintf+0x280>
    1690:	b7 01       	movw	r22, r14
    1692:	80 e2       	ldi	r24, 0x20	; 32
    1694:	90 e0       	ldi	r25, 0x00	; 0
    1696:	0e 94 b1 0e 	call	0x1d62	; 0x1d62 <fputc>
    169a:	5a 94       	dec	r5
    169c:	f7 cf       	rjmp	.-18     	; 0x168c <vfprintf+0x26e>
    169e:	00 23       	and	r16, r16
    16a0:	29 f0       	breq	.+10     	; 0x16ac <vfprintf+0x28e>
    16a2:	b7 01       	movw	r22, r14
    16a4:	80 2f       	mov	r24, r16
    16a6:	90 e0       	ldi	r25, 0x00	; 0
    16a8:	0e 94 b1 0e 	call	0x1d62	; 0x1d62 <fputc>
    16ac:	93 fc       	sbrc	r9, 3
    16ae:	09 c0       	rjmp	.+18     	; 0x16c2 <vfprintf+0x2a4>
    16b0:	55 20       	and	r5, r5
    16b2:	39 f0       	breq	.+14     	; 0x16c2 <vfprintf+0x2a4>
    16b4:	b7 01       	movw	r22, r14
    16b6:	80 e3       	ldi	r24, 0x30	; 48
    16b8:	90 e0       	ldi	r25, 0x00	; 0
    16ba:	0e 94 b1 0e 	call	0x1d62	; 0x1d62 <fputc>
    16be:	5a 94       	dec	r5
    16c0:	f7 cf       	rjmp	.-18     	; 0x16b0 <vfprintf+0x292>
    16c2:	97 fe       	sbrs	r9, 7
    16c4:	4c c0       	rjmp	.+152    	; 0x175e <vfprintf+0x340>
    16c6:	46 01       	movw	r8, r12
    16c8:	d7 fe       	sbrs	r13, 7
    16ca:	02 c0       	rjmp	.+4      	; 0x16d0 <vfprintf+0x2b2>
    16cc:	81 2c       	mov	r8, r1
    16ce:	91 2c       	mov	r9, r1
    16d0:	c6 01       	movw	r24, r12
    16d2:	88 19       	sub	r24, r8
    16d4:	99 09       	sbc	r25, r9
    16d6:	f3 01       	movw	r30, r6
    16d8:	e8 0f       	add	r30, r24
    16da:	f9 1f       	adc	r31, r25
    16dc:	fe 87       	std	Y+14, r31	; 0x0e
    16de:	ed 87       	std	Y+13, r30	; 0x0d
    16e0:	96 01       	movw	r18, r12
    16e2:	24 19       	sub	r18, r4
    16e4:	31 09       	sbc	r19, r1
    16e6:	38 8b       	std	Y+16, r19	; 0x10
    16e8:	2f 87       	std	Y+15, r18	; 0x0f
    16ea:	01 2f       	mov	r16, r17
    16ec:	10 e0       	ldi	r17, 0x00	; 0
    16ee:	11 95       	neg	r17
    16f0:	01 95       	neg	r16
    16f2:	11 09       	sbc	r17, r1
    16f4:	3f ef       	ldi	r19, 0xFF	; 255
    16f6:	83 16       	cp	r8, r19
    16f8:	93 06       	cpc	r9, r19
    16fa:	29 f4       	brne	.+10     	; 0x1706 <vfprintf+0x2e8>
    16fc:	b7 01       	movw	r22, r14
    16fe:	8e e2       	ldi	r24, 0x2E	; 46
    1700:	90 e0       	ldi	r25, 0x00	; 0
    1702:	0e 94 b1 0e 	call	0x1d62	; 0x1d62 <fputc>
    1706:	c8 14       	cp	r12, r8
    1708:	d9 04       	cpc	r13, r9
    170a:	4c f0       	brlt	.+18     	; 0x171e <vfprintf+0x300>
    170c:	8f 85       	ldd	r24, Y+15	; 0x0f
    170e:	98 89       	ldd	r25, Y+16	; 0x10
    1710:	88 15       	cp	r24, r8
    1712:	99 05       	cpc	r25, r9
    1714:	24 f4       	brge	.+8      	; 0x171e <vfprintf+0x300>
    1716:	ed 85       	ldd	r30, Y+13	; 0x0d
    1718:	fe 85       	ldd	r31, Y+14	; 0x0e
    171a:	81 81       	ldd	r24, Z+1	; 0x01
    171c:	01 c0       	rjmp	.+2      	; 0x1720 <vfprintf+0x302>
    171e:	80 e3       	ldi	r24, 0x30	; 48
    1720:	f1 e0       	ldi	r31, 0x01	; 1
    1722:	8f 1a       	sub	r8, r31
    1724:	91 08       	sbc	r9, r1
    1726:	2d 85       	ldd	r18, Y+13	; 0x0d
    1728:	3e 85       	ldd	r19, Y+14	; 0x0e
    172a:	2f 5f       	subi	r18, 0xFF	; 255
    172c:	3f 4f       	sbci	r19, 0xFF	; 255
    172e:	3e 87       	std	Y+14, r19	; 0x0e
    1730:	2d 87       	std	Y+13, r18	; 0x0d
    1732:	80 16       	cp	r8, r16
    1734:	91 06       	cpc	r9, r17
    1736:	2c f0       	brlt	.+10     	; 0x1742 <vfprintf+0x324>
    1738:	b7 01       	movw	r22, r14
    173a:	90 e0       	ldi	r25, 0x00	; 0
    173c:	0e 94 b1 0e 	call	0x1d62	; 0x1d62 <fputc>
    1740:	d9 cf       	rjmp	.-78     	; 0x16f4 <vfprintf+0x2d6>
    1742:	c8 14       	cp	r12, r8
    1744:	d9 04       	cpc	r13, r9
    1746:	41 f4       	brne	.+16     	; 0x1758 <vfprintf+0x33a>
    1748:	9a 81       	ldd	r25, Y+2	; 0x02
    174a:	96 33       	cpi	r25, 0x36	; 54
    174c:	20 f4       	brcc	.+8      	; 0x1756 <vfprintf+0x338>
    174e:	95 33       	cpi	r25, 0x35	; 53
    1750:	19 f4       	brne	.+6      	; 0x1758 <vfprintf+0x33a>
    1752:	3c 85       	ldd	r19, Y+12	; 0x0c
    1754:	34 ff       	sbrs	r19, 4
    1756:	81 e3       	ldi	r24, 0x31	; 49
    1758:	b7 01       	movw	r22, r14
    175a:	90 e0       	ldi	r25, 0x00	; 0
    175c:	4e c0       	rjmp	.+156    	; 0x17fa <vfprintf+0x3dc>
    175e:	8a 81       	ldd	r24, Y+2	; 0x02
    1760:	81 33       	cpi	r24, 0x31	; 49
    1762:	19 f0       	breq	.+6      	; 0x176a <vfprintf+0x34c>
    1764:	9c 85       	ldd	r25, Y+12	; 0x0c
    1766:	9f 7e       	andi	r25, 0xEF	; 239
    1768:	9c 87       	std	Y+12, r25	; 0x0c
    176a:	b7 01       	movw	r22, r14
    176c:	90 e0       	ldi	r25, 0x00	; 0
    176e:	0e 94 b1 0e 	call	0x1d62	; 0x1d62 <fputc>
    1772:	11 11       	cpse	r17, r1
    1774:	05 c0       	rjmp	.+10     	; 0x1780 <vfprintf+0x362>
    1776:	94 fc       	sbrc	r9, 4
    1778:	18 c0       	rjmp	.+48     	; 0x17aa <vfprintf+0x38c>
    177a:	85 e6       	ldi	r24, 0x65	; 101
    177c:	90 e0       	ldi	r25, 0x00	; 0
    177e:	17 c0       	rjmp	.+46     	; 0x17ae <vfprintf+0x390>
    1780:	b7 01       	movw	r22, r14
    1782:	8e e2       	ldi	r24, 0x2E	; 46
    1784:	90 e0       	ldi	r25, 0x00	; 0
    1786:	0e 94 b1 0e 	call	0x1d62	; 0x1d62 <fputc>
    178a:	1e 5f       	subi	r17, 0xFE	; 254
    178c:	82 e0       	ldi	r24, 0x02	; 2
    178e:	01 e0       	ldi	r16, 0x01	; 1
    1790:	08 0f       	add	r16, r24
    1792:	f3 01       	movw	r30, r6
    1794:	e8 0f       	add	r30, r24
    1796:	f1 1d       	adc	r31, r1
    1798:	80 81       	ld	r24, Z
    179a:	b7 01       	movw	r22, r14
    179c:	90 e0       	ldi	r25, 0x00	; 0
    179e:	0e 94 b1 0e 	call	0x1d62	; 0x1d62 <fputc>
    17a2:	80 2f       	mov	r24, r16
    17a4:	01 13       	cpse	r16, r17
    17a6:	f3 cf       	rjmp	.-26     	; 0x178e <vfprintf+0x370>
    17a8:	e6 cf       	rjmp	.-52     	; 0x1776 <vfprintf+0x358>
    17aa:	85 e4       	ldi	r24, 0x45	; 69
    17ac:	90 e0       	ldi	r25, 0x00	; 0
    17ae:	b7 01       	movw	r22, r14
    17b0:	0e 94 b1 0e 	call	0x1d62	; 0x1d62 <fputc>
    17b4:	d7 fc       	sbrc	r13, 7
    17b6:	06 c0       	rjmp	.+12     	; 0x17c4 <vfprintf+0x3a6>
    17b8:	c1 14       	cp	r12, r1
    17ba:	d1 04       	cpc	r13, r1
    17bc:	41 f4       	brne	.+16     	; 0x17ce <vfprintf+0x3b0>
    17be:	ec 85       	ldd	r30, Y+12	; 0x0c
    17c0:	e4 ff       	sbrs	r30, 4
    17c2:	05 c0       	rjmp	.+10     	; 0x17ce <vfprintf+0x3b0>
    17c4:	d1 94       	neg	r13
    17c6:	c1 94       	neg	r12
    17c8:	d1 08       	sbc	r13, r1
    17ca:	8d e2       	ldi	r24, 0x2D	; 45
    17cc:	01 c0       	rjmp	.+2      	; 0x17d0 <vfprintf+0x3b2>
    17ce:	8b e2       	ldi	r24, 0x2B	; 43
    17d0:	b7 01       	movw	r22, r14
    17d2:	90 e0       	ldi	r25, 0x00	; 0
    17d4:	0e 94 b1 0e 	call	0x1d62	; 0x1d62 <fputc>
    17d8:	80 e3       	ldi	r24, 0x30	; 48
    17da:	2a e0       	ldi	r18, 0x0A	; 10
    17dc:	c2 16       	cp	r12, r18
    17de:	d1 04       	cpc	r13, r1
    17e0:	2c f0       	brlt	.+10     	; 0x17ec <vfprintf+0x3ce>
    17e2:	8f 5f       	subi	r24, 0xFF	; 255
    17e4:	fa e0       	ldi	r31, 0x0A	; 10
    17e6:	cf 1a       	sub	r12, r31
    17e8:	d1 08       	sbc	r13, r1
    17ea:	f7 cf       	rjmp	.-18     	; 0x17da <vfprintf+0x3bc>
    17ec:	b7 01       	movw	r22, r14
    17ee:	90 e0       	ldi	r25, 0x00	; 0
    17f0:	0e 94 b1 0e 	call	0x1d62	; 0x1d62 <fputc>
    17f4:	b7 01       	movw	r22, r14
    17f6:	c6 01       	movw	r24, r12
    17f8:	c0 96       	adiw	r24, 0x30	; 48
    17fa:	0e 94 b1 0e 	call	0x1d62	; 0x1d62 <fputc>
    17fe:	54 c1       	rjmp	.+680    	; 0x1aa8 <vfprintf+0x68a>
    1800:	83 36       	cpi	r24, 0x63	; 99
    1802:	31 f0       	breq	.+12     	; 0x1810 <vfprintf+0x3f2>
    1804:	83 37       	cpi	r24, 0x73	; 115
    1806:	79 f0       	breq	.+30     	; 0x1826 <vfprintf+0x408>
    1808:	83 35       	cpi	r24, 0x53	; 83
    180a:	09 f0       	breq	.+2      	; 0x180e <vfprintf+0x3f0>
    180c:	56 c0       	rjmp	.+172    	; 0x18ba <vfprintf+0x49c>
    180e:	20 c0       	rjmp	.+64     	; 0x1850 <vfprintf+0x432>
    1810:	56 01       	movw	r10, r12
    1812:	32 e0       	ldi	r19, 0x02	; 2
    1814:	a3 0e       	add	r10, r19
    1816:	b1 1c       	adc	r11, r1
    1818:	f6 01       	movw	r30, r12
    181a:	80 81       	ld	r24, Z
    181c:	89 83       	std	Y+1, r24	; 0x01
    181e:	01 e0       	ldi	r16, 0x01	; 1
    1820:	10 e0       	ldi	r17, 0x00	; 0
    1822:	63 01       	movw	r12, r6
    1824:	12 c0       	rjmp	.+36     	; 0x184a <vfprintf+0x42c>
    1826:	56 01       	movw	r10, r12
    1828:	f2 e0       	ldi	r31, 0x02	; 2
    182a:	af 0e       	add	r10, r31
    182c:	b1 1c       	adc	r11, r1
    182e:	f6 01       	movw	r30, r12
    1830:	c0 80       	ld	r12, Z
    1832:	d1 80       	ldd	r13, Z+1	; 0x01
    1834:	96 fe       	sbrs	r9, 6
    1836:	03 c0       	rjmp	.+6      	; 0x183e <vfprintf+0x420>
    1838:	61 2f       	mov	r22, r17
    183a:	70 e0       	ldi	r23, 0x00	; 0
    183c:	02 c0       	rjmp	.+4      	; 0x1842 <vfprintf+0x424>
    183e:	6f ef       	ldi	r22, 0xFF	; 255
    1840:	7f ef       	ldi	r23, 0xFF	; 255
    1842:	c6 01       	movw	r24, r12
    1844:	0e 94 a6 0e 	call	0x1d4c	; 0x1d4c <strnlen>
    1848:	8c 01       	movw	r16, r24
    184a:	f9 2d       	mov	r31, r9
    184c:	ff 77       	andi	r31, 0x7F	; 127
    184e:	14 c0       	rjmp	.+40     	; 0x1878 <vfprintf+0x45a>
    1850:	56 01       	movw	r10, r12
    1852:	22 e0       	ldi	r18, 0x02	; 2
    1854:	a2 0e       	add	r10, r18
    1856:	b1 1c       	adc	r11, r1
    1858:	f6 01       	movw	r30, r12
    185a:	c0 80       	ld	r12, Z
    185c:	d1 80       	ldd	r13, Z+1	; 0x01
    185e:	96 fe       	sbrs	r9, 6
    1860:	03 c0       	rjmp	.+6      	; 0x1868 <vfprintf+0x44a>
    1862:	61 2f       	mov	r22, r17
    1864:	70 e0       	ldi	r23, 0x00	; 0
    1866:	02 c0       	rjmp	.+4      	; 0x186c <vfprintf+0x44e>
    1868:	6f ef       	ldi	r22, 0xFF	; 255
    186a:	7f ef       	ldi	r23, 0xFF	; 255
    186c:	c6 01       	movw	r24, r12
    186e:	0e 94 9b 0e 	call	0x1d36	; 0x1d36 <strnlen_P>
    1872:	8c 01       	movw	r16, r24
    1874:	f9 2d       	mov	r31, r9
    1876:	f0 68       	ori	r31, 0x80	; 128
    1878:	9f 2e       	mov	r9, r31
    187a:	f3 fd       	sbrc	r31, 3
    187c:	1a c0       	rjmp	.+52     	; 0x18b2 <vfprintf+0x494>
    187e:	85 2d       	mov	r24, r5
    1880:	90 e0       	ldi	r25, 0x00	; 0
    1882:	08 17       	cp	r16, r24
    1884:	19 07       	cpc	r17, r25
    1886:	a8 f4       	brcc	.+42     	; 0x18b2 <vfprintf+0x494>
    1888:	b7 01       	movw	r22, r14
    188a:	80 e2       	ldi	r24, 0x20	; 32
    188c:	90 e0       	ldi	r25, 0x00	; 0
    188e:	0e 94 b1 0e 	call	0x1d62	; 0x1d62 <fputc>
    1892:	5a 94       	dec	r5
    1894:	f4 cf       	rjmp	.-24     	; 0x187e <vfprintf+0x460>
    1896:	f6 01       	movw	r30, r12
    1898:	97 fc       	sbrc	r9, 7
    189a:	85 91       	lpm	r24, Z+
    189c:	97 fe       	sbrs	r9, 7
    189e:	81 91       	ld	r24, Z+
    18a0:	6f 01       	movw	r12, r30
    18a2:	b7 01       	movw	r22, r14
    18a4:	90 e0       	ldi	r25, 0x00	; 0
    18a6:	0e 94 b1 0e 	call	0x1d62	; 0x1d62 <fputc>
    18aa:	51 10       	cpse	r5, r1
    18ac:	5a 94       	dec	r5
    18ae:	01 50       	subi	r16, 0x01	; 1
    18b0:	11 09       	sbc	r17, r1
    18b2:	01 15       	cp	r16, r1
    18b4:	11 05       	cpc	r17, r1
    18b6:	79 f7       	brne	.-34     	; 0x1896 <vfprintf+0x478>
    18b8:	f7 c0       	rjmp	.+494    	; 0x1aa8 <vfprintf+0x68a>
    18ba:	84 36       	cpi	r24, 0x64	; 100
    18bc:	11 f0       	breq	.+4      	; 0x18c2 <vfprintf+0x4a4>
    18be:	89 36       	cpi	r24, 0x69	; 105
    18c0:	61 f5       	brne	.+88     	; 0x191a <vfprintf+0x4fc>
    18c2:	56 01       	movw	r10, r12
    18c4:	97 fe       	sbrs	r9, 7
    18c6:	09 c0       	rjmp	.+18     	; 0x18da <vfprintf+0x4bc>
    18c8:	24 e0       	ldi	r18, 0x04	; 4
    18ca:	a2 0e       	add	r10, r18
    18cc:	b1 1c       	adc	r11, r1
    18ce:	f6 01       	movw	r30, r12
    18d0:	60 81       	ld	r22, Z
    18d2:	71 81       	ldd	r23, Z+1	; 0x01
    18d4:	82 81       	ldd	r24, Z+2	; 0x02
    18d6:	93 81       	ldd	r25, Z+3	; 0x03
    18d8:	0a c0       	rjmp	.+20     	; 0x18ee <vfprintf+0x4d0>
    18da:	f2 e0       	ldi	r31, 0x02	; 2
    18dc:	af 0e       	add	r10, r31
    18de:	b1 1c       	adc	r11, r1
    18e0:	f6 01       	movw	r30, r12
    18e2:	60 81       	ld	r22, Z
    18e4:	71 81       	ldd	r23, Z+1	; 0x01
    18e6:	07 2e       	mov	r0, r23
    18e8:	00 0c       	add	r0, r0
    18ea:	88 0b       	sbc	r24, r24
    18ec:	99 0b       	sbc	r25, r25
    18ee:	f9 2d       	mov	r31, r9
    18f0:	ff 76       	andi	r31, 0x6F	; 111
    18f2:	9f 2e       	mov	r9, r31
    18f4:	97 ff       	sbrs	r25, 7
    18f6:	09 c0       	rjmp	.+18     	; 0x190a <vfprintf+0x4ec>
    18f8:	90 95       	com	r25
    18fa:	80 95       	com	r24
    18fc:	70 95       	com	r23
    18fe:	61 95       	neg	r22
    1900:	7f 4f       	sbci	r23, 0xFF	; 255
    1902:	8f 4f       	sbci	r24, 0xFF	; 255
    1904:	9f 4f       	sbci	r25, 0xFF	; 255
    1906:	f0 68       	ori	r31, 0x80	; 128
    1908:	9f 2e       	mov	r9, r31
    190a:	2a e0       	ldi	r18, 0x0A	; 10
    190c:	30 e0       	ldi	r19, 0x00	; 0
    190e:	a3 01       	movw	r20, r6
    1910:	0e 94 5c 0f 	call	0x1eb8	; 0x1eb8 <__ultoa_invert>
    1914:	c8 2e       	mov	r12, r24
    1916:	c6 18       	sub	r12, r6
    1918:	3f c0       	rjmp	.+126    	; 0x1998 <vfprintf+0x57a>
    191a:	09 2d       	mov	r16, r9
    191c:	85 37       	cpi	r24, 0x75	; 117
    191e:	21 f4       	brne	.+8      	; 0x1928 <vfprintf+0x50a>
    1920:	0f 7e       	andi	r16, 0xEF	; 239
    1922:	2a e0       	ldi	r18, 0x0A	; 10
    1924:	30 e0       	ldi	r19, 0x00	; 0
    1926:	1d c0       	rjmp	.+58     	; 0x1962 <vfprintf+0x544>
    1928:	09 7f       	andi	r16, 0xF9	; 249
    192a:	8f 36       	cpi	r24, 0x6F	; 111
    192c:	91 f0       	breq	.+36     	; 0x1952 <vfprintf+0x534>
    192e:	18 f4       	brcc	.+6      	; 0x1936 <vfprintf+0x518>
    1930:	88 35       	cpi	r24, 0x58	; 88
    1932:	59 f0       	breq	.+22     	; 0x194a <vfprintf+0x52c>
    1934:	c3 c0       	rjmp	.+390    	; 0x1abc <vfprintf+0x69e>
    1936:	80 37       	cpi	r24, 0x70	; 112
    1938:	19 f0       	breq	.+6      	; 0x1940 <vfprintf+0x522>
    193a:	88 37       	cpi	r24, 0x78	; 120
    193c:	11 f0       	breq	.+4      	; 0x1942 <vfprintf+0x524>
    193e:	be c0       	rjmp	.+380    	; 0x1abc <vfprintf+0x69e>
    1940:	00 61       	ori	r16, 0x10	; 16
    1942:	04 ff       	sbrs	r16, 4
    1944:	09 c0       	rjmp	.+18     	; 0x1958 <vfprintf+0x53a>
    1946:	04 60       	ori	r16, 0x04	; 4
    1948:	07 c0       	rjmp	.+14     	; 0x1958 <vfprintf+0x53a>
    194a:	94 fe       	sbrs	r9, 4
    194c:	08 c0       	rjmp	.+16     	; 0x195e <vfprintf+0x540>
    194e:	06 60       	ori	r16, 0x06	; 6
    1950:	06 c0       	rjmp	.+12     	; 0x195e <vfprintf+0x540>
    1952:	28 e0       	ldi	r18, 0x08	; 8
    1954:	30 e0       	ldi	r19, 0x00	; 0
    1956:	05 c0       	rjmp	.+10     	; 0x1962 <vfprintf+0x544>
    1958:	20 e1       	ldi	r18, 0x10	; 16
    195a:	30 e0       	ldi	r19, 0x00	; 0
    195c:	02 c0       	rjmp	.+4      	; 0x1962 <vfprintf+0x544>
    195e:	20 e1       	ldi	r18, 0x10	; 16
    1960:	32 e0       	ldi	r19, 0x02	; 2
    1962:	56 01       	movw	r10, r12
    1964:	07 ff       	sbrs	r16, 7
    1966:	09 c0       	rjmp	.+18     	; 0x197a <vfprintf+0x55c>
    1968:	84 e0       	ldi	r24, 0x04	; 4
    196a:	a8 0e       	add	r10, r24
    196c:	b1 1c       	adc	r11, r1
    196e:	f6 01       	movw	r30, r12
    1970:	60 81       	ld	r22, Z
    1972:	71 81       	ldd	r23, Z+1	; 0x01
    1974:	82 81       	ldd	r24, Z+2	; 0x02
    1976:	93 81       	ldd	r25, Z+3	; 0x03
    1978:	08 c0       	rjmp	.+16     	; 0x198a <vfprintf+0x56c>
    197a:	f2 e0       	ldi	r31, 0x02	; 2
    197c:	af 0e       	add	r10, r31
    197e:	b1 1c       	adc	r11, r1
    1980:	f6 01       	movw	r30, r12
    1982:	60 81       	ld	r22, Z
    1984:	71 81       	ldd	r23, Z+1	; 0x01
    1986:	80 e0       	ldi	r24, 0x00	; 0
    1988:	90 e0       	ldi	r25, 0x00	; 0
    198a:	a3 01       	movw	r20, r6
    198c:	0e 94 5c 0f 	call	0x1eb8	; 0x1eb8 <__ultoa_invert>
    1990:	c8 2e       	mov	r12, r24
    1992:	c6 18       	sub	r12, r6
    1994:	0f 77       	andi	r16, 0x7F	; 127
    1996:	90 2e       	mov	r9, r16
    1998:	96 fe       	sbrs	r9, 6
    199a:	0b c0       	rjmp	.+22     	; 0x19b2 <vfprintf+0x594>
    199c:	09 2d       	mov	r16, r9
    199e:	0e 7f       	andi	r16, 0xFE	; 254
    19a0:	c1 16       	cp	r12, r17
    19a2:	50 f4       	brcc	.+20     	; 0x19b8 <vfprintf+0x59a>
    19a4:	94 fe       	sbrs	r9, 4
    19a6:	0a c0       	rjmp	.+20     	; 0x19bc <vfprintf+0x59e>
    19a8:	92 fc       	sbrc	r9, 2
    19aa:	08 c0       	rjmp	.+16     	; 0x19bc <vfprintf+0x59e>
    19ac:	09 2d       	mov	r16, r9
    19ae:	0e 7e       	andi	r16, 0xEE	; 238
    19b0:	05 c0       	rjmp	.+10     	; 0x19bc <vfprintf+0x59e>
    19b2:	dc 2c       	mov	r13, r12
    19b4:	09 2d       	mov	r16, r9
    19b6:	03 c0       	rjmp	.+6      	; 0x19be <vfprintf+0x5a0>
    19b8:	dc 2c       	mov	r13, r12
    19ba:	01 c0       	rjmp	.+2      	; 0x19be <vfprintf+0x5a0>
    19bc:	d1 2e       	mov	r13, r17
    19be:	04 ff       	sbrs	r16, 4
    19c0:	0d c0       	rjmp	.+26     	; 0x19dc <vfprintf+0x5be>
    19c2:	fe 01       	movw	r30, r28
    19c4:	ec 0d       	add	r30, r12
    19c6:	f1 1d       	adc	r31, r1
    19c8:	80 81       	ld	r24, Z
    19ca:	80 33       	cpi	r24, 0x30	; 48
    19cc:	11 f4       	brne	.+4      	; 0x19d2 <vfprintf+0x5b4>
    19ce:	09 7e       	andi	r16, 0xE9	; 233
    19d0:	09 c0       	rjmp	.+18     	; 0x19e4 <vfprintf+0x5c6>
    19d2:	02 ff       	sbrs	r16, 2
    19d4:	06 c0       	rjmp	.+12     	; 0x19e2 <vfprintf+0x5c4>
    19d6:	d3 94       	inc	r13
    19d8:	d3 94       	inc	r13
    19da:	04 c0       	rjmp	.+8      	; 0x19e4 <vfprintf+0x5c6>
    19dc:	80 2f       	mov	r24, r16
    19de:	86 78       	andi	r24, 0x86	; 134
    19e0:	09 f0       	breq	.+2      	; 0x19e4 <vfprintf+0x5c6>
    19e2:	d3 94       	inc	r13
    19e4:	03 fd       	sbrc	r16, 3
    19e6:	11 c0       	rjmp	.+34     	; 0x1a0a <vfprintf+0x5ec>
    19e8:	00 ff       	sbrs	r16, 0
    19ea:	06 c0       	rjmp	.+12     	; 0x19f8 <vfprintf+0x5da>
    19ec:	1c 2d       	mov	r17, r12
    19ee:	d5 14       	cp	r13, r5
    19f0:	80 f4       	brcc	.+32     	; 0x1a12 <vfprintf+0x5f4>
    19f2:	15 0d       	add	r17, r5
    19f4:	1d 19       	sub	r17, r13
    19f6:	0d c0       	rjmp	.+26     	; 0x1a12 <vfprintf+0x5f4>
    19f8:	d5 14       	cp	r13, r5
    19fa:	58 f4       	brcc	.+22     	; 0x1a12 <vfprintf+0x5f4>
    19fc:	b7 01       	movw	r22, r14
    19fe:	80 e2       	ldi	r24, 0x20	; 32
    1a00:	90 e0       	ldi	r25, 0x00	; 0
    1a02:	0e 94 b1 0e 	call	0x1d62	; 0x1d62 <fputc>
    1a06:	d3 94       	inc	r13
    1a08:	f7 cf       	rjmp	.-18     	; 0x19f8 <vfprintf+0x5da>
    1a0a:	d5 14       	cp	r13, r5
    1a0c:	10 f4       	brcc	.+4      	; 0x1a12 <vfprintf+0x5f4>
    1a0e:	5d 18       	sub	r5, r13
    1a10:	01 c0       	rjmp	.+2      	; 0x1a14 <vfprintf+0x5f6>
    1a12:	51 2c       	mov	r5, r1
    1a14:	04 ff       	sbrs	r16, 4
    1a16:	10 c0       	rjmp	.+32     	; 0x1a38 <vfprintf+0x61a>
    1a18:	b7 01       	movw	r22, r14
    1a1a:	80 e3       	ldi	r24, 0x30	; 48
    1a1c:	90 e0       	ldi	r25, 0x00	; 0
    1a1e:	0e 94 b1 0e 	call	0x1d62	; 0x1d62 <fputc>
    1a22:	02 ff       	sbrs	r16, 2
    1a24:	17 c0       	rjmp	.+46     	; 0x1a54 <vfprintf+0x636>
    1a26:	01 fd       	sbrc	r16, 1
    1a28:	03 c0       	rjmp	.+6      	; 0x1a30 <vfprintf+0x612>
    1a2a:	88 e7       	ldi	r24, 0x78	; 120
    1a2c:	90 e0       	ldi	r25, 0x00	; 0
    1a2e:	02 c0       	rjmp	.+4      	; 0x1a34 <vfprintf+0x616>
    1a30:	88 e5       	ldi	r24, 0x58	; 88
    1a32:	90 e0       	ldi	r25, 0x00	; 0
    1a34:	b7 01       	movw	r22, r14
    1a36:	0c c0       	rjmp	.+24     	; 0x1a50 <vfprintf+0x632>
    1a38:	80 2f       	mov	r24, r16
    1a3a:	86 78       	andi	r24, 0x86	; 134
    1a3c:	59 f0       	breq	.+22     	; 0x1a54 <vfprintf+0x636>
    1a3e:	01 ff       	sbrs	r16, 1
    1a40:	02 c0       	rjmp	.+4      	; 0x1a46 <vfprintf+0x628>
    1a42:	8b e2       	ldi	r24, 0x2B	; 43
    1a44:	01 c0       	rjmp	.+2      	; 0x1a48 <vfprintf+0x62a>
    1a46:	80 e2       	ldi	r24, 0x20	; 32
    1a48:	07 fd       	sbrc	r16, 7
    1a4a:	8d e2       	ldi	r24, 0x2D	; 45
    1a4c:	b7 01       	movw	r22, r14
    1a4e:	90 e0       	ldi	r25, 0x00	; 0
    1a50:	0e 94 b1 0e 	call	0x1d62	; 0x1d62 <fputc>
    1a54:	c1 16       	cp	r12, r17
    1a56:	38 f4       	brcc	.+14     	; 0x1a66 <vfprintf+0x648>
    1a58:	b7 01       	movw	r22, r14
    1a5a:	80 e3       	ldi	r24, 0x30	; 48
    1a5c:	90 e0       	ldi	r25, 0x00	; 0
    1a5e:	0e 94 b1 0e 	call	0x1d62	; 0x1d62 <fputc>
    1a62:	11 50       	subi	r17, 0x01	; 1
    1a64:	f7 cf       	rjmp	.-18     	; 0x1a54 <vfprintf+0x636>
    1a66:	ca 94       	dec	r12
    1a68:	f3 01       	movw	r30, r6
    1a6a:	ec 0d       	add	r30, r12
    1a6c:	f1 1d       	adc	r31, r1
    1a6e:	80 81       	ld	r24, Z
    1a70:	b7 01       	movw	r22, r14
    1a72:	90 e0       	ldi	r25, 0x00	; 0
    1a74:	0e 94 b1 0e 	call	0x1d62	; 0x1d62 <fputc>
    1a78:	c1 10       	cpse	r12, r1
    1a7a:	f5 cf       	rjmp	.-22     	; 0x1a66 <vfprintf+0x648>
    1a7c:	15 c0       	rjmp	.+42     	; 0x1aa8 <vfprintf+0x68a>
    1a7e:	f4 e0       	ldi	r31, 0x04	; 4
    1a80:	f5 15       	cp	r31, r5
    1a82:	60 f5       	brcc	.+88     	; 0x1adc <vfprintf+0x6be>
    1a84:	84 e0       	ldi	r24, 0x04	; 4
    1a86:	58 1a       	sub	r5, r24
    1a88:	93 fe       	sbrs	r9, 3
    1a8a:	1f c0       	rjmp	.+62     	; 0x1aca <vfprintf+0x6ac>
    1a8c:	01 11       	cpse	r16, r1
    1a8e:	27 c0       	rjmp	.+78     	; 0x1ade <vfprintf+0x6c0>
    1a90:	2c 85       	ldd	r18, Y+12	; 0x0c
    1a92:	23 ff       	sbrs	r18, 3
    1a94:	2a c0       	rjmp	.+84     	; 0x1aea <vfprintf+0x6cc>
    1a96:	04 eb       	ldi	r16, 0xB4	; 180
    1a98:	10 e0       	ldi	r17, 0x00	; 0
    1a9a:	39 2d       	mov	r19, r9
    1a9c:	30 71       	andi	r19, 0x10	; 16
    1a9e:	93 2e       	mov	r9, r19
    1aa0:	f8 01       	movw	r30, r16
    1aa2:	84 91       	lpm	r24, Z
    1aa4:	81 11       	cpse	r24, r1
    1aa6:	24 c0       	rjmp	.+72     	; 0x1af0 <vfprintf+0x6d2>
    1aa8:	55 20       	and	r5, r5
    1aaa:	09 f4       	brne	.+2      	; 0x1aae <vfprintf+0x690>
    1aac:	e4 cc       	rjmp	.-1592   	; 0x1476 <vfprintf+0x58>
    1aae:	b7 01       	movw	r22, r14
    1ab0:	80 e2       	ldi	r24, 0x20	; 32
    1ab2:	90 e0       	ldi	r25, 0x00	; 0
    1ab4:	0e 94 b1 0e 	call	0x1d62	; 0x1d62 <fputc>
    1ab8:	5a 94       	dec	r5
    1aba:	f6 cf       	rjmp	.-20     	; 0x1aa8 <vfprintf+0x68a>
    1abc:	f7 01       	movw	r30, r14
    1abe:	86 81       	ldd	r24, Z+6	; 0x06
    1ac0:	97 81       	ldd	r25, Z+7	; 0x07
    1ac2:	26 c0       	rjmp	.+76     	; 0x1b10 <vfprintf+0x6f2>
    1ac4:	8f ef       	ldi	r24, 0xFF	; 255
    1ac6:	9f ef       	ldi	r25, 0xFF	; 255
    1ac8:	23 c0       	rjmp	.+70     	; 0x1b10 <vfprintf+0x6f2>
    1aca:	b7 01       	movw	r22, r14
    1acc:	80 e2       	ldi	r24, 0x20	; 32
    1ace:	90 e0       	ldi	r25, 0x00	; 0
    1ad0:	0e 94 b1 0e 	call	0x1d62	; 0x1d62 <fputc>
    1ad4:	5a 94       	dec	r5
    1ad6:	51 10       	cpse	r5, r1
    1ad8:	f8 cf       	rjmp	.-16     	; 0x1aca <vfprintf+0x6ac>
    1ada:	d8 cf       	rjmp	.-80     	; 0x1a8c <vfprintf+0x66e>
    1adc:	51 2c       	mov	r5, r1
    1ade:	b7 01       	movw	r22, r14
    1ae0:	80 2f       	mov	r24, r16
    1ae2:	90 e0       	ldi	r25, 0x00	; 0
    1ae4:	0e 94 b1 0e 	call	0x1d62	; 0x1d62 <fputc>
    1ae8:	d3 cf       	rjmp	.-90     	; 0x1a90 <vfprintf+0x672>
    1aea:	08 eb       	ldi	r16, 0xB8	; 184
    1aec:	10 e0       	ldi	r17, 0x00	; 0
    1aee:	d5 cf       	rjmp	.-86     	; 0x1a9a <vfprintf+0x67c>
    1af0:	91 10       	cpse	r9, r1
    1af2:	80 52       	subi	r24, 0x20	; 32
    1af4:	b7 01       	movw	r22, r14
    1af6:	90 e0       	ldi	r25, 0x00	; 0
    1af8:	0e 94 b1 0e 	call	0x1d62	; 0x1d62 <fputc>
    1afc:	0f 5f       	subi	r16, 0xFF	; 255
    1afe:	1f 4f       	sbci	r17, 0xFF	; 255
    1b00:	cf cf       	rjmp	.-98     	; 0x1aa0 <vfprintf+0x682>
    1b02:	23 e0       	ldi	r18, 0x03	; 3
    1b04:	25 15       	cp	r18, r5
    1b06:	10 f4       	brcc	.+4      	; 0x1b0c <vfprintf+0x6ee>
    1b08:	83 e0       	ldi	r24, 0x03	; 3
    1b0a:	bd cf       	rjmp	.-134    	; 0x1a86 <vfprintf+0x668>
    1b0c:	51 2c       	mov	r5, r1
    1b0e:	c0 cf       	rjmp	.-128    	; 0x1a90 <vfprintf+0x672>
    1b10:	60 96       	adiw	r28, 0x10	; 16
    1b12:	e2 e1       	ldi	r30, 0x12	; 18
    1b14:	0c 94 a8 0d 	jmp	0x1b50	; 0x1b50 <__epilogue_restores__>

00001b18 <__prologue_saves__>:
    1b18:	2f 92       	push	r2
    1b1a:	3f 92       	push	r3
    1b1c:	4f 92       	push	r4
    1b1e:	5f 92       	push	r5
    1b20:	6f 92       	push	r6
    1b22:	7f 92       	push	r7
    1b24:	8f 92       	push	r8
    1b26:	9f 92       	push	r9
    1b28:	af 92       	push	r10
    1b2a:	bf 92       	push	r11
    1b2c:	cf 92       	push	r12
    1b2e:	df 92       	push	r13
    1b30:	ef 92       	push	r14
    1b32:	ff 92       	push	r15
    1b34:	0f 93       	push	r16
    1b36:	1f 93       	push	r17
    1b38:	cf 93       	push	r28
    1b3a:	df 93       	push	r29
    1b3c:	cd b7       	in	r28, 0x3d	; 61
    1b3e:	de b7       	in	r29, 0x3e	; 62
    1b40:	ca 1b       	sub	r28, r26
    1b42:	db 0b       	sbc	r29, r27
    1b44:	0f b6       	in	r0, 0x3f	; 63
    1b46:	f8 94       	cli
    1b48:	de bf       	out	0x3e, r29	; 62
    1b4a:	0f be       	out	0x3f, r0	; 63
    1b4c:	cd bf       	out	0x3d, r28	; 61
    1b4e:	09 94       	ijmp

00001b50 <__epilogue_restores__>:
    1b50:	2a 88       	ldd	r2, Y+18	; 0x12
    1b52:	39 88       	ldd	r3, Y+17	; 0x11
    1b54:	48 88       	ldd	r4, Y+16	; 0x10
    1b56:	5f 84       	ldd	r5, Y+15	; 0x0f
    1b58:	6e 84       	ldd	r6, Y+14	; 0x0e
    1b5a:	7d 84       	ldd	r7, Y+13	; 0x0d
    1b5c:	8c 84       	ldd	r8, Y+12	; 0x0c
    1b5e:	9b 84       	ldd	r9, Y+11	; 0x0b
    1b60:	aa 84       	ldd	r10, Y+10	; 0x0a
    1b62:	b9 84       	ldd	r11, Y+9	; 0x09
    1b64:	c8 84       	ldd	r12, Y+8	; 0x08
    1b66:	df 80       	ldd	r13, Y+7	; 0x07
    1b68:	ee 80       	ldd	r14, Y+6	; 0x06
    1b6a:	fd 80       	ldd	r15, Y+5	; 0x05
    1b6c:	0c 81       	ldd	r16, Y+4	; 0x04
    1b6e:	1b 81       	ldd	r17, Y+3	; 0x03
    1b70:	aa 81       	ldd	r26, Y+2	; 0x02
    1b72:	b9 81       	ldd	r27, Y+1	; 0x01
    1b74:	ce 0f       	add	r28, r30
    1b76:	d1 1d       	adc	r29, r1
    1b78:	0f b6       	in	r0, 0x3f	; 63
    1b7a:	f8 94       	cli
    1b7c:	de bf       	out	0x3e, r29	; 62
    1b7e:	0f be       	out	0x3f, r0	; 63
    1b80:	cd bf       	out	0x3d, r28	; 61
    1b82:	ed 01       	movw	r28, r26
    1b84:	08 95       	ret

00001b86 <__ftoa_engine>:
    1b86:	28 30       	cpi	r18, 0x08	; 8
    1b88:	08 f0       	brcs	.+2      	; 0x1b8c <__ftoa_engine+0x6>
    1b8a:	27 e0       	ldi	r18, 0x07	; 7
    1b8c:	33 27       	eor	r19, r19
    1b8e:	da 01       	movw	r26, r20
    1b90:	99 0f       	add	r25, r25
    1b92:	31 1d       	adc	r19, r1
    1b94:	87 fd       	sbrc	r24, 7
    1b96:	91 60       	ori	r25, 0x01	; 1
    1b98:	00 96       	adiw	r24, 0x00	; 0
    1b9a:	61 05       	cpc	r22, r1
    1b9c:	71 05       	cpc	r23, r1
    1b9e:	39 f4       	brne	.+14     	; 0x1bae <__ftoa_engine+0x28>
    1ba0:	32 60       	ori	r19, 0x02	; 2
    1ba2:	2e 5f       	subi	r18, 0xFE	; 254
    1ba4:	3d 93       	st	X+, r19
    1ba6:	30 e3       	ldi	r19, 0x30	; 48
    1ba8:	2a 95       	dec	r18
    1baa:	e1 f7       	brne	.-8      	; 0x1ba4 <__ftoa_engine+0x1e>
    1bac:	08 95       	ret
    1bae:	9f 3f       	cpi	r25, 0xFF	; 255
    1bb0:	30 f0       	brcs	.+12     	; 0x1bbe <__ftoa_engine+0x38>
    1bb2:	80 38       	cpi	r24, 0x80	; 128
    1bb4:	71 05       	cpc	r23, r1
    1bb6:	61 05       	cpc	r22, r1
    1bb8:	09 f0       	breq	.+2      	; 0x1bbc <__ftoa_engine+0x36>
    1bba:	3c 5f       	subi	r19, 0xFC	; 252
    1bbc:	3c 5f       	subi	r19, 0xFC	; 252
    1bbe:	3d 93       	st	X+, r19
    1bc0:	91 30       	cpi	r25, 0x01	; 1
    1bc2:	08 f0       	brcs	.+2      	; 0x1bc6 <__ftoa_engine+0x40>
    1bc4:	80 68       	ori	r24, 0x80	; 128
    1bc6:	91 1d       	adc	r25, r1
    1bc8:	df 93       	push	r29
    1bca:	cf 93       	push	r28
    1bcc:	1f 93       	push	r17
    1bce:	0f 93       	push	r16
    1bd0:	ff 92       	push	r15
    1bd2:	ef 92       	push	r14
    1bd4:	19 2f       	mov	r17, r25
    1bd6:	98 7f       	andi	r25, 0xF8	; 248
    1bd8:	96 95       	lsr	r25
    1bda:	e9 2f       	mov	r30, r25
    1bdc:	96 95       	lsr	r25
    1bde:	96 95       	lsr	r25
    1be0:	e9 0f       	add	r30, r25
    1be2:	ff 27       	eor	r31, r31
    1be4:	ea 5e       	subi	r30, 0xEA	; 234
    1be6:	fe 4f       	sbci	r31, 0xFE	; 254
    1be8:	99 27       	eor	r25, r25
    1bea:	33 27       	eor	r19, r19
    1bec:	ee 24       	eor	r14, r14
    1bee:	ff 24       	eor	r15, r15
    1bf0:	a7 01       	movw	r20, r14
    1bf2:	e7 01       	movw	r28, r14
    1bf4:	05 90       	lpm	r0, Z+
    1bf6:	08 94       	sec
    1bf8:	07 94       	ror	r0
    1bfa:	28 f4       	brcc	.+10     	; 0x1c06 <__ftoa_engine+0x80>
    1bfc:	36 0f       	add	r19, r22
    1bfe:	e7 1e       	adc	r14, r23
    1c00:	f8 1e       	adc	r15, r24
    1c02:	49 1f       	adc	r20, r25
    1c04:	51 1d       	adc	r21, r1
    1c06:	66 0f       	add	r22, r22
    1c08:	77 1f       	adc	r23, r23
    1c0a:	88 1f       	adc	r24, r24
    1c0c:	99 1f       	adc	r25, r25
    1c0e:	06 94       	lsr	r0
    1c10:	a1 f7       	brne	.-24     	; 0x1bfa <__ftoa_engine+0x74>
    1c12:	05 90       	lpm	r0, Z+
    1c14:	07 94       	ror	r0
    1c16:	28 f4       	brcc	.+10     	; 0x1c22 <__ftoa_engine+0x9c>
    1c18:	e7 0e       	add	r14, r23
    1c1a:	f8 1e       	adc	r15, r24
    1c1c:	49 1f       	adc	r20, r25
    1c1e:	56 1f       	adc	r21, r22
    1c20:	c1 1d       	adc	r28, r1
    1c22:	77 0f       	add	r23, r23
    1c24:	88 1f       	adc	r24, r24
    1c26:	99 1f       	adc	r25, r25
    1c28:	66 1f       	adc	r22, r22
    1c2a:	06 94       	lsr	r0
    1c2c:	a1 f7       	brne	.-24     	; 0x1c16 <__ftoa_engine+0x90>
    1c2e:	05 90       	lpm	r0, Z+
    1c30:	07 94       	ror	r0
    1c32:	28 f4       	brcc	.+10     	; 0x1c3e <__ftoa_engine+0xb8>
    1c34:	f8 0e       	add	r15, r24
    1c36:	49 1f       	adc	r20, r25
    1c38:	56 1f       	adc	r21, r22
    1c3a:	c7 1f       	adc	r28, r23
    1c3c:	d1 1d       	adc	r29, r1
    1c3e:	88 0f       	add	r24, r24
    1c40:	99 1f       	adc	r25, r25
    1c42:	66 1f       	adc	r22, r22
    1c44:	77 1f       	adc	r23, r23
    1c46:	06 94       	lsr	r0
    1c48:	a1 f7       	brne	.-24     	; 0x1c32 <__ftoa_engine+0xac>
    1c4a:	05 90       	lpm	r0, Z+
    1c4c:	07 94       	ror	r0
    1c4e:	20 f4       	brcc	.+8      	; 0x1c58 <__ftoa_engine+0xd2>
    1c50:	49 0f       	add	r20, r25
    1c52:	56 1f       	adc	r21, r22
    1c54:	c7 1f       	adc	r28, r23
    1c56:	d8 1f       	adc	r29, r24
    1c58:	99 0f       	add	r25, r25
    1c5a:	66 1f       	adc	r22, r22
    1c5c:	77 1f       	adc	r23, r23
    1c5e:	88 1f       	adc	r24, r24
    1c60:	06 94       	lsr	r0
    1c62:	a9 f7       	brne	.-22     	; 0x1c4e <__ftoa_engine+0xc8>
    1c64:	84 91       	lpm	r24, Z
    1c66:	10 95       	com	r17
    1c68:	17 70       	andi	r17, 0x07	; 7
    1c6a:	41 f0       	breq	.+16     	; 0x1c7c <__ftoa_engine+0xf6>
    1c6c:	d6 95       	lsr	r29
    1c6e:	c7 95       	ror	r28
    1c70:	57 95       	ror	r21
    1c72:	47 95       	ror	r20
    1c74:	f7 94       	ror	r15
    1c76:	e7 94       	ror	r14
    1c78:	1a 95       	dec	r17
    1c7a:	c1 f7       	brne	.-16     	; 0x1c6c <__ftoa_engine+0xe6>
    1c7c:	ec eb       	ldi	r30, 0xBC	; 188
    1c7e:	f0 e0       	ldi	r31, 0x00	; 0
    1c80:	68 94       	set
    1c82:	15 90       	lpm	r1, Z+
    1c84:	15 91       	lpm	r17, Z+
    1c86:	35 91       	lpm	r19, Z+
    1c88:	65 91       	lpm	r22, Z+
    1c8a:	95 91       	lpm	r25, Z+
    1c8c:	05 90       	lpm	r0, Z+
    1c8e:	7f e2       	ldi	r23, 0x2F	; 47
    1c90:	73 95       	inc	r23
    1c92:	e1 18       	sub	r14, r1
    1c94:	f1 0a       	sbc	r15, r17
    1c96:	43 0b       	sbc	r20, r19
    1c98:	56 0b       	sbc	r21, r22
    1c9a:	c9 0b       	sbc	r28, r25
    1c9c:	d0 09       	sbc	r29, r0
    1c9e:	c0 f7       	brcc	.-16     	; 0x1c90 <__ftoa_engine+0x10a>
    1ca0:	e1 0c       	add	r14, r1
    1ca2:	f1 1e       	adc	r15, r17
    1ca4:	43 1f       	adc	r20, r19
    1ca6:	56 1f       	adc	r21, r22
    1ca8:	c9 1f       	adc	r28, r25
    1caa:	d0 1d       	adc	r29, r0
    1cac:	7e f4       	brtc	.+30     	; 0x1ccc <__ftoa_engine+0x146>
    1cae:	70 33       	cpi	r23, 0x30	; 48
    1cb0:	11 f4       	brne	.+4      	; 0x1cb6 <__ftoa_engine+0x130>
    1cb2:	8a 95       	dec	r24
    1cb4:	e6 cf       	rjmp	.-52     	; 0x1c82 <__ftoa_engine+0xfc>
    1cb6:	e8 94       	clt
    1cb8:	01 50       	subi	r16, 0x01	; 1
    1cba:	30 f0       	brcs	.+12     	; 0x1cc8 <__ftoa_engine+0x142>
    1cbc:	08 0f       	add	r16, r24
    1cbe:	0a f4       	brpl	.+2      	; 0x1cc2 <__ftoa_engine+0x13c>
    1cc0:	00 27       	eor	r16, r16
    1cc2:	02 17       	cp	r16, r18
    1cc4:	08 f4       	brcc	.+2      	; 0x1cc8 <__ftoa_engine+0x142>
    1cc6:	20 2f       	mov	r18, r16
    1cc8:	23 95       	inc	r18
    1cca:	02 2f       	mov	r16, r18
    1ccc:	7a 33       	cpi	r23, 0x3A	; 58
    1cce:	28 f0       	brcs	.+10     	; 0x1cda <__ftoa_engine+0x154>
    1cd0:	79 e3       	ldi	r23, 0x39	; 57
    1cd2:	7d 93       	st	X+, r23
    1cd4:	2a 95       	dec	r18
    1cd6:	e9 f7       	brne	.-6      	; 0x1cd2 <__ftoa_engine+0x14c>
    1cd8:	10 c0       	rjmp	.+32     	; 0x1cfa <__ftoa_engine+0x174>
    1cda:	7d 93       	st	X+, r23
    1cdc:	2a 95       	dec	r18
    1cde:	89 f6       	brne	.-94     	; 0x1c82 <__ftoa_engine+0xfc>
    1ce0:	06 94       	lsr	r0
    1ce2:	97 95       	ror	r25
    1ce4:	67 95       	ror	r22
    1ce6:	37 95       	ror	r19
    1ce8:	17 95       	ror	r17
    1cea:	17 94       	ror	r1
    1cec:	e1 18       	sub	r14, r1
    1cee:	f1 0a       	sbc	r15, r17
    1cf0:	43 0b       	sbc	r20, r19
    1cf2:	56 0b       	sbc	r21, r22
    1cf4:	c9 0b       	sbc	r28, r25
    1cf6:	d0 09       	sbc	r29, r0
    1cf8:	98 f0       	brcs	.+38     	; 0x1d20 <__ftoa_engine+0x19a>
    1cfa:	23 95       	inc	r18
    1cfc:	7e 91       	ld	r23, -X
    1cfe:	73 95       	inc	r23
    1d00:	7a 33       	cpi	r23, 0x3A	; 58
    1d02:	08 f0       	brcs	.+2      	; 0x1d06 <__ftoa_engine+0x180>
    1d04:	70 e3       	ldi	r23, 0x30	; 48
    1d06:	7c 93       	st	X, r23
    1d08:	20 13       	cpse	r18, r16
    1d0a:	b8 f7       	brcc	.-18     	; 0x1cfa <__ftoa_engine+0x174>
    1d0c:	7e 91       	ld	r23, -X
    1d0e:	70 61       	ori	r23, 0x10	; 16
    1d10:	7d 93       	st	X+, r23
    1d12:	30 f0       	brcs	.+12     	; 0x1d20 <__ftoa_engine+0x19a>
    1d14:	83 95       	inc	r24
    1d16:	71 e3       	ldi	r23, 0x31	; 49
    1d18:	7d 93       	st	X+, r23
    1d1a:	70 e3       	ldi	r23, 0x30	; 48
    1d1c:	2a 95       	dec	r18
    1d1e:	e1 f7       	brne	.-8      	; 0x1d18 <__ftoa_engine+0x192>
    1d20:	11 24       	eor	r1, r1
    1d22:	ef 90       	pop	r14
    1d24:	ff 90       	pop	r15
    1d26:	0f 91       	pop	r16
    1d28:	1f 91       	pop	r17
    1d2a:	cf 91       	pop	r28
    1d2c:	df 91       	pop	r29
    1d2e:	99 27       	eor	r25, r25
    1d30:	87 fd       	sbrc	r24, 7
    1d32:	90 95       	com	r25
    1d34:	08 95       	ret

00001d36 <strnlen_P>:
    1d36:	fc 01       	movw	r30, r24
    1d38:	05 90       	lpm	r0, Z+
    1d3a:	61 50       	subi	r22, 0x01	; 1
    1d3c:	70 40       	sbci	r23, 0x00	; 0
    1d3e:	01 10       	cpse	r0, r1
    1d40:	d8 f7       	brcc	.-10     	; 0x1d38 <strnlen_P+0x2>
    1d42:	80 95       	com	r24
    1d44:	90 95       	com	r25
    1d46:	8e 0f       	add	r24, r30
    1d48:	9f 1f       	adc	r25, r31
    1d4a:	08 95       	ret

00001d4c <strnlen>:
    1d4c:	fc 01       	movw	r30, r24
    1d4e:	61 50       	subi	r22, 0x01	; 1
    1d50:	70 40       	sbci	r23, 0x00	; 0
    1d52:	01 90       	ld	r0, Z+
    1d54:	01 10       	cpse	r0, r1
    1d56:	d8 f7       	brcc	.-10     	; 0x1d4e <strnlen+0x2>
    1d58:	80 95       	com	r24
    1d5a:	90 95       	com	r25
    1d5c:	8e 0f       	add	r24, r30
    1d5e:	9f 1f       	adc	r25, r31
    1d60:	08 95       	ret

00001d62 <fputc>:
    1d62:	0f 93       	push	r16
    1d64:	1f 93       	push	r17
    1d66:	cf 93       	push	r28
    1d68:	df 93       	push	r29
    1d6a:	fb 01       	movw	r30, r22
    1d6c:	23 81       	ldd	r18, Z+3	; 0x03
    1d6e:	21 fd       	sbrc	r18, 1
    1d70:	03 c0       	rjmp	.+6      	; 0x1d78 <fputc+0x16>
    1d72:	8f ef       	ldi	r24, 0xFF	; 255
    1d74:	9f ef       	ldi	r25, 0xFF	; 255
    1d76:	2c c0       	rjmp	.+88     	; 0x1dd0 <fputc+0x6e>
    1d78:	22 ff       	sbrs	r18, 2
    1d7a:	16 c0       	rjmp	.+44     	; 0x1da8 <fputc+0x46>
    1d7c:	46 81       	ldd	r20, Z+6	; 0x06
    1d7e:	57 81       	ldd	r21, Z+7	; 0x07
    1d80:	24 81       	ldd	r18, Z+4	; 0x04
    1d82:	35 81       	ldd	r19, Z+5	; 0x05
    1d84:	42 17       	cp	r20, r18
    1d86:	53 07       	cpc	r21, r19
    1d88:	44 f4       	brge	.+16     	; 0x1d9a <fputc+0x38>
    1d8a:	a0 81       	ld	r26, Z
    1d8c:	b1 81       	ldd	r27, Z+1	; 0x01
    1d8e:	9d 01       	movw	r18, r26
    1d90:	2f 5f       	subi	r18, 0xFF	; 255
    1d92:	3f 4f       	sbci	r19, 0xFF	; 255
    1d94:	31 83       	std	Z+1, r19	; 0x01
    1d96:	20 83       	st	Z, r18
    1d98:	8c 93       	st	X, r24
    1d9a:	26 81       	ldd	r18, Z+6	; 0x06
    1d9c:	37 81       	ldd	r19, Z+7	; 0x07
    1d9e:	2f 5f       	subi	r18, 0xFF	; 255
    1da0:	3f 4f       	sbci	r19, 0xFF	; 255
    1da2:	37 83       	std	Z+7, r19	; 0x07
    1da4:	26 83       	std	Z+6, r18	; 0x06
    1da6:	14 c0       	rjmp	.+40     	; 0x1dd0 <fputc+0x6e>
    1da8:	8b 01       	movw	r16, r22
    1daa:	ec 01       	movw	r28, r24
    1dac:	fb 01       	movw	r30, r22
    1dae:	00 84       	ldd	r0, Z+8	; 0x08
    1db0:	f1 85       	ldd	r31, Z+9	; 0x09
    1db2:	e0 2d       	mov	r30, r0
    1db4:	09 95       	icall
    1db6:	89 2b       	or	r24, r25
    1db8:	e1 f6       	brne	.-72     	; 0x1d72 <fputc+0x10>
    1dba:	d8 01       	movw	r26, r16
    1dbc:	16 96       	adiw	r26, 0x06	; 6
    1dbe:	8d 91       	ld	r24, X+
    1dc0:	9c 91       	ld	r25, X
    1dc2:	17 97       	sbiw	r26, 0x07	; 7
    1dc4:	01 96       	adiw	r24, 0x01	; 1
    1dc6:	17 96       	adiw	r26, 0x07	; 7
    1dc8:	9c 93       	st	X, r25
    1dca:	8e 93       	st	-X, r24
    1dcc:	16 97       	sbiw	r26, 0x06	; 6
    1dce:	ce 01       	movw	r24, r28
    1dd0:	df 91       	pop	r29
    1dd2:	cf 91       	pop	r28
    1dd4:	1f 91       	pop	r17
    1dd6:	0f 91       	pop	r16
    1dd8:	08 95       	ret

00001dda <printf>:
    1dda:	a0 e0       	ldi	r26, 0x00	; 0
    1ddc:	b0 e0       	ldi	r27, 0x00	; 0
    1dde:	e3 ef       	ldi	r30, 0xF3	; 243
    1de0:	fe e0       	ldi	r31, 0x0E	; 14
    1de2:	0c 94 9c 0d 	jmp	0x1b38	; 0x1b38 <__prologue_saves__+0x20>
    1de6:	ae 01       	movw	r20, r28
    1de8:	4b 5f       	subi	r20, 0xFB	; 251
    1dea:	5f 4f       	sbci	r21, 0xFF	; 255
    1dec:	fa 01       	movw	r30, r20
    1dee:	61 91       	ld	r22, Z+
    1df0:	71 91       	ld	r23, Z+
    1df2:	af 01       	movw	r20, r30
    1df4:	80 91 d1 03 	lds	r24, 0x03D1	; 0x8003d1 <__iob+0x2>
    1df8:	90 91 d2 03 	lds	r25, 0x03D2	; 0x8003d2 <__iob+0x3>
    1dfc:	0e 94 0f 0a 	call	0x141e	; 0x141e <vfprintf>
    1e00:	e2 e0       	ldi	r30, 0x02	; 2
    1e02:	0c 94 b8 0d 	jmp	0x1b70	; 0x1b70 <__epilogue_restores__+0x20>

00001e06 <putchar>:
    1e06:	60 91 d1 03 	lds	r22, 0x03D1	; 0x8003d1 <__iob+0x2>
    1e0a:	70 91 d2 03 	lds	r23, 0x03D2	; 0x8003d2 <__iob+0x3>
    1e0e:	0e 94 b1 0e 	call	0x1d62	; 0x1d62 <fputc>
    1e12:	08 95       	ret

00001e14 <puts>:
    1e14:	0f 93       	push	r16
    1e16:	1f 93       	push	r17
    1e18:	cf 93       	push	r28
    1e1a:	df 93       	push	r29
    1e1c:	e0 91 d1 03 	lds	r30, 0x03D1	; 0x8003d1 <__iob+0x2>
    1e20:	f0 91 d2 03 	lds	r31, 0x03D2	; 0x8003d2 <__iob+0x3>
    1e24:	23 81       	ldd	r18, Z+3	; 0x03
    1e26:	21 ff       	sbrs	r18, 1
    1e28:	1b c0       	rjmp	.+54     	; 0x1e60 <puts+0x4c>
    1e2a:	8c 01       	movw	r16, r24
    1e2c:	d0 e0       	ldi	r29, 0x00	; 0
    1e2e:	c0 e0       	ldi	r28, 0x00	; 0
    1e30:	f8 01       	movw	r30, r16
    1e32:	81 91       	ld	r24, Z+
    1e34:	8f 01       	movw	r16, r30
    1e36:	60 91 d1 03 	lds	r22, 0x03D1	; 0x8003d1 <__iob+0x2>
    1e3a:	70 91 d2 03 	lds	r23, 0x03D2	; 0x8003d2 <__iob+0x3>
    1e3e:	db 01       	movw	r26, r22
    1e40:	18 96       	adiw	r26, 0x08	; 8
    1e42:	ed 91       	ld	r30, X+
    1e44:	fc 91       	ld	r31, X
    1e46:	19 97       	sbiw	r26, 0x09	; 9
    1e48:	88 23       	and	r24, r24
    1e4a:	31 f0       	breq	.+12     	; 0x1e58 <puts+0x44>
    1e4c:	09 95       	icall
    1e4e:	89 2b       	or	r24, r25
    1e50:	79 f3       	breq	.-34     	; 0x1e30 <puts+0x1c>
    1e52:	df ef       	ldi	r29, 0xFF	; 255
    1e54:	cf ef       	ldi	r28, 0xFF	; 255
    1e56:	ec cf       	rjmp	.-40     	; 0x1e30 <puts+0x1c>
    1e58:	8a e0       	ldi	r24, 0x0A	; 10
    1e5a:	09 95       	icall
    1e5c:	89 2b       	or	r24, r25
    1e5e:	19 f0       	breq	.+6      	; 0x1e66 <puts+0x52>
    1e60:	8f ef       	ldi	r24, 0xFF	; 255
    1e62:	9f ef       	ldi	r25, 0xFF	; 255
    1e64:	02 c0       	rjmp	.+4      	; 0x1e6a <puts+0x56>
    1e66:	8d 2f       	mov	r24, r29
    1e68:	9c 2f       	mov	r25, r28
    1e6a:	df 91       	pop	r29
    1e6c:	cf 91       	pop	r28
    1e6e:	1f 91       	pop	r17
    1e70:	0f 91       	pop	r16
    1e72:	08 95       	ret

00001e74 <sprintf>:
    1e74:	ae e0       	ldi	r26, 0x0E	; 14
    1e76:	b0 e0       	ldi	r27, 0x00	; 0
    1e78:	e0 e4       	ldi	r30, 0x40	; 64
    1e7a:	ff e0       	ldi	r31, 0x0F	; 15
    1e7c:	0c 94 9a 0d 	jmp	0x1b34	; 0x1b34 <__prologue_saves__+0x1c>
    1e80:	0d 89       	ldd	r16, Y+21	; 0x15
    1e82:	1e 89       	ldd	r17, Y+22	; 0x16
    1e84:	86 e0       	ldi	r24, 0x06	; 6
    1e86:	8c 83       	std	Y+4, r24	; 0x04
    1e88:	1a 83       	std	Y+2, r17	; 0x02
    1e8a:	09 83       	std	Y+1, r16	; 0x01
    1e8c:	8f ef       	ldi	r24, 0xFF	; 255
    1e8e:	9f e7       	ldi	r25, 0x7F	; 127
    1e90:	9e 83       	std	Y+6, r25	; 0x06
    1e92:	8d 83       	std	Y+5, r24	; 0x05
    1e94:	ae 01       	movw	r20, r28
    1e96:	47 5e       	subi	r20, 0xE7	; 231
    1e98:	5f 4f       	sbci	r21, 0xFF	; 255
    1e9a:	6f 89       	ldd	r22, Y+23	; 0x17
    1e9c:	78 8d       	ldd	r23, Y+24	; 0x18
    1e9e:	ce 01       	movw	r24, r28
    1ea0:	01 96       	adiw	r24, 0x01	; 1
    1ea2:	0e 94 0f 0a 	call	0x141e	; 0x141e <vfprintf>
    1ea6:	ef 81       	ldd	r30, Y+7	; 0x07
    1ea8:	f8 85       	ldd	r31, Y+8	; 0x08
    1eaa:	e0 0f       	add	r30, r16
    1eac:	f1 1f       	adc	r31, r17
    1eae:	10 82       	st	Z, r1
    1eb0:	2e 96       	adiw	r28, 0x0e	; 14
    1eb2:	e4 e0       	ldi	r30, 0x04	; 4
    1eb4:	0c 94 b6 0d 	jmp	0x1b6c	; 0x1b6c <__epilogue_restores__+0x1c>

00001eb8 <__ultoa_invert>:
    1eb8:	fa 01       	movw	r30, r20
    1eba:	aa 27       	eor	r26, r26
    1ebc:	28 30       	cpi	r18, 0x08	; 8
    1ebe:	51 f1       	breq	.+84     	; 0x1f14 <__ultoa_invert+0x5c>
    1ec0:	20 31       	cpi	r18, 0x10	; 16
    1ec2:	81 f1       	breq	.+96     	; 0x1f24 <__ultoa_invert+0x6c>
    1ec4:	e8 94       	clt
    1ec6:	6f 93       	push	r22
    1ec8:	6e 7f       	andi	r22, 0xFE	; 254
    1eca:	6e 5f       	subi	r22, 0xFE	; 254
    1ecc:	7f 4f       	sbci	r23, 0xFF	; 255
    1ece:	8f 4f       	sbci	r24, 0xFF	; 255
    1ed0:	9f 4f       	sbci	r25, 0xFF	; 255
    1ed2:	af 4f       	sbci	r26, 0xFF	; 255
    1ed4:	b1 e0       	ldi	r27, 0x01	; 1
    1ed6:	3e d0       	rcall	.+124    	; 0x1f54 <__ultoa_invert+0x9c>
    1ed8:	b4 e0       	ldi	r27, 0x04	; 4
    1eda:	3c d0       	rcall	.+120    	; 0x1f54 <__ultoa_invert+0x9c>
    1edc:	67 0f       	add	r22, r23
    1ede:	78 1f       	adc	r23, r24
    1ee0:	89 1f       	adc	r24, r25
    1ee2:	9a 1f       	adc	r25, r26
    1ee4:	a1 1d       	adc	r26, r1
    1ee6:	68 0f       	add	r22, r24
    1ee8:	79 1f       	adc	r23, r25
    1eea:	8a 1f       	adc	r24, r26
    1eec:	91 1d       	adc	r25, r1
    1eee:	a1 1d       	adc	r26, r1
    1ef0:	6a 0f       	add	r22, r26
    1ef2:	71 1d       	adc	r23, r1
    1ef4:	81 1d       	adc	r24, r1
    1ef6:	91 1d       	adc	r25, r1
    1ef8:	a1 1d       	adc	r26, r1
    1efa:	20 d0       	rcall	.+64     	; 0x1f3c <__ultoa_invert+0x84>
    1efc:	09 f4       	brne	.+2      	; 0x1f00 <__ultoa_invert+0x48>
    1efe:	68 94       	set
    1f00:	3f 91       	pop	r19
    1f02:	2a e0       	ldi	r18, 0x0A	; 10
    1f04:	26 9f       	mul	r18, r22
    1f06:	11 24       	eor	r1, r1
    1f08:	30 19       	sub	r19, r0
    1f0a:	30 5d       	subi	r19, 0xD0	; 208
    1f0c:	31 93       	st	Z+, r19
    1f0e:	de f6       	brtc	.-74     	; 0x1ec6 <__ultoa_invert+0xe>
    1f10:	cf 01       	movw	r24, r30
    1f12:	08 95       	ret
    1f14:	46 2f       	mov	r20, r22
    1f16:	47 70       	andi	r20, 0x07	; 7
    1f18:	40 5d       	subi	r20, 0xD0	; 208
    1f1a:	41 93       	st	Z+, r20
    1f1c:	b3 e0       	ldi	r27, 0x03	; 3
    1f1e:	0f d0       	rcall	.+30     	; 0x1f3e <__ultoa_invert+0x86>
    1f20:	c9 f7       	brne	.-14     	; 0x1f14 <__ultoa_invert+0x5c>
    1f22:	f6 cf       	rjmp	.-20     	; 0x1f10 <__ultoa_invert+0x58>
    1f24:	46 2f       	mov	r20, r22
    1f26:	4f 70       	andi	r20, 0x0F	; 15
    1f28:	40 5d       	subi	r20, 0xD0	; 208
    1f2a:	4a 33       	cpi	r20, 0x3A	; 58
    1f2c:	18 f0       	brcs	.+6      	; 0x1f34 <__ultoa_invert+0x7c>
    1f2e:	49 5d       	subi	r20, 0xD9	; 217
    1f30:	31 fd       	sbrc	r19, 1
    1f32:	40 52       	subi	r20, 0x20	; 32
    1f34:	41 93       	st	Z+, r20
    1f36:	02 d0       	rcall	.+4      	; 0x1f3c <__ultoa_invert+0x84>
    1f38:	a9 f7       	brne	.-22     	; 0x1f24 <__ultoa_invert+0x6c>
    1f3a:	ea cf       	rjmp	.-44     	; 0x1f10 <__ultoa_invert+0x58>
    1f3c:	b4 e0       	ldi	r27, 0x04	; 4
    1f3e:	a6 95       	lsr	r26
    1f40:	97 95       	ror	r25
    1f42:	87 95       	ror	r24
    1f44:	77 95       	ror	r23
    1f46:	67 95       	ror	r22
    1f48:	ba 95       	dec	r27
    1f4a:	c9 f7       	brne	.-14     	; 0x1f3e <__ultoa_invert+0x86>
    1f4c:	00 97       	sbiw	r24, 0x00	; 0
    1f4e:	61 05       	cpc	r22, r1
    1f50:	71 05       	cpc	r23, r1
    1f52:	08 95       	ret
    1f54:	9b 01       	movw	r18, r22
    1f56:	ac 01       	movw	r20, r24
    1f58:	0a 2e       	mov	r0, r26
    1f5a:	06 94       	lsr	r0
    1f5c:	57 95       	ror	r21
    1f5e:	47 95       	ror	r20
    1f60:	37 95       	ror	r19
    1f62:	27 95       	ror	r18
    1f64:	ba 95       	dec	r27
    1f66:	c9 f7       	brne	.-14     	; 0x1f5a <__ultoa_invert+0xa2>
    1f68:	62 0f       	add	r22, r18
    1f6a:	73 1f       	adc	r23, r19
    1f6c:	84 1f       	adc	r24, r20
    1f6e:	95 1f       	adc	r25, r21
    1f70:	a0 1d       	adc	r26, r0
    1f72:	08 95       	ret

00001f74 <_exit>:
    1f74:	f8 94       	cli

00001f76 <__stop_program>:
    1f76:	ff cf       	rjmp	.-2      	; 0x1f76 <__stop_program>
