
Senior Design Sensors.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001e6  00800100  00001b9a  00001c2e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001b9a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  008002e6  008002e6  00001e14  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001e14  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001e70  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001b0  00000000  00000000  00001eb0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000026d0  00000000  00000000  00002060  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000f58  00000000  00000000  00004730  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000f91  00000000  00000000  00005688  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000005ec  00000000  00000000  0000661c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000aff  00000000  00000000  00006c08  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001fe1  00000000  00000000  00007707  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000188  00000000  00000000  000096e8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 db 00 	jmp	0x1b6	; 0x1b6 <__ctors_end>
       4:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
       8:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
       c:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
      10:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
      14:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
      18:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
      1c:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
      20:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
      24:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
      28:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
      2c:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
      30:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
      34:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
      38:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
      3c:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
      40:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
      44:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
      48:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
      4c:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
      50:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
      54:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
      58:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
      5c:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
      60:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
      64:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
      68:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
      6c:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
      70:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
      74:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
      78:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
      7c:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
      80:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
      84:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
      88:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
      8c:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
      90:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
      94:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
      98:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
      9c:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
      a0:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
      a4:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
      a8:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
      ac:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
      b0:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>

000000b4 <__trampolines_end>:
      b4:	6e 61       	ori	r22, 0x1E	; 30
      b6:	6e 00       	.word	0x006e	; ????

000000b8 <__c.2332>:
      b8:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
      c8:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
      d8:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
      e8:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
      f8:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     108:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     118:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     128:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     138:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     148:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     158:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     168:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     178:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     188:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     198:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     1a8:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

000001b6 <__ctors_end>:
     1b6:	11 24       	eor	r1, r1
     1b8:	1f be       	out	0x3f, r1	; 63
     1ba:	cf ef       	ldi	r28, 0xFF	; 255
     1bc:	d8 e0       	ldi	r29, 0x08	; 8
     1be:	de bf       	out	0x3e, r29	; 62
     1c0:	cd bf       	out	0x3d, r28	; 61

000001c2 <__do_copy_data>:
     1c2:	12 e0       	ldi	r17, 0x02	; 2
     1c4:	a0 e0       	ldi	r26, 0x00	; 0
     1c6:	b1 e0       	ldi	r27, 0x01	; 1
     1c8:	ea e9       	ldi	r30, 0x9A	; 154
     1ca:	fb e1       	ldi	r31, 0x1B	; 27
     1cc:	02 c0       	rjmp	.+4      	; 0x1d2 <__do_copy_data+0x10>
     1ce:	05 90       	lpm	r0, Z+
     1d0:	0d 92       	st	X+, r0
     1d2:	a6 3e       	cpi	r26, 0xE6	; 230
     1d4:	b1 07       	cpc	r27, r17
     1d6:	d9 f7       	brne	.-10     	; 0x1ce <__do_copy_data+0xc>

000001d8 <__do_clear_bss>:
     1d8:	22 e0       	ldi	r18, 0x02	; 2
     1da:	a6 ee       	ldi	r26, 0xE6	; 230
     1dc:	b2 e0       	ldi	r27, 0x02	; 2
     1de:	01 c0       	rjmp	.+2      	; 0x1e2 <.do_clear_bss_start>

000001e0 <.do_clear_bss_loop>:
     1e0:	1d 92       	st	X+, r1

000001e2 <.do_clear_bss_start>:
     1e2:	ac 3e       	cpi	r26, 0xEC	; 236
     1e4:	b2 07       	cpc	r27, r18
     1e6:	e1 f7       	brne	.-8      	; 0x1e0 <.do_clear_bss_loop>
     1e8:	0e 94 14 01 	call	0x228	; 0x228 <main>
     1ec:	0c 94 cb 0d 	jmp	0x1b96	; 0x1b96 <_exit>

000001f0 <__bad_interrupt>:
     1f0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001f4 <uart_putchar>:
	while (!( UCSR0A & (1<<UDRE0))); // wait while register is free
	UDR0 = data;                     // load data in the register
}
// Redirect printf to UART
int uart_putchar(char c, FILE *stream) {
	while (!(UCSR0A & (1 << UDRE0))) {
     1f4:	e0 ec       	ldi	r30, 0xC0	; 192
     1f6:	f0 e0       	ldi	r31, 0x00	; 0
     1f8:	90 81       	ld	r25, Z
     1fa:	95 ff       	sbrs	r25, 5
     1fc:	fd cf       	rjmp	.-6      	; 0x1f8 <uart_putchar+0x4>
		;  // Wait until the transmit buffer is empty
	}
	UDR0 = c;  // Send the character
     1fe:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
	return 0;  // Return 0 to indicate success
}
     202:	80 e0       	ldi	r24, 0x00	; 0
     204:	90 e0       	ldi	r25, 0x00	; 0
     206:	08 95       	ret

00000208 <uart_init>:
    return 0;
}

void uart_init (void)
{
	UBRR0H = (BAUDRATE>>8);        // shift the register right by 8 bits
     208:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
	UBRR0L = BAUDRATE;             // set baud rate
     20c:	87 e6       	ldi	r24, 0x67	; 103
     20e:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
	UCSR0B|= (1<<TXEN0)|(1<<RXEN0);  // enable receiver and transmitter
     212:	e1 ec       	ldi	r30, 0xC1	; 193
     214:	f0 e0       	ldi	r31, 0x00	; 0
     216:	80 81       	ld	r24, Z
     218:	88 61       	ori	r24, 0x18	; 24
     21a:	80 83       	st	Z, r24
	UCSR0C|= (1<<UCSZ00)|(1<<UCSZ01);   // 8bit data format
     21c:	e2 ec       	ldi	r30, 0xC2	; 194
     21e:	f0 e0       	ldi	r31, 0x00	; 0
     220:	80 81       	ld	r24, Z
     222:	86 60       	ori	r24, 0x06	; 6
     224:	80 83       	st	Z, r24
     226:	08 95       	ret

00000228 <main>:
void init_printf(void);

FILE uart_output = FDEV_SETUP_STREAM(uart_putchar, NULL, _FDEV_SETUP_WRITE);

int main(void)
{
     228:	cf 93       	push	r28
     22a:	df 93       	push	r29
     22c:	cd b7       	in	r28, 0x3d	; 61
     22e:	de b7       	in	r29, 0x3e	; 62
     230:	ca 54       	subi	r28, 0x4A	; 74
     232:	d1 09       	sbc	r29, r1
     234:	0f b6       	in	r0, 0x3f	; 63
     236:	f8 94       	cli
     238:	de bf       	out	0x3e, r29	; 62
     23a:	0f be       	out	0x3f, r0	; 63
     23c:	cd bf       	out	0x3d, r28	; 61
	uart_init();  // Initialize UART
     23e:	0e 94 04 01 	call	0x208	; 0x208 <uart_init>
	UDR0 = c;  // Send the character
	return 0;  // Return 0 to indicate success
}
// Initialize printf for UART
void init_printf(void) {
	stdout = &uart_output;  // Link stdout to uart_output
     242:	80 e0       	ldi	r24, 0x00	; 0
     244:	91 e0       	ldi	r25, 0x01	; 1
     246:	90 93 e9 02 	sts	0x02E9, r25	; 0x8002e9 <__data_end+0x3>
     24a:	80 93 e8 02 	sts	0x02E8, r24	; 0x8002e8 <__data_end+0x2>

	struct sps30_measurement m;
    int16_t ret;

    /* Initialize I2C bus */
    sensirion_i2c_init();
     24e:	0e 94 cf 04 	call	0x99e	; 0x99e <sensirion_i2c_init>

    /* Busy loop for initialization, because the main loop does not work without
     * a sensor.
     */
    while (sps30_probe() != 0) {
     252:	0a c0       	rjmp	.+20     	; 0x268 <main+0x40>
        printf("SPS sensor probing failed\n");
     254:	8e e0       	ldi	r24, 0x0E	; 14
     256:	91 e0       	ldi	r25, 0x01	; 1
     258:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <puts>
        sensirion_sleep_usec(1000000); /* wait 1s */
     25c:	60 e4       	ldi	r22, 0x40	; 64
     25e:	72 e4       	ldi	r23, 0x42	; 66
     260:	8f e0       	ldi	r24, 0x0F	; 15
     262:	90 e0       	ldi	r25, 0x00	; 0
     264:	0e 94 d5 04 	call	0x9aa	; 0x9aa <sensirion_sleep_usec>
    sensirion_i2c_init();

    /* Busy loop for initialization, because the main loop does not work without
     * a sensor.
     */
    while (sps30_probe() != 0) {
     268:	0e 94 b6 04 	call	0x96c	; 0x96c <sps30_probe>
     26c:	89 2b       	or	r24, r25
     26e:	91 f7       	brne	.-28     	; 0x254 <main+0x2c>
        printf("SPS sensor probing failed\n");
        sensirion_sleep_usec(1000000); /* wait 1s */
    }
    printf("SPS sensor probing successful\n");
     270:	88 e2       	ldi	r24, 0x28	; 40
     272:	91 e0       	ldi	r25, 0x01	; 1
     274:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <puts>

    uint8_t fw_major;
    uint8_t fw_minor;
    ret = sps30_read_firmware_version(&fw_major, &fw_minor);
     278:	be 01       	movw	r22, r28
     27a:	66 5d       	subi	r22, 0xD6	; 214
     27c:	7f 4f       	sbci	r23, 0xFF	; 255
     27e:	ce 01       	movw	r24, r28
     280:	89 96       	adiw	r24, 0x29	; 41
     282:	0e 94 b0 03 	call	0x760	; 0x760 <sps30_read_firmware_version>
    if (ret) {
     286:	89 2b       	or	r24, r25
     288:	29 f0       	breq	.+10     	; 0x294 <main+0x6c>
        printf("error reading firmware version\n");
     28a:	86 e4       	ldi	r24, 0x46	; 70
     28c:	91 e0       	ldi	r25, 0x01	; 1
     28e:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <puts>
     292:	12 c0       	rjmp	.+36     	; 0x2b8 <main+0x90>
    } else {
        printf("FW: %u.%u\n", fw_major, fw_minor);
     294:	8a a5       	ldd	r24, Y+42	; 0x2a
     296:	1f 92       	push	r1
     298:	8f 93       	push	r24
     29a:	89 a5       	ldd	r24, Y+41	; 0x29
     29c:	1f 92       	push	r1
     29e:	8f 93       	push	r24
     2a0:	85 e6       	ldi	r24, 0x65	; 101
     2a2:	91 e0       	ldi	r25, 0x01	; 1
     2a4:	9f 93       	push	r25
     2a6:	8f 93       	push	r24
     2a8:	0e 94 27 0d 	call	0x1a4e	; 0x1a4e <printf>
     2ac:	0f 90       	pop	r0
     2ae:	0f 90       	pop	r0
     2b0:	0f 90       	pop	r0
     2b2:	0f 90       	pop	r0
     2b4:	0f 90       	pop	r0
     2b6:	0f 90       	pop	r0
    }

    char serial_number[SPS30_MAX_SERIAL_LEN];
    ret = sps30_get_serial(serial_number);
     2b8:	ce 01       	movw	r24, r28
     2ba:	8b 96       	adiw	r24, 0x2b	; 43
     2bc:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <sps30_get_serial>
    if (ret) {
     2c0:	89 2b       	or	r24, r25
     2c2:	29 f0       	breq	.+10     	; 0x2ce <main+0xa6>
        printf("error reading serial number\n");
     2c4:	80 e7       	ldi	r24, 0x70	; 112
     2c6:	91 e0       	ldi	r25, 0x01	; 1
     2c8:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <puts>
     2cc:	0e c0       	rjmp	.+28     	; 0x2ea <main+0xc2>
    } else {
        printf("Serial Number: %s\n", serial_number);
     2ce:	ce 01       	movw	r24, r28
     2d0:	8b 96       	adiw	r24, 0x2b	; 43
     2d2:	9f 93       	push	r25
     2d4:	8f 93       	push	r24
     2d6:	8c e8       	ldi	r24, 0x8C	; 140
     2d8:	91 e0       	ldi	r25, 0x01	; 1
     2da:	9f 93       	push	r25
     2dc:	8f 93       	push	r24
     2de:	0e 94 27 0d 	call	0x1a4e	; 0x1a4e <printf>
     2e2:	0f 90       	pop	r0
     2e4:	0f 90       	pop	r0
     2e6:	0f 90       	pop	r0
     2e8:	0f 90       	pop	r0
    }

    ret = sps30_start_measurement();
     2ea:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <sps30_start_measurement>
    if (ret < 0)
     2ee:	99 23       	and	r25, r25
     2f0:	24 f4       	brge	.+8      	; 0x2fa <main+0xd2>
        printf("error starting measurement\n");
     2f2:	8f e9       	ldi	r24, 0x9F	; 159
     2f4:	91 e0       	ldi	r25, 0x01	; 1
     2f6:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <puts>
    printf("measurements started\n");
     2fa:	8a eb       	ldi	r24, 0xBA	; 186
     2fc:	91 e0       	ldi	r25, 0x01	; 1
     2fe:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <puts>
        ret = sps30_read_measurement(&m);
        if (ret < 0) {
            printf("error reading measurement\n");

        } else {
            printf("measured values:\n"
     302:	09 ee       	ldi	r16, 0xE9	; 233
     304:	11 e0       	ldi	r17, 0x01	; 1
    if (ret < 0)
        printf("error starting measurement\n");
    printf("measurements started\n");

    while (1) {
        sensirion_sleep_usec(SPS30_MEASUREMENT_DURATION_USEC); /* wait 1s */
     306:	60 e4       	ldi	r22, 0x40	; 64
     308:	72 e4       	ldi	r23, 0x42	; 66
     30a:	8f e0       	ldi	r24, 0x0F	; 15
     30c:	90 e0       	ldi	r25, 0x00	; 0
     30e:	0e 94 d5 04 	call	0x9aa	; 0x9aa <sensirion_sleep_usec>
        ret = sps30_read_measurement(&m);
     312:	ce 01       	movw	r24, r28
     314:	01 96       	adiw	r24, 0x01	; 1
     316:	0e 94 0f 04 	call	0x81e	; 0x81e <sps30_read_measurement>
        if (ret < 0) {
     31a:	99 23       	and	r25, r25
     31c:	2c f4       	brge	.+10     	; 0x328 <main+0x100>
            printf("error reading measurement\n");
     31e:	8f ec       	ldi	r24, 0xCF	; 207
     320:	91 e0       	ldi	r25, 0x01	; 1
     322:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <puts>
     326:	ef cf       	rjmp	.-34     	; 0x306 <main+0xde>

        } else {
            printf("measured values:\n"
     328:	88 a5       	ldd	r24, Y+40	; 0x28
     32a:	8f 93       	push	r24
     32c:	8f a1       	ldd	r24, Y+39	; 0x27
     32e:	8f 93       	push	r24
     330:	8e a1       	ldd	r24, Y+38	; 0x26
     332:	8f 93       	push	r24
     334:	8d a1       	ldd	r24, Y+37	; 0x25
     336:	8f 93       	push	r24
     338:	8c a1       	ldd	r24, Y+36	; 0x24
     33a:	8f 93       	push	r24
     33c:	8b a1       	ldd	r24, Y+35	; 0x23
     33e:	8f 93       	push	r24
     340:	8a a1       	ldd	r24, Y+34	; 0x22
     342:	8f 93       	push	r24
     344:	89 a1       	ldd	r24, Y+33	; 0x21
     346:	8f 93       	push	r24
     348:	88 a1       	ldd	r24, Y+32	; 0x20
     34a:	8f 93       	push	r24
     34c:	8f 8d       	ldd	r24, Y+31	; 0x1f
     34e:	8f 93       	push	r24
     350:	8e 8d       	ldd	r24, Y+30	; 0x1e
     352:	8f 93       	push	r24
     354:	8d 8d       	ldd	r24, Y+29	; 0x1d
     356:	8f 93       	push	r24
     358:	8c 8d       	ldd	r24, Y+28	; 0x1c
     35a:	8f 93       	push	r24
     35c:	8b 8d       	ldd	r24, Y+27	; 0x1b
     35e:	8f 93       	push	r24
     360:	8a 8d       	ldd	r24, Y+26	; 0x1a
     362:	8f 93       	push	r24
     364:	89 8d       	ldd	r24, Y+25	; 0x19
     366:	8f 93       	push	r24
     368:	88 8d       	ldd	r24, Y+24	; 0x18
     36a:	8f 93       	push	r24
     36c:	8f 89       	ldd	r24, Y+23	; 0x17
     36e:	8f 93       	push	r24
     370:	8e 89       	ldd	r24, Y+22	; 0x16
     372:	8f 93       	push	r24
     374:	8d 89       	ldd	r24, Y+21	; 0x15
     376:	8f 93       	push	r24
     378:	8c 89       	ldd	r24, Y+20	; 0x14
     37a:	8f 93       	push	r24
     37c:	8b 89       	ldd	r24, Y+19	; 0x13
     37e:	8f 93       	push	r24
     380:	8a 89       	ldd	r24, Y+18	; 0x12
     382:	8f 93       	push	r24
     384:	89 89       	ldd	r24, Y+17	; 0x11
     386:	8f 93       	push	r24
     388:	88 89       	ldd	r24, Y+16	; 0x10
     38a:	8f 93       	push	r24
     38c:	8f 85       	ldd	r24, Y+15	; 0x0f
     38e:	8f 93       	push	r24
     390:	8e 85       	ldd	r24, Y+14	; 0x0e
     392:	8f 93       	push	r24
     394:	8d 85       	ldd	r24, Y+13	; 0x0d
     396:	8f 93       	push	r24
     398:	8c 85       	ldd	r24, Y+12	; 0x0c
     39a:	8f 93       	push	r24
     39c:	8b 85       	ldd	r24, Y+11	; 0x0b
     39e:	8f 93       	push	r24
     3a0:	8a 85       	ldd	r24, Y+10	; 0x0a
     3a2:	8f 93       	push	r24
     3a4:	89 85       	ldd	r24, Y+9	; 0x09
     3a6:	8f 93       	push	r24
     3a8:	88 85       	ldd	r24, Y+8	; 0x08
     3aa:	8f 93       	push	r24
     3ac:	8f 81       	ldd	r24, Y+7	; 0x07
     3ae:	8f 93       	push	r24
     3b0:	8e 81       	ldd	r24, Y+6	; 0x06
     3b2:	8f 93       	push	r24
     3b4:	8d 81       	ldd	r24, Y+5	; 0x05
     3b6:	8f 93       	push	r24
     3b8:	8c 81       	ldd	r24, Y+4	; 0x04
     3ba:	8f 93       	push	r24
     3bc:	8b 81       	ldd	r24, Y+3	; 0x03
     3be:	8f 93       	push	r24
     3c0:	8a 81       	ldd	r24, Y+2	; 0x02
     3c2:	8f 93       	push	r24
     3c4:	89 81       	ldd	r24, Y+1	; 0x01
     3c6:	8f 93       	push	r24
     3c8:	1f 93       	push	r17
     3ca:	0f 93       	push	r16
     3cc:	0e 94 27 0d 	call	0x1a4e	; 0x1a4e <printf>
     3d0:	0f b6       	in	r0, 0x3f	; 63
     3d2:	f8 94       	cli
     3d4:	de bf       	out	0x3e, r29	; 62
     3d6:	0f be       	out	0x3f, r0	; 63
     3d8:	cd bf       	out	0x3d, r28	; 61
     3da:	95 cf       	rjmp	.-214    	; 0x306 <main+0xde>

000003dc <sensirion_bytes_to_uint32_t>:
}

int16_t sensirion_i2c_general_call_reset(void) {
    const uint8_t data = 0x06;
    return sensirion_i2c_write(0, &data, (uint16_t)sizeof(data));
}
     3dc:	fc 01       	movw	r30, r24
     3de:	20 81       	ld	r18, Z
     3e0:	61 81       	ldd	r22, Z+1	; 0x01
     3e2:	86 2f       	mov	r24, r22
     3e4:	90 e0       	ldi	r25, 0x00	; 0
     3e6:	a0 e0       	ldi	r26, 0x00	; 0
     3e8:	b0 e0       	ldi	r27, 0x00	; 0
     3ea:	dc 01       	movw	r26, r24
     3ec:	99 27       	eor	r25, r25
     3ee:	88 27       	eor	r24, r24
     3f0:	b2 2b       	or	r27, r18
     3f2:	23 81       	ldd	r18, Z+3	; 0x03
     3f4:	82 2b       	or	r24, r18
     3f6:	22 81       	ldd	r18, Z+2	; 0x02
     3f8:	bc 01       	movw	r22, r24
     3fa:	cd 01       	movw	r24, r26
     3fc:	72 2b       	or	r23, r18
     3fe:	08 95       	ret

00000400 <sensirion_bytes_to_float>:
     400:	0e 94 ee 01 	call	0x3dc	; 0x3dc <sensirion_bytes_to_uint32_t>
     404:	08 95       	ret

00000406 <sensirion_common_generate_crc>:
     406:	61 15       	cp	r22, r1
     408:	71 05       	cpc	r23, r1
     40a:	a1 f0       	breq	.+40     	; 0x434 <sensirion_common_generate_crc+0x2e>
     40c:	fc 01       	movw	r30, r24
     40e:	68 0f       	add	r22, r24
     410:	79 1f       	adc	r23, r25
     412:	8f ef       	ldi	r24, 0xFF	; 255
     414:	21 e3       	ldi	r18, 0x31	; 49
     416:	91 91       	ld	r25, Z+
     418:	89 27       	eor	r24, r25
     41a:	98 e0       	ldi	r25, 0x08	; 8
     41c:	88 23       	and	r24, r24
     41e:	1c f4       	brge	.+6      	; 0x426 <sensirion_common_generate_crc+0x20>
     420:	88 0f       	add	r24, r24
     422:	82 27       	eor	r24, r18
     424:	01 c0       	rjmp	.+2      	; 0x428 <sensirion_common_generate_crc+0x22>
     426:	88 0f       	add	r24, r24
     428:	91 50       	subi	r25, 0x01	; 1
     42a:	c1 f7       	brne	.-16     	; 0x41c <sensirion_common_generate_crc+0x16>
     42c:	e6 17       	cp	r30, r22
     42e:	f7 07       	cpc	r31, r23
     430:	91 f7       	brne	.-28     	; 0x416 <sensirion_common_generate_crc+0x10>
     432:	08 95       	ret
     434:	8f ef       	ldi	r24, 0xFF	; 255
     436:	08 95       	ret

00000438 <sensirion_common_check_crc>:
     438:	cf 93       	push	r28
     43a:	c4 2f       	mov	r28, r20
     43c:	0e 94 03 02 	call	0x406	; 0x406 <sensirion_common_generate_crc>
     440:	91 e0       	ldi	r25, 0x01	; 1
     442:	8c 13       	cpse	r24, r28
     444:	01 c0       	rjmp	.+2      	; 0x448 <sensirion_common_check_crc+0x10>
     446:	90 e0       	ldi	r25, 0x00	; 0
     448:	89 2f       	mov	r24, r25
     44a:	81 95       	neg	r24
     44c:	cf 91       	pop	r28
     44e:	08 95       	ret

00000450 <sensirion_fill_cmd_send_buf>:

uint16_t sensirion_fill_cmd_send_buf(uint8_t* buf, uint16_t cmd,
                                     const uint16_t* args, uint8_t num_args) {
     450:	ef 92       	push	r14
     452:	ff 92       	push	r15
     454:	0f 93       	push	r16
     456:	1f 93       	push	r17
     458:	cf 93       	push	r28
     45a:	df 93       	push	r29
     45c:	ec 01       	movw	r28, r24
    uint8_t crc;
    uint8_t i;
    uint16_t idx = 0;

    buf[idx++] = (uint8_t)((cmd & 0xFF00) >> 8);
     45e:	78 83       	st	Y, r23
    buf[idx++] = (uint8_t)((cmd & 0x00FF) >> 0);
     460:	69 83       	std	Y+1, r22	; 0x01

    for (i = 0; i < num_args; ++i) {
     462:	22 23       	and	r18, r18
     464:	01 f1       	breq	.+64     	; 0x4a6 <sensirion_fill_cmd_send_buf+0x56>
     466:	e2 2e       	mov	r14, r18
     468:	22 96       	adiw	r28, 0x02	; 2
     46a:	04 2f       	mov	r16, r20
     46c:	15 2f       	mov	r17, r21
     46e:	f1 2c       	mov	r15, r1
     470:	f8 01       	movw	r30, r16
        buf[idx++] = (uint8_t)((args[i] & 0xFF00) >> 8);
     472:	81 81       	ldd	r24, Z+1	; 0x01
     474:	88 83       	st	Y, r24
        buf[idx++] = (uint8_t)((args[i] & 0x00FF) >> 0);
     476:	80 81       	ld	r24, Z
     478:	0e 5f       	subi	r16, 0xFE	; 254
     47a:	1f 4f       	sbci	r17, 0xFF	; 255
     47c:	89 83       	std	Y+1, r24	; 0x01

        crc = sensirion_common_generate_crc((uint8_t*)&buf[idx - 2],
     47e:	62 e0       	ldi	r22, 0x02	; 2
     480:	70 e0       	ldi	r23, 0x00	; 0
     482:	ce 01       	movw	r24, r28
     484:	0e 94 03 02 	call	0x406	; 0x406 <sensirion_common_generate_crc>
                                            SENSIRION_WORD_SIZE);
        buf[idx++] = crc;
     488:	8a 83       	std	Y+2, r24	; 0x02
    uint16_t idx = 0;

    buf[idx++] = (uint8_t)((cmd & 0xFF00) >> 8);
    buf[idx++] = (uint8_t)((cmd & 0x00FF) >> 0);

    for (i = 0; i < num_args; ++i) {
     48a:	f3 94       	inc	r15
     48c:	23 96       	adiw	r28, 0x03	; 3
     48e:	ef 10       	cpse	r14, r15
     490:	ef cf       	rjmp	.-34     	; 0x470 <sensirion_fill_cmd_send_buf+0x20>
     492:	ea 94       	dec	r14
     494:	8e 2d       	mov	r24, r14
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	9c 01       	movw	r18, r24
     49a:	22 0f       	add	r18, r18
     49c:	33 1f       	adc	r19, r19
     49e:	82 0f       	add	r24, r18
     4a0:	93 1f       	adc	r25, r19
     4a2:	05 96       	adiw	r24, 0x05	; 5
     4a4:	02 c0       	rjmp	.+4      	; 0x4aa <sensirion_fill_cmd_send_buf+0x5a>
    uint8_t crc;
    uint8_t i;
    uint16_t idx = 0;

    buf[idx++] = (uint8_t)((cmd & 0xFF00) >> 8);
    buf[idx++] = (uint8_t)((cmd & 0x00FF) >> 0);
     4a6:	82 e0       	ldi	r24, 0x02	; 2
     4a8:	90 e0       	ldi	r25, 0x00	; 0
        crc = sensirion_common_generate_crc((uint8_t*)&buf[idx - 2],
                                            SENSIRION_WORD_SIZE);
        buf[idx++] = crc;
    }
    return idx;
}
     4aa:	df 91       	pop	r29
     4ac:	cf 91       	pop	r28
     4ae:	1f 91       	pop	r17
     4b0:	0f 91       	pop	r16
     4b2:	ff 90       	pop	r15
     4b4:	ef 90       	pop	r14
     4b6:	08 95       	ret

000004b8 <sensirion_i2c_read_words_as_bytes>:

int16_t sensirion_i2c_read_words_as_bytes(uint8_t address, uint8_t* data,
                                          uint16_t num_words) {
     4b8:	6f 92       	push	r6
     4ba:	7f 92       	push	r7
     4bc:	8f 92       	push	r8
     4be:	9f 92       	push	r9
     4c0:	af 92       	push	r10
     4c2:	bf 92       	push	r11
     4c4:	cf 92       	push	r12
     4c6:	df 92       	push	r13
     4c8:	ef 92       	push	r14
     4ca:	ff 92       	push	r15
     4cc:	0f 93       	push	r16
     4ce:	1f 93       	push	r17
     4d0:	cf 93       	push	r28
     4d2:	df 93       	push	r29
     4d4:	cd b7       	in	r28, 0x3d	; 61
     4d6:	de b7       	in	r29, 0x3e	; 62
     4d8:	c0 54       	subi	r28, 0x40	; 64
     4da:	d1 09       	sbc	r29, r1
     4dc:	0f b6       	in	r0, 0x3f	; 63
     4de:	f8 94       	cli
     4e0:	de bf       	out	0x3e, r29	; 62
     4e2:	0f be       	out	0x3f, r0	; 63
     4e4:	cd bf       	out	0x3d, r28	; 61
     4e6:	c6 2e       	mov	r12, r22
     4e8:	d7 2e       	mov	r13, r23
    int16_t ret;
    uint16_t i, j;
    uint16_t size = num_words * (SENSIRION_WORD_SIZE + CRC8_LEN);
     4ea:	4a 01       	movw	r8, r20
     4ec:	88 0c       	add	r8, r8
     4ee:	99 1c       	adc	r9, r9
     4f0:	84 0e       	add	r8, r20
     4f2:	95 1e       	adc	r9, r21
    uint16_t word_buf[SENSIRION_MAX_BUFFER_WORDS];
    uint8_t* const buf8 = (uint8_t*)word_buf;

    ret = sensirion_i2c_read(address, buf8, size);
     4f4:	a4 01       	movw	r20, r8
     4f6:	be 01       	movw	r22, r28
     4f8:	6f 5f       	subi	r22, 0xFF	; 255
     4fa:	7f 4f       	sbci	r23, 0xFF	; 255
     4fc:	0e 94 59 06 	call	0xcb2	; 0xcb2 <sensirion_i2c_read>
     500:	08 2f       	mov	r16, r24
     502:	08 2e       	mov	r0, r24
     504:	00 0c       	add	r0, r0
     506:	11 0b       	sbc	r17, r17
	
    if (ret != NO_ERROR){
     508:	01 15       	cp	r16, r1
     50a:	11 05       	cpc	r17, r1
     50c:	31 f4       	brne	.+12     	; 0x51a <sensirion_i2c_read_words_as_bytes+0x62>
		printf("1)read byte error ret = %d", ret);
        return ret;
	}

    /* check the CRC for each word */
    for (i = 0, j = 0; i < size; i += SENSIRION_WORD_SIZE + CRC8_LEN) {
     50e:	81 14       	cp	r8, r1
     510:	91 04       	cpc	r9, r1
     512:	91 f4       	brne	.+36     	; 0x538 <sensirion_i2c_read_words_as_bytes+0x80>

        data[j++] = buf8[i];
        data[j++] = buf8[i + 1];
    }

    return NO_ERROR;
     514:	80 e0       	ldi	r24, 0x00	; 0
     516:	90 e0       	ldi	r25, 0x00	; 0
     518:	4a c0       	rjmp	.+148    	; 0x5ae <sensirion_i2c_read_words_as_bytes+0xf6>
    uint8_t* const buf8 = (uint8_t*)word_buf;

    ret = sensirion_i2c_read(address, buf8, size);
	
    if (ret != NO_ERROR){
		printf("1)read byte error ret = %d", ret);
     51a:	1f 93       	push	r17
     51c:	8f 93       	push	r24
     51e:	80 e9       	ldi	r24, 0x90	; 144
     520:	92 e0       	ldi	r25, 0x02	; 2
     522:	9f 93       	push	r25
     524:	8f 93       	push	r24
     526:	0e 94 27 0d 	call	0x1a4e	; 0x1a4e <printf>
        return ret;
     52a:	0f 90       	pop	r0
     52c:	0f 90       	pop	r0
     52e:	0f 90       	pop	r0
     530:	0f 90       	pop	r0
     532:	80 2f       	mov	r24, r16
     534:	91 2f       	mov	r25, r17
     536:	3b c0       	rjmp	.+118    	; 0x5ae <sensirion_i2c_read_words_as_bytes+0xf6>
     538:	8e 01       	movw	r16, r28
     53a:	0f 5f       	subi	r16, 0xFF	; 255
     53c:	1f 4f       	sbci	r17, 0xFF	; 255
     53e:	ec 2c       	mov	r14, r12
     540:	fd 2c       	mov	r15, r13
	}

    /* check the CRC for each word */
    for (i = 0, j = 0; i < size; i += SENSIRION_WORD_SIZE + CRC8_LEN) {
     542:	c1 2c       	mov	r12, r1
     544:	d1 2c       	mov	r13, r1

        ret = sensirion_common_check_crc(&buf8[i], SENSIRION_WORD_SIZE,
                                         buf8[i + SENSIRION_WORD_SIZE]);
        if (ret != NO_ERROR){
			printf("2)read byte error ret = %d", ret);
     546:	0f 2e       	mov	r0, r31
     548:	fb ea       	ldi	r31, 0xAB	; 171
     54a:	6f 2e       	mov	r6, r31
     54c:	f2 e0       	ldi	r31, 0x02	; 2
     54e:	7f 2e       	mov	r7, r31
     550:	f0 2d       	mov	r31, r0
     552:	58 01       	movw	r10, r16
	}

    /* check the CRC for each word */
    for (i = 0, j = 0; i < size; i += SENSIRION_WORD_SIZE + CRC8_LEN) {

        ret = sensirion_common_check_crc(&buf8[i], SENSIRION_WORD_SIZE,
     554:	f8 01       	movw	r30, r16
     556:	42 81       	ldd	r20, Z+2	; 0x02
     558:	62 e0       	ldi	r22, 0x02	; 2
     55a:	70 e0       	ldi	r23, 0x00	; 0
     55c:	c8 01       	movw	r24, r16
     55e:	0e 94 1c 02 	call	0x438	; 0x438 <sensirion_common_check_crc>
     562:	28 2f       	mov	r18, r24
     564:	08 2e       	mov	r0, r24
     566:	00 0c       	add	r0, r0
     568:	33 0b       	sbc	r19, r19
                                         buf8[i + SENSIRION_WORD_SIZE]);
        if (ret != NO_ERROR){
     56a:	21 15       	cp	r18, r1
     56c:	31 05       	cpc	r19, r1
     56e:	51 f0       	breq	.+20     	; 0x584 <sensirion_i2c_read_words_as_bytes+0xcc>
			printf("2)read byte error ret = %d", ret);
     570:	3f 93       	push	r19
     572:	8f 93       	push	r24
     574:	7f 92       	push	r7
     576:	6f 92       	push	r6
     578:	0e 94 27 0d 	call	0x1a4e	; 0x1a4e <printf>
     57c:	0f 90       	pop	r0
     57e:	0f 90       	pop	r0
     580:	0f 90       	pop	r0
     582:	0f 90       	pop	r0
            //return ret;
		}

        data[j++] = buf8[i];
     584:	f5 01       	movw	r30, r10
     586:	80 81       	ld	r24, Z
     588:	f7 01       	movw	r30, r14
     58a:	80 83       	st	Z, r24
        data[j++] = buf8[i + 1];
     58c:	f5 01       	movw	r30, r10
     58e:	81 81       	ldd	r24, Z+1	; 0x01
     590:	f7 01       	movw	r30, r14
     592:	81 83       	std	Z+1, r24	; 0x01
		printf("1)read byte error ret = %d", ret);
        return ret;
	}

    /* check the CRC for each word */
    for (i = 0, j = 0; i < size; i += SENSIRION_WORD_SIZE + CRC8_LEN) {
     594:	f3 e0       	ldi	r31, 0x03	; 3
     596:	cf 0e       	add	r12, r31
     598:	d1 1c       	adc	r13, r1
     59a:	0d 5f       	subi	r16, 0xFD	; 253
     59c:	1f 4f       	sbci	r17, 0xFF	; 255
     59e:	82 e0       	ldi	r24, 0x02	; 2
     5a0:	e8 0e       	add	r14, r24
     5a2:	f1 1c       	adc	r15, r1
     5a4:	c8 14       	cp	r12, r8
     5a6:	d9 04       	cpc	r13, r9
     5a8:	a0 f2       	brcs	.-88     	; 0x552 <sensirion_i2c_read_words_as_bytes+0x9a>

        data[j++] = buf8[i];
        data[j++] = buf8[i + 1];
    }

    return NO_ERROR;
     5aa:	80 e0       	ldi	r24, 0x00	; 0
     5ac:	90 e0       	ldi	r25, 0x00	; 0
}
     5ae:	c0 5c       	subi	r28, 0xC0	; 192
     5b0:	df 4f       	sbci	r29, 0xFF	; 255
     5b2:	0f b6       	in	r0, 0x3f	; 63
     5b4:	f8 94       	cli
     5b6:	de bf       	out	0x3e, r29	; 62
     5b8:	0f be       	out	0x3f, r0	; 63
     5ba:	cd bf       	out	0x3d, r28	; 61
     5bc:	df 91       	pop	r29
     5be:	cf 91       	pop	r28
     5c0:	1f 91       	pop	r17
     5c2:	0f 91       	pop	r16
     5c4:	ff 90       	pop	r15
     5c6:	ef 90       	pop	r14
     5c8:	df 90       	pop	r13
     5ca:	cf 90       	pop	r12
     5cc:	bf 90       	pop	r11
     5ce:	af 90       	pop	r10
     5d0:	9f 90       	pop	r9
     5d2:	8f 90       	pop	r8
     5d4:	7f 90       	pop	r7
     5d6:	6f 90       	pop	r6
     5d8:	08 95       	ret

000005da <sensirion_i2c_read_words>:

int16_t sensirion_i2c_read_words(uint8_t address, uint16_t* data_words,
                                 uint16_t num_words) {
     5da:	0f 93       	push	r16
     5dc:	1f 93       	push	r17
     5de:	cf 93       	push	r28
     5e0:	df 93       	push	r29
     5e2:	8b 01       	movw	r16, r22
     5e4:	ea 01       	movw	r28, r20
    int16_t ret;
    uint8_t i;
    const uint8_t* word_bytes;

    ret = sensirion_i2c_read_words_as_bytes(address, (uint8_t*)data_words,
     5e6:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <sensirion_i2c_read_words_as_bytes>
                                            num_words);
    if (ret != NO_ERROR)
     5ea:	00 97       	sbiw	r24, 0x00	; 0
     5ec:	e1 f4       	brne	.+56     	; 0x626 <sensirion_i2c_read_words+0x4c>
        return ret;

    for (i = 0; i < num_words; ++i) {
     5ee:	20 97       	sbiw	r28, 0x00	; 0
     5f0:	c1 f0       	breq	.+48     	; 0x622 <sensirion_i2c_read_words+0x48>
     5f2:	e0 e0       	ldi	r30, 0x00	; 0
     5f4:	f0 e0       	ldi	r31, 0x00	; 0
     5f6:	20 e0       	ldi	r18, 0x00	; 0
        word_bytes = (uint8_t*)&data_words[i];
     5f8:	ee 0f       	add	r30, r30
     5fa:	ff 1f       	adc	r31, r31
     5fc:	e0 0f       	add	r30, r16
     5fe:	f1 1f       	adc	r31, r17
        data_words[i] = ((uint16_t)word_bytes[0] << 8) | word_bytes[1];
     600:	80 81       	ld	r24, Z
     602:	90 e0       	ldi	r25, 0x00	; 0
     604:	98 2f       	mov	r25, r24
     606:	88 27       	eor	r24, r24
     608:	31 81       	ldd	r19, Z+1	; 0x01
     60a:	83 2b       	or	r24, r19
     60c:	91 83       	std	Z+1, r25	; 0x01
     60e:	80 83       	st	Z, r24
    ret = sensirion_i2c_read_words_as_bytes(address, (uint8_t*)data_words,
                                            num_words);
    if (ret != NO_ERROR)
        return ret;

    for (i = 0; i < num_words; ++i) {
     610:	2f 5f       	subi	r18, 0xFF	; 255
     612:	e2 2f       	mov	r30, r18
     614:	f0 e0       	ldi	r31, 0x00	; 0
     616:	ec 17       	cp	r30, r28
     618:	fd 07       	cpc	r31, r29
     61a:	70 f3       	brcs	.-36     	; 0x5f8 <sensirion_i2c_read_words+0x1e>
        word_bytes = (uint8_t*)&data_words[i];
        data_words[i] = ((uint16_t)word_bytes[0] << 8) | word_bytes[1];
    }

    return NO_ERROR;
     61c:	80 e0       	ldi	r24, 0x00	; 0
     61e:	90 e0       	ldi	r25, 0x00	; 0
     620:	02 c0       	rjmp	.+4      	; 0x626 <sensirion_i2c_read_words+0x4c>
     622:	80 e0       	ldi	r24, 0x00	; 0
     624:	90 e0       	ldi	r25, 0x00	; 0
}
     626:	df 91       	pop	r29
     628:	cf 91       	pop	r28
     62a:	1f 91       	pop	r17
     62c:	0f 91       	pop	r16
     62e:	08 95       	ret

00000630 <sensirion_i2c_write_cmd>:

int16_t sensirion_i2c_write_cmd(uint8_t address, uint16_t command) {
     630:	1f 93       	push	r17
     632:	cf 93       	push	r28
     634:	df 93       	push	r29
     636:	00 d0       	rcall	.+0      	; 0x638 <sensirion_i2c_write_cmd+0x8>
     638:	cd b7       	in	r28, 0x3d	; 61
     63a:	de b7       	in	r29, 0x3e	; 62
     63c:	18 2f       	mov	r17, r24
    uint8_t buf[SENSIRION_COMMAND_SIZE];

    sensirion_fill_cmd_send_buf(buf, command, NULL, 0);
     63e:	20 e0       	ldi	r18, 0x00	; 0
     640:	40 e0       	ldi	r20, 0x00	; 0
     642:	50 e0       	ldi	r21, 0x00	; 0
     644:	ce 01       	movw	r24, r28
     646:	01 96       	adiw	r24, 0x01	; 1
     648:	0e 94 28 02 	call	0x450	; 0x450 <sensirion_fill_cmd_send_buf>
    return sensirion_i2c_write(address, buf, SENSIRION_COMMAND_SIZE);
     64c:	42 e0       	ldi	r20, 0x02	; 2
     64e:	50 e0       	ldi	r21, 0x00	; 0
     650:	be 01       	movw	r22, r28
     652:	6f 5f       	subi	r22, 0xFF	; 255
     654:	7f 4f       	sbci	r23, 0xFF	; 255
     656:	81 2f       	mov	r24, r17
     658:	0e 94 6d 06 	call	0xcda	; 0xcda <sensirion_i2c_write>
}
     65c:	08 2e       	mov	r0, r24
     65e:	00 0c       	add	r0, r0
     660:	99 0b       	sbc	r25, r25
     662:	0f 90       	pop	r0
     664:	0f 90       	pop	r0
     666:	df 91       	pop	r29
     668:	cf 91       	pop	r28
     66a:	1f 91       	pop	r17
     66c:	08 95       	ret

0000066e <sensirion_i2c_write_cmd_with_args>:

int16_t sensirion_i2c_write_cmd_with_args(uint8_t address, uint16_t command,
                                          const uint16_t* data_words,
                                          uint16_t num_words) {
     66e:	1f 93       	push	r17
     670:	cf 93       	push	r28
     672:	df 93       	push	r29
     674:	cd b7       	in	r28, 0x3d	; 61
     676:	de b7       	in	r29, 0x3e	; 62
     678:	a0 97       	sbiw	r28, 0x20	; 32
     67a:	0f b6       	in	r0, 0x3f	; 63
     67c:	f8 94       	cli
     67e:	de bf       	out	0x3e, r29	; 62
     680:	0f be       	out	0x3f, r0	; 63
     682:	cd bf       	out	0x3d, r28	; 61
     684:	18 2f       	mov	r17, r24
    uint8_t buf[SENSIRION_MAX_BUFFER_WORDS];
    uint16_t buf_size;

    buf_size = sensirion_fill_cmd_send_buf(buf, command, data_words, num_words);
     686:	ce 01       	movw	r24, r28
     688:	01 96       	adiw	r24, 0x01	; 1
     68a:	0e 94 28 02 	call	0x450	; 0x450 <sensirion_fill_cmd_send_buf>
    return sensirion_i2c_write(address, buf, buf_size);
     68e:	ac 01       	movw	r20, r24
     690:	be 01       	movw	r22, r28
     692:	6f 5f       	subi	r22, 0xFF	; 255
     694:	7f 4f       	sbci	r23, 0xFF	; 255
     696:	81 2f       	mov	r24, r17
     698:	0e 94 6d 06 	call	0xcda	; 0xcda <sensirion_i2c_write>
}
     69c:	08 2e       	mov	r0, r24
     69e:	00 0c       	add	r0, r0
     6a0:	99 0b       	sbc	r25, r25
     6a2:	a0 96       	adiw	r28, 0x20	; 32
     6a4:	0f b6       	in	r0, 0x3f	; 63
     6a6:	f8 94       	cli
     6a8:	de bf       	out	0x3e, r29	; 62
     6aa:	0f be       	out	0x3f, r0	; 63
     6ac:	cd bf       	out	0x3d, r28	; 61
     6ae:	df 91       	pop	r29
     6b0:	cf 91       	pop	r28
     6b2:	1f 91       	pop	r17
     6b4:	08 95       	ret

000006b6 <sensirion_i2c_delayed_read_cmd>:

int16_t sensirion_i2c_delayed_read_cmd(uint8_t address, uint16_t cmd,
                                       uint32_t delay_us, uint16_t* data_words,
                                       uint16_t num_words) {
     6b6:	8f 92       	push	r8
     6b8:	9f 92       	push	r9
     6ba:	af 92       	push	r10
     6bc:	bf 92       	push	r11
     6be:	df 92       	push	r13
     6c0:	ef 92       	push	r14
     6c2:	ff 92       	push	r15
     6c4:	0f 93       	push	r16
     6c6:	1f 93       	push	r17
     6c8:	cf 93       	push	r28
     6ca:	df 93       	push	r29
     6cc:	00 d0       	rcall	.+0      	; 0x6ce <sensirion_i2c_delayed_read_cmd+0x18>
     6ce:	cd b7       	in	r28, 0x3d	; 61
     6d0:	de b7       	in	r29, 0x3e	; 62
     6d2:	d8 2e       	mov	r13, r24
     6d4:	49 01       	movw	r8, r18
     6d6:	5a 01       	movw	r10, r20
    int16_t ret;
    uint8_t buf[SENSIRION_COMMAND_SIZE];

    sensirion_fill_cmd_send_buf(buf, cmd, NULL, 0);
     6d8:	20 e0       	ldi	r18, 0x00	; 0
     6da:	40 e0       	ldi	r20, 0x00	; 0
     6dc:	50 e0       	ldi	r21, 0x00	; 0
     6de:	ce 01       	movw	r24, r28
     6e0:	01 96       	adiw	r24, 0x01	; 1
     6e2:	0e 94 28 02 	call	0x450	; 0x450 <sensirion_fill_cmd_send_buf>
    ret = sensirion_i2c_write(address, buf, SENSIRION_COMMAND_SIZE);
     6e6:	42 e0       	ldi	r20, 0x02	; 2
     6e8:	50 e0       	ldi	r21, 0x00	; 0
     6ea:	be 01       	movw	r22, r28
     6ec:	6f 5f       	subi	r22, 0xFF	; 255
     6ee:	7f 4f       	sbci	r23, 0xFF	; 255
     6f0:	8d 2d       	mov	r24, r13
     6f2:	0e 94 6d 06 	call	0xcda	; 0xcda <sensirion_i2c_write>
     6f6:	28 2f       	mov	r18, r24
     6f8:	88 0f       	add	r24, r24
     6fa:	33 0b       	sbc	r19, r19
    if (ret != NO_ERROR)
     6fc:	21 15       	cp	r18, r1
     6fe:	31 05       	cpc	r19, r1
     700:	79 f4       	brne	.+30     	; 0x720 <sensirion_i2c_delayed_read_cmd+0x6a>
        return ret;

    if (delay_us)
     702:	81 14       	cp	r8, r1
     704:	91 04       	cpc	r9, r1
     706:	a1 04       	cpc	r10, r1
     708:	b1 04       	cpc	r11, r1
     70a:	21 f0       	breq	.+8      	; 0x714 <sensirion_i2c_delayed_read_cmd+0x5e>
        sensirion_sleep_usec(delay_us);
     70c:	c5 01       	movw	r24, r10
     70e:	b4 01       	movw	r22, r8
     710:	0e 94 d5 04 	call	0x9aa	; 0x9aa <sensirion_sleep_usec>

    return sensirion_i2c_read_words(address, data_words, num_words);
     714:	a7 01       	movw	r20, r14
     716:	b8 01       	movw	r22, r16
     718:	8d 2d       	mov	r24, r13
     71a:	0e 94 ed 02 	call	0x5da	; 0x5da <sensirion_i2c_read_words>
     71e:	02 c0       	rjmp	.+4      	; 0x724 <sensirion_i2c_delayed_read_cmd+0x6e>
    uint8_t buf[SENSIRION_COMMAND_SIZE];

    sensirion_fill_cmd_send_buf(buf, cmd, NULL, 0);
    ret = sensirion_i2c_write(address, buf, SENSIRION_COMMAND_SIZE);
    if (ret != NO_ERROR)
        return ret;
     720:	82 2f       	mov	r24, r18
     722:	93 2f       	mov	r25, r19

    if (delay_us)
        sensirion_sleep_usec(delay_us);

    return sensirion_i2c_read_words(address, data_words, num_words);
}
     724:	0f 90       	pop	r0
     726:	0f 90       	pop	r0
     728:	df 91       	pop	r29
     72a:	cf 91       	pop	r28
     72c:	1f 91       	pop	r17
     72e:	0f 91       	pop	r16
     730:	ff 90       	pop	r15
     732:	ef 90       	pop	r14
     734:	df 90       	pop	r13
     736:	bf 90       	pop	r11
     738:	af 90       	pop	r10
     73a:	9f 90       	pop	r9
     73c:	8f 90       	pop	r8
     73e:	08 95       	ret

00000740 <sensirion_i2c_read_cmd>:

int16_t sensirion_i2c_read_cmd(uint8_t address, uint16_t cmd,
                               uint16_t* data_words, uint16_t num_words) {
     740:	ef 92       	push	r14
     742:	ff 92       	push	r15
     744:	0f 93       	push	r16
     746:	1f 93       	push	r17
    return sensirion_i2c_delayed_read_cmd(address, cmd, 0, data_words,
     748:	79 01       	movw	r14, r18
     74a:	8a 01       	movw	r16, r20
     74c:	20 e0       	ldi	r18, 0x00	; 0
     74e:	30 e0       	ldi	r19, 0x00	; 0
     750:	a9 01       	movw	r20, r18
     752:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <sensirion_i2c_delayed_read_cmd>
                                          num_words);
}
     756:	1f 91       	pop	r17
     758:	0f 91       	pop	r16
     75a:	ff 90       	pop	r15
     75c:	ef 90       	pop	r14
     75e:	08 95       	ret

00000760 <sps30_read_firmware_version>:
    if (ret)
        return ret;

    sensirion_sleep_usec(SPS_CMD_DELAY_USEC);
    return 0;
}
     760:	ef 92       	push	r14
     762:	ff 92       	push	r15
     764:	0f 93       	push	r16
     766:	1f 93       	push	r17
     768:	cf 93       	push	r28
     76a:	df 93       	push	r29
     76c:	00 d0       	rcall	.+0      	; 0x76e <sps30_read_firmware_version+0xe>
     76e:	cd b7       	in	r28, 0x3d	; 61
     770:	de b7       	in	r29, 0x3e	; 62
     772:	7c 01       	movw	r14, r24
     774:	8b 01       	movw	r16, r22
     776:	21 e0       	ldi	r18, 0x01	; 1
     778:	30 e0       	ldi	r19, 0x00	; 0
     77a:	ae 01       	movw	r20, r28
     77c:	4f 5f       	subi	r20, 0xFF	; 255
     77e:	5f 4f       	sbci	r21, 0xFF	; 255
     780:	60 e0       	ldi	r22, 0x00	; 0
     782:	71 ed       	ldi	r23, 0xD1	; 209
     784:	89 e6       	ldi	r24, 0x69	; 105
     786:	0e 94 a0 03 	call	0x740	; 0x740 <sensirion_i2c_read_cmd>
     78a:	29 81       	ldd	r18, Y+1	; 0x01
     78c:	3a 81       	ldd	r19, Y+2	; 0x02
     78e:	f7 01       	movw	r30, r14
     790:	30 83       	st	Z, r19
     792:	f8 01       	movw	r30, r16
     794:	20 83       	st	Z, r18
     796:	0f 90       	pop	r0
     798:	0f 90       	pop	r0
     79a:	df 91       	pop	r29
     79c:	cf 91       	pop	r28
     79e:	1f 91       	pop	r17
     7a0:	0f 91       	pop	r16
     7a2:	ff 90       	pop	r15
     7a4:	ef 90       	pop	r14
     7a6:	08 95       	ret

000007a8 <sps30_get_serial>:
     7a8:	cf 93       	push	r28
     7aa:	df 93       	push	r29
     7ac:	ec 01       	movw	r28, r24
     7ae:	63 e3       	ldi	r22, 0x33	; 51
     7b0:	70 ed       	ldi	r23, 0xD0	; 208
     7b2:	89 e6       	ldi	r24, 0x69	; 105
     7b4:	0e 94 18 03 	call	0x630	; 0x630 <sensirion_i2c_write_cmd>
     7b8:	9c 01       	movw	r18, r24
     7ba:	00 97       	sbiw	r24, 0x00	; 0
     7bc:	41 f4       	brne	.+16     	; 0x7ce <sps30_get_serial+0x26>
     7be:	40 e1       	ldi	r20, 0x10	; 16
     7c0:	50 e0       	ldi	r21, 0x00	; 0
     7c2:	be 01       	movw	r22, r28
     7c4:	89 e6       	ldi	r24, 0x69	; 105
     7c6:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <sensirion_i2c_read_words_as_bytes>
     7ca:	1f 8e       	std	Y+31, r1	; 0x1f
     7cc:	01 c0       	rjmp	.+2      	; 0x7d0 <sps30_get_serial+0x28>
     7ce:	93 2f       	mov	r25, r19
     7d0:	df 91       	pop	r29
     7d2:	cf 91       	pop	r28
     7d4:	08 95       	ret

000007d6 <sps30_start_measurement>:
     7d6:	0f 93       	push	r16
     7d8:	1f 93       	push	r17
     7da:	cf 93       	push	r28
     7dc:	df 93       	push	r29
     7de:	00 d0       	rcall	.+0      	; 0x7e0 <sps30_start_measurement+0xa>
     7e0:	cd b7       	in	r28, 0x3d	; 61
     7e2:	de b7       	in	r29, 0x3e	; 62
     7e4:	80 e0       	ldi	r24, 0x00	; 0
     7e6:	93 e0       	ldi	r25, 0x03	; 3
     7e8:	9a 83       	std	Y+2, r25	; 0x02
     7ea:	89 83       	std	Y+1, r24	; 0x01
     7ec:	21 e0       	ldi	r18, 0x01	; 1
     7ee:	30 e0       	ldi	r19, 0x00	; 0
     7f0:	ae 01       	movw	r20, r28
     7f2:	4f 5f       	subi	r20, 0xFF	; 255
     7f4:	5f 4f       	sbci	r21, 0xFF	; 255
     7f6:	60 e1       	ldi	r22, 0x10	; 16
     7f8:	70 e0       	ldi	r23, 0x00	; 0
     7fa:	89 e6       	ldi	r24, 0x69	; 105
     7fc:	0e 94 37 03 	call	0x66e	; 0x66e <sensirion_i2c_write_cmd_with_args>
     800:	8c 01       	movw	r16, r24
     802:	60 e2       	ldi	r22, 0x20	; 32
     804:	7e e4       	ldi	r23, 0x4E	; 78
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	0e 94 d5 04 	call	0x9aa	; 0x9aa <sensirion_sleep_usec>
     80e:	c8 01       	movw	r24, r16
     810:	0f 90       	pop	r0
     812:	0f 90       	pop	r0
     814:	df 91       	pop	r29
     816:	cf 91       	pop	r28
     818:	1f 91       	pop	r17
     81a:	0f 91       	pop	r16
     81c:	08 95       	ret

0000081e <sps30_read_measurement>:
     81e:	ef 92       	push	r14
     820:	ff 92       	push	r15
     822:	0f 93       	push	r16
     824:	1f 93       	push	r17
     826:	cf 93       	push	r28
     828:	df 93       	push	r29
     82a:	cd b7       	in	r28, 0x3d	; 61
     82c:	de b7       	in	r29, 0x3e	; 62
     82e:	a8 97       	sbiw	r28, 0x28	; 40
     830:	0f b6       	in	r0, 0x3f	; 63
     832:	f8 94       	cli
     834:	de bf       	out	0x3e, r29	; 62
     836:	0f be       	out	0x3f, r0	; 63
     838:	cd bf       	out	0x3d, r28	; 61
     83a:	8c 01       	movw	r16, r24
     83c:	60 e0       	ldi	r22, 0x00	; 0
     83e:	73 e0       	ldi	r23, 0x03	; 3
     840:	89 e6       	ldi	r24, 0x69	; 105
     842:	0e 94 18 03 	call	0x630	; 0x630 <sensirion_i2c_write_cmd>
     846:	00 97       	sbiw	r24, 0x00	; 0
     848:	09 f0       	breq	.+2      	; 0x84c <sps30_read_measurement+0x2e>
     84a:	6a c0       	rjmp	.+212    	; 0x920 <__stack+0x21>
     84c:	44 e1       	ldi	r20, 0x14	; 20
     84e:	50 e0       	ldi	r21, 0x00	; 0
     850:	be 01       	movw	r22, r28
     852:	6f 5f       	subi	r22, 0xFF	; 255
     854:	7f 4f       	sbci	r23, 0xFF	; 255
     856:	89 e6       	ldi	r24, 0x69	; 105
     858:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <sensirion_i2c_read_words_as_bytes>
     85c:	7c 01       	movw	r14, r24
     85e:	00 97       	sbiw	r24, 0x00	; 0
     860:	09 f0       	breq	.+2      	; 0x864 <sps30_read_measurement+0x46>
     862:	5d c0       	rjmp	.+186    	; 0x91e <__stack+0x1f>
     864:	ce 01       	movw	r24, r28
     866:	01 96       	adiw	r24, 0x01	; 1
     868:	0e 94 00 02 	call	0x400	; 0x400 <sensirion_bytes_to_float>
     86c:	f8 01       	movw	r30, r16
     86e:	60 83       	st	Z, r22
     870:	71 83       	std	Z+1, r23	; 0x01
     872:	82 83       	std	Z+2, r24	; 0x02
     874:	93 83       	std	Z+3, r25	; 0x03
     876:	ce 01       	movw	r24, r28
     878:	05 96       	adiw	r24, 0x05	; 5
     87a:	0e 94 00 02 	call	0x400	; 0x400 <sensirion_bytes_to_float>
     87e:	f8 01       	movw	r30, r16
     880:	64 83       	std	Z+4, r22	; 0x04
     882:	75 83       	std	Z+5, r23	; 0x05
     884:	86 83       	std	Z+6, r24	; 0x06
     886:	97 83       	std	Z+7, r25	; 0x07
     888:	ce 01       	movw	r24, r28
     88a:	09 96       	adiw	r24, 0x09	; 9
     88c:	0e 94 00 02 	call	0x400	; 0x400 <sensirion_bytes_to_float>
     890:	f8 01       	movw	r30, r16
     892:	60 87       	std	Z+8, r22	; 0x08
     894:	71 87       	std	Z+9, r23	; 0x09
     896:	82 87       	std	Z+10, r24	; 0x0a
     898:	93 87       	std	Z+11, r25	; 0x0b
     89a:	ce 01       	movw	r24, r28
     89c:	0d 96       	adiw	r24, 0x0d	; 13
     89e:	0e 94 00 02 	call	0x400	; 0x400 <sensirion_bytes_to_float>
     8a2:	f8 01       	movw	r30, r16
     8a4:	64 87       	std	Z+12, r22	; 0x0c
     8a6:	75 87       	std	Z+13, r23	; 0x0d
     8a8:	86 87       	std	Z+14, r24	; 0x0e
     8aa:	97 87       	std	Z+15, r25	; 0x0f
     8ac:	ce 01       	movw	r24, r28
     8ae:	41 96       	adiw	r24, 0x11	; 17
     8b0:	0e 94 00 02 	call	0x400	; 0x400 <sensirion_bytes_to_float>
     8b4:	f8 01       	movw	r30, r16
     8b6:	60 8b       	std	Z+16, r22	; 0x10
     8b8:	71 8b       	std	Z+17, r23	; 0x11
     8ba:	82 8b       	std	Z+18, r24	; 0x12
     8bc:	93 8b       	std	Z+19, r25	; 0x13
     8be:	ce 01       	movw	r24, r28
     8c0:	45 96       	adiw	r24, 0x15	; 21
     8c2:	0e 94 00 02 	call	0x400	; 0x400 <sensirion_bytes_to_float>
     8c6:	f8 01       	movw	r30, r16
     8c8:	64 8b       	std	Z+20, r22	; 0x14
     8ca:	75 8b       	std	Z+21, r23	; 0x15
     8cc:	86 8b       	std	Z+22, r24	; 0x16
     8ce:	97 8b       	std	Z+23, r25	; 0x17
     8d0:	ce 01       	movw	r24, r28
     8d2:	49 96       	adiw	r24, 0x19	; 25
     8d4:	0e 94 00 02 	call	0x400	; 0x400 <sensirion_bytes_to_float>
     8d8:	f8 01       	movw	r30, r16
     8da:	60 8f       	std	Z+24, r22	; 0x18
     8dc:	71 8f       	std	Z+25, r23	; 0x19
     8de:	82 8f       	std	Z+26, r24	; 0x1a
     8e0:	93 8f       	std	Z+27, r25	; 0x1b
     8e2:	ce 01       	movw	r24, r28
     8e4:	4d 96       	adiw	r24, 0x1d	; 29
     8e6:	0e 94 00 02 	call	0x400	; 0x400 <sensirion_bytes_to_float>
     8ea:	f8 01       	movw	r30, r16
     8ec:	64 8f       	std	Z+28, r22	; 0x1c
     8ee:	75 8f       	std	Z+29, r23	; 0x1d
     8f0:	86 8f       	std	Z+30, r24	; 0x1e
     8f2:	97 8f       	std	Z+31, r25	; 0x1f
     8f4:	ce 01       	movw	r24, r28
     8f6:	81 96       	adiw	r24, 0x21	; 33
     8f8:	0e 94 00 02 	call	0x400	; 0x400 <sensirion_bytes_to_float>
     8fc:	f8 01       	movw	r30, r16
     8fe:	60 a3       	std	Z+32, r22	; 0x20
     900:	71 a3       	std	Z+33, r23	; 0x21
     902:	82 a3       	std	Z+34, r24	; 0x22
     904:	93 a3       	std	Z+35, r25	; 0x23
     906:	ce 01       	movw	r24, r28
     908:	85 96       	adiw	r24, 0x25	; 37
     90a:	0e 94 00 02 	call	0x400	; 0x400 <sensirion_bytes_to_float>
     90e:	f8 01       	movw	r30, r16
     910:	64 a3       	std	Z+36, r22	; 0x24
     912:	75 a3       	std	Z+37, r23	; 0x25
     914:	86 a3       	std	Z+38, r24	; 0x26
     916:	97 a3       	std	Z+39, r25	; 0x27
     918:	8e 2d       	mov	r24, r14
     91a:	9f 2d       	mov	r25, r15
     91c:	01 c0       	rjmp	.+2      	; 0x920 <__stack+0x21>
     91e:	9f 2d       	mov	r25, r15
     920:	a8 96       	adiw	r28, 0x28	; 40
     922:	0f b6       	in	r0, 0x3f	; 63
     924:	f8 94       	cli
     926:	de bf       	out	0x3e, r29	; 62
     928:	0f be       	out	0x3f, r0	; 63
     92a:	cd bf       	out	0x3d, r28	; 61
     92c:	df 91       	pop	r29
     92e:	cf 91       	pop	r28
     930:	1f 91       	pop	r17
     932:	0f 91       	pop	r16
     934:	ff 90       	pop	r15
     936:	ef 90       	pop	r14
     938:	08 95       	ret

0000093a <sps30_wake_up>:

int16_t sps30_wake_up(void) {
     93a:	cf 93       	push	r28
     93c:	df 93       	push	r29
    int16_t ret;

    /* wake-up must be sent twice within 100ms, ignore first return value */
    (void)sensirion_i2c_write_cmd(SPS30_I2C_ADDRESS, SPS_CMD_WAKE_UP);
     93e:	63 e0       	ldi	r22, 0x03	; 3
     940:	71 e1       	ldi	r23, 0x11	; 17
     942:	89 e6       	ldi	r24, 0x69	; 105
     944:	0e 94 18 03 	call	0x630	; 0x630 <sensirion_i2c_write_cmd>
    ret = sensirion_i2c_write_cmd(SPS30_I2C_ADDRESS, SPS_CMD_WAKE_UP);
     948:	63 e0       	ldi	r22, 0x03	; 3
     94a:	71 e1       	ldi	r23, 0x11	; 17
     94c:	89 e6       	ldi	r24, 0x69	; 105
     94e:	0e 94 18 03 	call	0x630	; 0x630 <sensirion_i2c_write_cmd>
     952:	ec 01       	movw	r28, r24
	
    if (ret)
     954:	89 2b       	or	r24, r25
     956:	31 f4       	brne	.+12     	; 0x964 <sps30_wake_up+0x2a>
	{
		//printf("\nret:%d\n", ret);
        return ret;
	}

    sensirion_sleep_usec(SPS_CMD_DELAY_USEC);
     958:	68 e8       	ldi	r22, 0x88	; 136
     95a:	73 e1       	ldi	r23, 0x13	; 19
     95c:	80 e0       	ldi	r24, 0x00	; 0
     95e:	90 e0       	ldi	r25, 0x00	; 0
     960:	0e 94 d5 04 	call	0x9aa	; 0x9aa <sensirion_sleep_usec>
    return 0;
}
     964:	ce 01       	movw	r24, r28
     966:	df 91       	pop	r29
     968:	cf 91       	pop	r28
     96a:	08 95       	ret

0000096c <sps30_probe>:

const char* sps_get_driver_version(void) {
    return SPS_DRV_VERSION_STR;
}

int16_t sps30_probe(void) {
     96c:	cf 93       	push	r28
     96e:	df 93       	push	r29
     970:	cd b7       	in	r28, 0x3d	; 61
     972:	de b7       	in	r29, 0x3e	; 62
     974:	a0 97       	sbiw	r28, 0x20	; 32
     976:	0f b6       	in	r0, 0x3f	; 63
     978:	f8 94       	cli
     97a:	de bf       	out	0x3e, r29	; 62
     97c:	0f be       	out	0x3f, r0	; 63
     97e:	cd bf       	out	0x3d, r28	; 61
    char serial[SPS30_MAX_SERIAL_LEN];

    // Try to wake up, but ignore failure if it is not in sleep mode
    (void)sps30_wake_up();
     980:	0e 94 9d 04 	call	0x93a	; 0x93a <sps30_wake_up>

    return sps30_get_serial(serial);
     984:	ce 01       	movw	r24, r28
     986:	01 96       	adiw	r24, 0x01	; 1
     988:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <sps30_get_serial>
}
     98c:	a0 96       	adiw	r28, 0x20	; 32
     98e:	0f b6       	in	r0, 0x3f	; 63
     990:	f8 94       	cli
     992:	de bf       	out	0x3e, r29	; 62
     994:	0f be       	out	0x3f, r0	; 63
     996:	cd bf       	out	0x3d, r28	; 61
     998:	df 91       	pop	r29
     99a:	cf 91       	pop	r28
     99c:	08 95       	ret

0000099e <sensirion_i2c_init>:
}

/**
 * Release all resources initialized by sensirion_i2c_init().
 */
void sensirion_i2c_release(void) {
     99e:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
     9a2:	89 e4       	ldi	r24, 0x49	; 73
     9a4:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__DATA_REGION_ORIGIN__+0x58>
     9a8:	08 95       	ret

000009aa <sensirion_sleep_usec>:
 *
 * Despite the unit, a <10 millisecond precision is sufficient.
 *
 * @param useconds the sleep time in microseconds
 */
void sensirion_sleep_usec(uint32_t useconds) {
     9aa:	4f 92       	push	r4
     9ac:	5f 92       	push	r5
     9ae:	6f 92       	push	r6
     9b0:	7f 92       	push	r7
     9b2:	8f 92       	push	r8
     9b4:	9f 92       	push	r9
     9b6:	af 92       	push	r10
     9b8:	bf 92       	push	r11
     9ba:	cf 92       	push	r12
     9bc:	df 92       	push	r13
     9be:	ef 92       	push	r14
     9c0:	ff 92       	push	r15
     9c2:	cf 93       	push	r28
    _delay_us(useconds);
     9c4:	0e 94 25 07 	call	0xe4a	; 0xe4a <__floatunsisf>
     9c8:	6b 01       	movw	r12, r22
     9ca:	7c 01       	movw	r14, r24
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
     9cc:	2b ea       	ldi	r18, 0xAB	; 171
     9ce:	3a ea       	ldi	r19, 0xAA	; 170
     9d0:	4a ea       	ldi	r20, 0xAA	; 170
     9d2:	50 e4       	ldi	r21, 0x40	; 64
     9d4:	0e 94 dc 07 	call	0xfb8	; 0xfb8 <__mulsf3>
     9d8:	4b 01       	movw	r8, r22
     9da:	5c 01       	movw	r10, r24
	__tmp2 = ((F_CPU) / 4e6) * __us;
	if (__tmp < 1.0)
     9dc:	20 e0       	ldi	r18, 0x00	; 0
     9de:	30 e0       	ldi	r19, 0x00	; 0
     9e0:	40 e8       	ldi	r20, 0x80	; 128
     9e2:	5f e3       	ldi	r21, 0x3F	; 63
     9e4:	0e 94 7f 06 	call	0xcfe	; 0xcfe <__cmpsf2>
     9e8:	88 23       	and	r24, r24
     9ea:	0c f4       	brge	.+2      	; 0x9ee <sensirion_sleep_usec+0x44>
     9ec:	70 c0       	rjmp	.+224    	; 0xace <sensirion_sleep_usec+0x124>

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
	__tmp2 = ((F_CPU) / 4e6) * __us;
     9ee:	20 e0       	ldi	r18, 0x00	; 0
     9f0:	30 e0       	ldi	r19, 0x00	; 0
     9f2:	40 e8       	ldi	r20, 0x80	; 128
     9f4:	50 e4       	ldi	r21, 0x40	; 64
     9f6:	c7 01       	movw	r24, r14
     9f8:	b6 01       	movw	r22, r12
     9fa:	0e 94 dc 07 	call	0xfb8	; 0xfb8 <__mulsf3>
     9fe:	2b 01       	movw	r4, r22
     a00:	3c 01       	movw	r6, r24
	if (__tmp < 1.0)
		__ticks = 1;
	else if (__tmp2 > 65535)
     a02:	20 e0       	ldi	r18, 0x00	; 0
     a04:	3f ef       	ldi	r19, 0xFF	; 255
     a06:	4f e7       	ldi	r20, 0x7F	; 127
     a08:	57 e4       	ldi	r21, 0x47	; 71
     a0a:	0e 94 d7 07 	call	0xfae	; 0xfae <__gesf2>
     a0e:	18 16       	cp	r1, r24
     a10:	0c f0       	brlt	.+2      	; 0xa14 <sensirion_sleep_usec+0x6a>
     a12:	45 c0       	rjmp	.+138    	; 0xa9e <sensirion_sleep_usec+0xf4>
	{
		_delay_ms(__us / 1000.0);
     a14:	20 e0       	ldi	r18, 0x00	; 0
     a16:	30 e0       	ldi	r19, 0x00	; 0
     a18:	4a e7       	ldi	r20, 0x7A	; 122
     a1a:	54 e4       	ldi	r21, 0x44	; 68
     a1c:	c7 01       	movw	r24, r14
     a1e:	b6 01       	movw	r22, r12
     a20:	0e 94 84 06 	call	0xd08	; 0xd08 <__divsf3>
     a24:	4b 01       	movw	r8, r22
     a26:	5c 01       	movw	r10, r24

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     a28:	20 e0       	ldi	r18, 0x00	; 0
     a2a:	30 e0       	ldi	r19, 0x00	; 0
     a2c:	4a e7       	ldi	r20, 0x7A	; 122
     a2e:	55 e4       	ldi	r21, 0x45	; 69
     a30:	0e 94 dc 07 	call	0xfb8	; 0xfb8 <__mulsf3>
     a34:	6b 01       	movw	r12, r22
     a36:	7c 01       	movw	r14, r24
	if (__tmp < 1.0)
     a38:	20 e0       	ldi	r18, 0x00	; 0
     a3a:	30 e0       	ldi	r19, 0x00	; 0
     a3c:	40 e8       	ldi	r20, 0x80	; 128
     a3e:	5f e3       	ldi	r21, 0x3F	; 63
     a40:	0e 94 7f 06 	call	0xcfe	; 0xcfe <__cmpsf2>
     a44:	88 23       	and	r24, r24
     a46:	2c f1       	brlt	.+74     	; 0xa92 <sensirion_sleep_usec+0xe8>
		__ticks = 1;
	else if (__tmp > 65535)
     a48:	20 e0       	ldi	r18, 0x00	; 0
     a4a:	3f ef       	ldi	r19, 0xFF	; 255
     a4c:	4f e7       	ldi	r20, 0x7F	; 127
     a4e:	57 e4       	ldi	r21, 0x47	; 71
     a50:	c7 01       	movw	r24, r14
     a52:	b6 01       	movw	r22, r12
     a54:	0e 94 d7 07 	call	0xfae	; 0xfae <__gesf2>
     a58:	18 16       	cp	r1, r24
     a5a:	b4 f4       	brge	.+44     	; 0xa88 <sensirion_sleep_usec+0xde>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     a5c:	20 e0       	ldi	r18, 0x00	; 0
     a5e:	30 e0       	ldi	r19, 0x00	; 0
     a60:	40 e2       	ldi	r20, 0x20	; 32
     a62:	51 e4       	ldi	r21, 0x41	; 65
     a64:	c5 01       	movw	r24, r10
     a66:	b4 01       	movw	r22, r8
     a68:	0e 94 dc 07 	call	0xfb8	; 0xfb8 <__mulsf3>
     a6c:	0e 94 f6 06 	call	0xdec	; 0xdec <__fixunssfsi>
		while(__ticks)
     a70:	61 15       	cp	r22, r1
     a72:	71 05       	cpc	r23, r1
     a74:	69 f1       	breq	.+90     	; 0xad0 <sensirion_sleep_usec+0x126>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     a76:	20 e9       	ldi	r18, 0x90	; 144
     a78:	31 e0       	ldi	r19, 0x01	; 1
     a7a:	c9 01       	movw	r24, r18
     a7c:	01 97       	sbiw	r24, 0x01	; 1
     a7e:	f1 f7       	brne	.-4      	; 0xa7c <sensirion_sleep_usec+0xd2>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     a80:	61 50       	subi	r22, 0x01	; 1
     a82:	71 09       	sbc	r23, r1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     a84:	d1 f7       	brne	.-12     	; 0xa7a <sensirion_sleep_usec+0xd0>
     a86:	24 c0       	rjmp	.+72     	; 0xad0 <sensirion_sleep_usec+0x126>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     a88:	c7 01       	movw	r24, r14
     a8a:	b6 01       	movw	r22, r12
     a8c:	0e 94 f6 06 	call	0xdec	; 0xdec <__fixunssfsi>
     a90:	02 c0       	rjmp	.+4      	; 0xa96 <sensirion_sleep_usec+0xec>

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
     a92:	61 e0       	ldi	r22, 0x01	; 1
     a94:	70 e0       	ldi	r23, 0x00	; 0
     a96:	cb 01       	movw	r24, r22
     a98:	01 97       	sbiw	r24, 0x01	; 1
     a9a:	f1 f7       	brne	.-4      	; 0xa98 <sensirion_sleep_usec+0xee>
     a9c:	19 c0       	rjmp	.+50     	; 0xad0 <sensirion_sleep_usec+0x126>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
     a9e:	20 e0       	ldi	r18, 0x00	; 0
     aa0:	30 e0       	ldi	r19, 0x00	; 0
     aa2:	4f e7       	ldi	r20, 0x7F	; 127
     aa4:	53 e4       	ldi	r21, 0x43	; 67
     aa6:	c5 01       	movw	r24, r10
     aa8:	b4 01       	movw	r22, r8
     aaa:	0e 94 d7 07 	call	0xfae	; 0xfae <__gesf2>
     aae:	18 16       	cp	r1, r24
     ab0:	44 f4       	brge	.+16     	; 0xac2 <sensirion_sleep_usec+0x118>
     ab2:	c3 01       	movw	r24, r6
     ab4:	b2 01       	movw	r22, r4
     ab6:	0e 94 f6 06 	call	0xdec	; 0xdec <__fixunssfsi>
     aba:	cb 01       	movw	r24, r22
     abc:	01 97       	sbiw	r24, 0x01	; 1
     abe:	f1 f7       	brne	.-4      	; 0xabc <sensirion_sleep_usec+0x112>
     ac0:	0a c0       	rjmp	.+20     	; 0xad6 <sensirion_sleep_usec+0x12c>
		uint16_t __ticks=(uint16_t)__tmp2;
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     ac2:	c5 01       	movw	r24, r10
     ac4:	b4 01       	movw	r22, r8
     ac6:	0e 94 f6 06 	call	0xdec	; 0xdec <__fixunssfsi>
     aca:	c6 2f       	mov	r28, r22
     acc:	01 c0       	rjmp	.+2      	; 0xad0 <sensirion_sleep_usec+0x126>
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
	__tmp2 = ((F_CPU) / 4e6) * __us;
	if (__tmp < 1.0)
		__ticks = 1;
     ace:	c1 e0       	ldi	r28, 0x01	; 1
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     ad0:	6c 2f       	mov	r22, r28
     ad2:	6a 95       	dec	r22
     ad4:	f1 f7       	brne	.-4      	; 0xad2 <sensirion_sleep_usec+0x128>
    //     } else {
    //         _delay_us(useconds);
    //         useconds = 0;
    //     }
    // }
}
     ad6:	cf 91       	pop	r28
     ad8:	ff 90       	pop	r15
     ada:	ef 90       	pop	r14
     adc:	df 90       	pop	r13
     ade:	cf 90       	pop	r12
     ae0:	bf 90       	pop	r11
     ae2:	af 90       	pop	r10
     ae4:	9f 90       	pop	r9
     ae6:	8f 90       	pop	r8
     ae8:	7f 90       	pop	r7
     aea:	6f 90       	pop	r6
     aec:	5f 90       	pop	r5
     aee:	4f 90       	pop	r4
     af0:	08 95       	ret

00000af2 <i2c_io>:

uint8_t i2c_io(uint8_t device_addr, uint8_t *wp, uint16_t wn, uint8_t *rp, uint16_t rn)
{
     af2:	bf 92       	push	r11
     af4:	cf 92       	push	r12
     af6:	df 92       	push	r13
     af8:	ef 92       	push	r14
     afa:	ff 92       	push	r15
     afc:	0f 93       	push	r16
     afe:	1f 93       	push	r17
     b00:	cf 93       	push	r28
     b02:	df 93       	push	r29

	status = 0;
	wrote = 0;
	send_stop = 0;

	if (wn > 0) {
     b04:	41 15       	cp	r20, r1
     b06:	51 05       	cpc	r21, r1
     b08:	09 f4       	brne	.+2      	; 0xb0c <i2c_io+0x1a>
     b0a:	b1 c0       	rjmp	.+354    	; 0xc6e <i2c_io+0x17c>
		wrote = 1;
		send_stop = 1;

		TWCR0 = (1 << TWINT) | (1 << TWEN) | (1 << TWSTA);  // Send start condition
     b0c:	94 ea       	ldi	r25, 0xA4	; 164
     b0e:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
		while (!(TWCR0 & (1 << TWINT)));     // Wait for TWINT to be set
     b12:	ec eb       	ldi	r30, 0xBC	; 188
     b14:	f0 e0       	ldi	r31, 0x00	; 0
     b16:	90 81       	ld	r25, Z
     b18:	99 23       	and	r25, r25
     b1a:	ec f7       	brge	.-6      	; 0xb16 <i2c_io+0x24>
     b1c:	68 01       	movw	r12, r16
     b1e:	98 2f       	mov	r25, r24
		status = TWSR0 & 0xf8;
     b20:	c0 91 b9 00 	lds	r28, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
     b24:	c8 7f       	andi	r28, 0xF8	; 248
		if (status != 0x08)                 // Check that START was sent OK
     b26:	c8 30       	cpi	r28, 0x08	; 8
     b28:	31 f0       	breq	.+12     	; 0xb36 <i2c_io+0x44>
		{
			printf("Status != 0x08\n");
     b2a:	86 ec       	ldi	r24, 0xC6	; 198
     b2c:	92 e0       	ldi	r25, 0x02	; 2
     b2e:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <puts>
			return(status);
     b32:	8c 2f       	mov	r24, r28
     b34:	b4 c0       	rjmp	.+360    	; 0xc9e <i2c_io+0x1ac>
		}

		//TWDR0 = device_addr & 0xfe;          // Load device address and R/W = 0;
		TWDR0 = device_addr << 1;
     b36:	99 0f       	add	r25, r25
     b38:	90 93 bb 00 	sts	0x00BB, r25	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
		// 01101001 & 11111110 = 01101000
		// 01101001 << 1 = 11010010
		TWCR0 = (1 << TWINT) | (1 << TWEN);  // Start transmission
     b3c:	94 e8       	ldi	r25, 0x84	; 132
     b3e:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
		while (!(TWCR0 & (1 << TWINT)));     // Wait for TWINT to be set
     b42:	ec eb       	ldi	r30, 0xBC	; 188
     b44:	f0 e0       	ldi	r31, 0x00	; 0
     b46:	90 81       	ld	r25, Z
     b48:	99 23       	and	r25, r25
     b4a:	ec f7       	brge	.-6      	; 0xb46 <i2c_io+0x54>
		status = TWSR0 & 0xf8;
     b4c:	c0 91 b9 00 	lds	r28, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
     b50:	c8 7f       	andi	r28, 0xF8	; 248
		if (status != 0x18) {               // Check that SLA+W was sent OK
     b52:	c8 31       	cpi	r28, 0x18	; 24
     b54:	09 f4       	brne	.+2      	; 0xb58 <i2c_io+0x66>
     b56:	96 c0       	rjmp	.+300    	; 0xc84 <i2c_io+0x192>
			if (status == 0x20)             // Check for NAK
     b58:	c0 32       	cpi	r28, 0x20	; 32
     b5a:	09 f0       	breq	.+2      	; 0xb5e <i2c_io+0x6c>
     b5c:	80 c0       	rjmp	.+256    	; 0xc5e <i2c_io+0x16c>
			{
				printf("Going to nakstop\n");
     b5e:	85 ed       	ldi	r24, 0xD5	; 213
     b60:	92 e0       	ldi	r25, 0x02	; 2
     b62:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <puts>
				goto nakstop;
     b66:	76 c0       	rjmp	.+236    	; 0xc54 <i2c_io+0x162>
			return(status);                 // Otherwise just return the status
		}

		// Write "wn" data bytes to the slave device
		while (wn-- > 0) {
			TWDR0 = *wp++;                   // Put next data byte in TWDR
     b68:	e7 01       	movw	r28, r14
     b6a:	99 91       	ld	r25, Y+
     b6c:	7e 01       	movw	r14, r28
     b6e:	eb 01       	movw	r28, r22
     b70:	98 83       	st	Y, r25
			TWCR0 = (1 << TWINT) | (1 << TWEN); // Start transmission
     b72:	b0 82       	st	Z, r11
			while (!(TWCR0 & (1 << TWINT))); // Wait for TWINT to be set
     b74:	90 81       	ld	r25, Z
     b76:	99 23       	and	r25, r25
     b78:	ec f7       	brge	.-6      	; 0xb74 <i2c_io+0x82>
			status = TWSR0 & 0xf8;
     b7a:	cc 91       	ld	r28, X
     b7c:	c8 7f       	andi	r28, 0xF8	; 248
			if (status != 0x28) {           // Check that data was sent OK
     b7e:	c8 32       	cpi	r28, 0x28	; 40
     b80:	29 f0       	breq	.+10     	; 0xb8c <i2c_io+0x9a>
				if (status == 0x30)         // Check for NAK
     b82:	c0 33       	cpi	r28, 0x30	; 48
     b84:	09 f4       	brne	.+2      	; 0xb88 <i2c_io+0x96>
     b86:	66 c0       	rjmp	.+204    	; 0xc54 <i2c_io+0x162>
		// Write "wn" data bytes to the slave device
		while (wn-- > 0) {
			TWDR0 = *wp++;                   // Put next data byte in TWDR
			TWCR0 = (1 << TWINT) | (1 << TWEN); // Start transmission
			while (!(TWCR0 & (1 << TWINT))); // Wait for TWINT to be set
			status = TWSR0 & 0xf8;
     b88:	8c 2f       	mov	r24, r28
     b8a:	89 c0       	rjmp	.+274    	; 0xc9e <i2c_io+0x1ac>
     b8c:	41 50       	subi	r20, 0x01	; 1
     b8e:	51 09       	sbc	r21, r1
			}               // Send STOP condition
			return(status);                 // Otherwise just return the status
		}

		// Write "wn" data bytes to the slave device
		while (wn-- > 0) {
     b90:	59 f7       	brne	.-42     	; 0xb68 <i2c_io+0x76>
     b92:	73 c0       	rjmp	.+230    	; 0xc7a <i2c_io+0x188>
	if (rn > 0) {
		send_stop = 1;

		// Set the status value to check for depending on whether this is a
		// START or repeated START
		start_stat = (wrote) ? 0x10 : 0x08;
     b94:	48 e0       	ldi	r20, 0x08	; 8
     b96:	01 c0       	rjmp	.+2      	; 0xb9a <i2c_io+0xa8>
     b98:	40 e1       	ldi	r20, 0x10	; 16

		// Put TWI into Master Receive mode by sending a START, which could
		// be a repeated START condition if we just finished writing.
		TWCR0 = (1 << TWINT) | (1 << TWEN) | (1 << TWSTA);
     b9a:	94 ea       	ldi	r25, 0xA4	; 164
     b9c:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
		// Send start (or repeated start) condition
		while (!(TWCR0 & (1 << TWINT)));     // Wait for TWINT to be set
     ba0:	ec eb       	ldi	r30, 0xBC	; 188
     ba2:	f0 e0       	ldi	r31, 0x00	; 0
     ba4:	90 81       	ld	r25, Z
     ba6:	99 23       	and	r25, r25
     ba8:	ec f7       	brge	.-6      	; 0xba4 <i2c_io+0xb2>
		status = TWSR0 & 0xf8;
     baa:	c0 91 b9 00 	lds	r28, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
     bae:	c8 7f       	andi	r28, 0xF8	; 248
		if (status != start_stat)           // Check that START or repeated START sent OK
     bb0:	4c 13       	cpse	r20, r28
     bb2:	57 c0       	rjmp	.+174    	; 0xc62 <i2c_io+0x170>
		return(status);

		//TWDR0 = device_addr  | 0x01;         // Load device address and R/W = 1;
		TWDR0 = (device_addr << 1) | 0x01;
     bb4:	88 0f       	add	r24, r24
     bb6:	81 60       	ori	r24, 0x01	; 1
     bb8:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
		
		TWCR0 = (1 << TWINT) | (1 << TWEN);  // Send address+r
     bbc:	84 e8       	ldi	r24, 0x84	; 132
     bbe:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
		while (!(TWCR0 & (1 << TWINT)));     // Wait for TWINT to be set
     bc2:	ec eb       	ldi	r30, 0xBC	; 188
     bc4:	f0 e0       	ldi	r31, 0x00	; 0
     bc6:	80 81       	ld	r24, Z
     bc8:	88 23       	and	r24, r24
     bca:	ec f7       	brge	.-6      	; 0xbc6 <i2c_io+0xd4>
		status = TWSR0 & 0xf8;
     bcc:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
     bd0:	c8 2f       	mov	r28, r24
     bd2:	c8 7f       	andi	r28, 0xF8	; 248
		if (status != 0x40) {               // Check that SLA+R was sent OK
     bd4:	c0 34       	cpi	r28, 0x40	; 64
     bd6:	21 f0       	breq	.+8      	; 0xbe0 <i2c_io+0xee>
			if (status == 0x48)             // Check for NAK
     bd8:	c8 34       	cpi	r28, 0x48	; 72
     bda:	e1 f1       	breq	.+120    	; 0xc54 <i2c_io+0x162>
			goto nakstop;
			return(status);
     bdc:	8c 2f       	mov	r24, r28
     bde:	5f c0       	rjmp	.+190    	; 0xc9e <i2c_io+0x1ac>
		}

		// Read all but the last of n bytes from the slave device in this loop
		rn--;
		while (rn-- > 0) {
     be0:	01 30       	cpi	r16, 0x01	; 1
     be2:	11 05       	cpc	r17, r1
     be4:	21 f1       	breq	.+72     	; 0xc2e <i2c_io+0x13c>
     be6:	d9 01       	movw	r26, r18
			TWCR0 = (1 << TWINT) | (1 << TWEN) | (1 << TWEA); // Read byte and send ACK
     be8:	ec eb       	ldi	r30, 0xBC	; 188
     bea:	f0 e0       	ldi	r31, 0x00	; 0
     bec:	0f 2e       	mov	r0, r31
     bee:	f4 ec       	ldi	r31, 0xC4	; 196
     bf0:	ff 2e       	mov	r15, r31
     bf2:	f0 2d       	mov	r31, r0
			while (!(TWCR0 & (1 << TWINT))); // Wait for TWINT to be set
			status = TWSR0 & 0xf8;
     bf4:	49 eb       	ldi	r20, 0xB9	; 185
     bf6:	50 e0       	ldi	r21, 0x00	; 0
			if (status != 0x50)             // Check that data received OK
			return(status);
			*rp++ = TWDR0;                   // Read the data
     bf8:	6b eb       	ldi	r22, 0xBB	; 187
     bfa:	70 e0       	ldi	r23, 0x00	; 0
     bfc:	01 50       	subi	r16, 0x01	; 1
     bfe:	11 09       	sbc	r17, r1
		}

		// Read all but the last of n bytes from the slave device in this loop
		rn--;
		while (rn-- > 0) {
			TWCR0 = (1 << TWINT) | (1 << TWEN) | (1 << TWEA); // Read byte and send ACK
     c00:	f0 82       	st	Z, r15
			while (!(TWCR0 & (1 << TWINT))); // Wait for TWINT to be set
     c02:	80 81       	ld	r24, Z
     c04:	88 23       	and	r24, r24
     c06:	ec f7       	brge	.-6      	; 0xc02 <i2c_io+0x110>
			status = TWSR0 & 0xf8;
     c08:	ea 01       	movw	r28, r20
     c0a:	88 81       	ld	r24, Y
     c0c:	c8 2f       	mov	r28, r24
     c0e:	c8 7f       	andi	r28, 0xF8	; 248
			if (status != 0x50)             // Check that data received OK
     c10:	c0 35       	cpi	r28, 0x50	; 80
     c12:	49 f5       	brne	.+82     	; 0xc66 <i2c_io+0x174>
			return(status);
			*rp++ = TWDR0;                   // Read the data
     c14:	11 96       	adiw	r26, 0x01	; 1
     c16:	eb 01       	movw	r28, r22
     c18:	88 81       	ld	r24, Y
     c1a:	ed 01       	movw	r28, r26
     c1c:	21 97       	sbiw	r28, 0x01	; 1
     c1e:	88 83       	st	Y, r24
     c20:	cd 01       	movw	r24, r26
     c22:	80 1b       	sub	r24, r16
     c24:	91 0b       	sbc	r25, r17
			return(status);
		}

		// Read all but the last of n bytes from the slave device in this loop
		rn--;
		while (rn-- > 0) {
     c26:	82 17       	cp	r24, r18
     c28:	93 07       	cpc	r25, r19
     c2a:	51 f7       	brne	.-44     	; 0xc00 <i2c_io+0x10e>
     c2c:	01 c0       	rjmp	.+2      	; 0xc30 <i2c_io+0x13e>
     c2e:	d9 01       	movw	r26, r18
			return(status);
			*rp++ = TWDR0;                   // Read the data
		}

		// Read the last byte
		TWCR0 = (1 << TWINT) | (1 << TWEN);  // Read last byte with NOT ACK sent
     c30:	84 e8       	ldi	r24, 0x84	; 132
     c32:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
		while (!(TWCR0 & (1 << TWINT)));     // Wait for TWINT to be set
     c36:	ec eb       	ldi	r30, 0xBC	; 188
     c38:	f0 e0       	ldi	r31, 0x00	; 0
     c3a:	80 81       	ld	r24, Z
     c3c:	88 23       	and	r24, r24
     c3e:	ec f7       	brge	.-6      	; 0xc3a <i2c_io+0x148>
		status = TWSR0 & 0xf8;
     c40:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
     c44:	c8 2f       	mov	r28, r24
     c46:	c8 7f       	andi	r28, 0xF8	; 248
		if (status != 0x58)                 // Check that data received OK
     c48:	c8 35       	cpi	r28, 0x58	; 88
     c4a:	79 f4       	brne	.+30     	; 0xc6a <i2c_io+0x178>
		return(status);
		*rp++ = TWDR0;                       // Read the data
     c4c:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
     c50:	8c 93       	st	X, r24

		status = 0;                         // Set status value to successful
     c52:	c0 e0       	ldi	r28, 0x00	; 0
	}
	
	nakstop:                                    // Come here to send STOP after a NAK
	if (send_stop)
		TWCR0 = (1 << TWINT) | (1 << TWEN) | (1 << TWSTO);  // Send STOP condition
     c54:	84 e9       	ldi	r24, 0x94	; 148
     c56:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
     c5a:	8c 2f       	mov	r24, r28
     c5c:	20 c0       	rjmp	.+64     	; 0xc9e <i2c_io+0x1ac>
			if (status == 0x20)             // Check for NAK
			{
				printf("Going to nakstop\n");
				goto nakstop;
			}               // Send STOP condition
			return(status);                 // Otherwise just return the status
     c5e:	8c 2f       	mov	r24, r28
     c60:	1e c0       	rjmp	.+60     	; 0xc9e <i2c_io+0x1ac>
		TWCR0 = (1 << TWINT) | (1 << TWEN) | (1 << TWSTA);
		// Send start (or repeated start) condition
		while (!(TWCR0 & (1 << TWINT)));     // Wait for TWINT to be set
		status = TWSR0 & 0xf8;
		if (status != start_stat)           // Check that START or repeated START sent OK
		return(status);
     c62:	8c 2f       	mov	r24, r28
     c64:	1c c0       	rjmp	.+56     	; 0xc9e <i2c_io+0x1ac>
		// Read all but the last of n bytes from the slave device in this loop
		rn--;
		while (rn-- > 0) {
			TWCR0 = (1 << TWINT) | (1 << TWEN) | (1 << TWEA); // Read byte and send ACK
			while (!(TWCR0 & (1 << TWINT))); // Wait for TWINT to be set
			status = TWSR0 & 0xf8;
     c66:	8c 2f       	mov	r24, r28
     c68:	1a c0       	rjmp	.+52     	; 0xc9e <i2c_io+0x1ac>
		// Read the last byte
		TWCR0 = (1 << TWINT) | (1 << TWEN);  // Read last byte with NOT ACK sent
		while (!(TWCR0 & (1 << TWINT)));     // Wait for TWINT to be set
		status = TWSR0 & 0xf8;
		if (status != 0x58)                 // Check that data received OK
		return(status);
     c6a:	8c 2f       	mov	r24, r28
     c6c:	18 c0       	rjmp	.+48     	; 0xc9e <i2c_io+0x1ac>
		}

		status = 0;                         // Set status value to successful
	}

	if (rn > 0) {
     c6e:	01 15       	cp	r16, r1
     c70:	11 05       	cpc	r17, r1
     c72:	09 f0       	breq	.+2      	; 0xc76 <i2c_io+0x184>
     c74:	8f cf       	rjmp	.-226    	; 0xb94 <i2c_io+0xa2>
     c76:	80 e0       	ldi	r24, 0x00	; 0
     c78:	12 c0       	rjmp	.+36     	; 0xc9e <i2c_io+0x1ac>
     c7a:	cd 28       	or	r12, r13
     c7c:	09 f0       	breq	.+2      	; 0xc80 <i2c_io+0x18e>
     c7e:	8c cf       	rjmp	.-232    	; 0xb98 <i2c_io+0xa6>
     c80:	c0 e0       	ldi	r28, 0x00	; 0
     c82:	e8 cf       	rjmp	.-48     	; 0xc54 <i2c_io+0x162>
     c84:	e6 2e       	mov	r14, r22
     c86:	f7 2e       	mov	r15, r23
			return(status);                 // Otherwise just return the status
		}

		// Write "wn" data bytes to the slave device
		while (wn-- > 0) {
			TWDR0 = *wp++;                   // Put next data byte in TWDR
     c88:	6b eb       	ldi	r22, 0xBB	; 187
     c8a:	70 e0       	ldi	r23, 0x00	; 0
			TWCR0 = (1 << TWINT) | (1 << TWEN); // Start transmission
     c8c:	ec eb       	ldi	r30, 0xBC	; 188
     c8e:	f0 e0       	ldi	r31, 0x00	; 0
     c90:	0f 2e       	mov	r0, r31
     c92:	f4 e8       	ldi	r31, 0x84	; 132
     c94:	bf 2e       	mov	r11, r31
     c96:	f0 2d       	mov	r31, r0
			while (!(TWCR0 & (1 << TWINT))); // Wait for TWINT to be set
			status = TWSR0 & 0xf8;
     c98:	a9 eb       	ldi	r26, 0xB9	; 185
     c9a:	b0 e0       	ldi	r27, 0x00	; 0
     c9c:	65 cf       	rjmp	.-310    	; 0xb68 <i2c_io+0x76>
	nakstop:                                    // Come here to send STOP after a NAK
	if (send_stop)
		TWCR0 = (1 << TWINT) | (1 << TWEN) | (1 << TWSTO);  // Send STOP condition
	
	return(status);
     c9e:	df 91       	pop	r29
     ca0:	cf 91       	pop	r28
     ca2:	1f 91       	pop	r17
     ca4:	0f 91       	pop	r16
     ca6:	ff 90       	pop	r15
     ca8:	ef 90       	pop	r14
     caa:	df 90       	pop	r13
     cac:	cf 90       	pop	r12
     cae:	bf 90       	pop	r11
     cb0:	08 95       	ret

00000cb2 <sensirion_i2c_read>:
 * @param address 7-bit I2C address to read from
 * @param data    pointer to the buffer where the data is to be stored
 * @param count   number of bytes to read from I2C and store in the buffer
 * @returns 0 on success, error code otherwise
 */
int8_t sensirion_i2c_read(uint8_t address, uint8_t* data, uint16_t count) {
     cb2:	0f 93       	push	r16
     cb4:	1f 93       	push	r17
     cb6:	9b 01       	movw	r18, r22
    if(i2c_io(SPS30_ADDR, NULL, 0, data, count) != 0)
     cb8:	8a 01       	movw	r16, r20
     cba:	40 e0       	ldi	r20, 0x00	; 0
     cbc:	50 e0       	ldi	r21, 0x00	; 0
     cbe:	60 e0       	ldi	r22, 0x00	; 0
     cc0:	70 e0       	ldi	r23, 0x00	; 0
     cc2:	89 e6       	ldi	r24, 0x69	; 105
     cc4:	0e 94 79 05 	call	0xaf2	; 0xaf2 <i2c_io>
     cc8:	91 e0       	ldi	r25, 0x01	; 1
     cca:	81 11       	cpse	r24, r1
     ccc:	01 c0       	rjmp	.+2      	; 0xcd0 <sensirion_i2c_read+0x1e>
     cce:	90 e0       	ldi	r25, 0x00	; 0
    	return STATUS_FAIL;
	return NO_ERROR;
}
     cd0:	89 2f       	mov	r24, r25
     cd2:	81 95       	neg	r24
     cd4:	1f 91       	pop	r17
     cd6:	0f 91       	pop	r16
     cd8:	08 95       	ret

00000cda <sensirion_i2c_write>:
 * @param data    pointer to the buffer containing the data to write
 * @param count   number of bytes to read from the buffer and send over I2C
 * @returns 0 on success, error code otherwise
 */
int8_t sensirion_i2c_write(uint8_t address, const uint8_t* data,
                           uint16_t count) {
     cda:	0f 93       	push	r16
     cdc:	1f 93       	push	r17
	if(i2c_io(SPS30_ADDR, data, count, NULL, 0) != 0)
     cde:	00 e0       	ldi	r16, 0x00	; 0
     ce0:	10 e0       	ldi	r17, 0x00	; 0
     ce2:	20 e0       	ldi	r18, 0x00	; 0
     ce4:	30 e0       	ldi	r19, 0x00	; 0
     ce6:	89 e6       	ldi	r24, 0x69	; 105
     ce8:	0e 94 79 05 	call	0xaf2	; 0xaf2 <i2c_io>
     cec:	91 e0       	ldi	r25, 0x01	; 1
     cee:	81 11       	cpse	r24, r1
     cf0:	01 c0       	rjmp	.+2      	; 0xcf4 <sensirion_i2c_write+0x1a>
     cf2:	90 e0       	ldi	r25, 0x00	; 0
    	return STATUS_FAIL;
	return NO_ERROR;
}
     cf4:	89 2f       	mov	r24, r25
     cf6:	81 95       	neg	r24
     cf8:	1f 91       	pop	r17
     cfa:	0f 91       	pop	r16
     cfc:	08 95       	ret

00000cfe <__cmpsf2>:
     cfe:	0e 94 62 07 	call	0xec4	; 0xec4 <__fp_cmp>
     d02:	08 f4       	brcc	.+2      	; 0xd06 <__cmpsf2+0x8>
     d04:	81 e0       	ldi	r24, 0x01	; 1
     d06:	08 95       	ret

00000d08 <__divsf3>:
     d08:	0e 94 98 06 	call	0xd30	; 0xd30 <__divsf3x>
     d0c:	0c 94 9d 07 	jmp	0xf3a	; 0xf3a <__fp_round>
     d10:	0e 94 96 07 	call	0xf2c	; 0xf2c <__fp_pscB>
     d14:	58 f0       	brcs	.+22     	; 0xd2c <__divsf3+0x24>
     d16:	0e 94 8f 07 	call	0xf1e	; 0xf1e <__fp_pscA>
     d1a:	40 f0       	brcs	.+16     	; 0xd2c <__divsf3+0x24>
     d1c:	29 f4       	brne	.+10     	; 0xd28 <__divsf3+0x20>
     d1e:	5f 3f       	cpi	r21, 0xFF	; 255
     d20:	29 f0       	breq	.+10     	; 0xd2c <__divsf3+0x24>
     d22:	0c 94 86 07 	jmp	0xf0c	; 0xf0c <__fp_inf>
     d26:	51 11       	cpse	r21, r1
     d28:	0c 94 d1 07 	jmp	0xfa2	; 0xfa2 <__fp_szero>
     d2c:	0c 94 8c 07 	jmp	0xf18	; 0xf18 <__fp_nan>

00000d30 <__divsf3x>:
     d30:	0e 94 ae 07 	call	0xf5c	; 0xf5c <__fp_split3>
     d34:	68 f3       	brcs	.-38     	; 0xd10 <__divsf3+0x8>

00000d36 <__divsf3_pse>:
     d36:	99 23       	and	r25, r25
     d38:	b1 f3       	breq	.-20     	; 0xd26 <__divsf3+0x1e>
     d3a:	55 23       	and	r21, r21
     d3c:	91 f3       	breq	.-28     	; 0xd22 <__divsf3+0x1a>
     d3e:	95 1b       	sub	r25, r21
     d40:	55 0b       	sbc	r21, r21
     d42:	bb 27       	eor	r27, r27
     d44:	aa 27       	eor	r26, r26
     d46:	62 17       	cp	r22, r18
     d48:	73 07       	cpc	r23, r19
     d4a:	84 07       	cpc	r24, r20
     d4c:	38 f0       	brcs	.+14     	; 0xd5c <__divsf3_pse+0x26>
     d4e:	9f 5f       	subi	r25, 0xFF	; 255
     d50:	5f 4f       	sbci	r21, 0xFF	; 255
     d52:	22 0f       	add	r18, r18
     d54:	33 1f       	adc	r19, r19
     d56:	44 1f       	adc	r20, r20
     d58:	aa 1f       	adc	r26, r26
     d5a:	a9 f3       	breq	.-22     	; 0xd46 <__divsf3_pse+0x10>
     d5c:	35 d0       	rcall	.+106    	; 0xdc8 <__divsf3_pse+0x92>
     d5e:	0e 2e       	mov	r0, r30
     d60:	3a f0       	brmi	.+14     	; 0xd70 <__divsf3_pse+0x3a>
     d62:	e0 e8       	ldi	r30, 0x80	; 128
     d64:	32 d0       	rcall	.+100    	; 0xdca <__divsf3_pse+0x94>
     d66:	91 50       	subi	r25, 0x01	; 1
     d68:	50 40       	sbci	r21, 0x00	; 0
     d6a:	e6 95       	lsr	r30
     d6c:	00 1c       	adc	r0, r0
     d6e:	ca f7       	brpl	.-14     	; 0xd62 <__divsf3_pse+0x2c>
     d70:	2b d0       	rcall	.+86     	; 0xdc8 <__divsf3_pse+0x92>
     d72:	fe 2f       	mov	r31, r30
     d74:	29 d0       	rcall	.+82     	; 0xdc8 <__divsf3_pse+0x92>
     d76:	66 0f       	add	r22, r22
     d78:	77 1f       	adc	r23, r23
     d7a:	88 1f       	adc	r24, r24
     d7c:	bb 1f       	adc	r27, r27
     d7e:	26 17       	cp	r18, r22
     d80:	37 07       	cpc	r19, r23
     d82:	48 07       	cpc	r20, r24
     d84:	ab 07       	cpc	r26, r27
     d86:	b0 e8       	ldi	r27, 0x80	; 128
     d88:	09 f0       	breq	.+2      	; 0xd8c <__divsf3_pse+0x56>
     d8a:	bb 0b       	sbc	r27, r27
     d8c:	80 2d       	mov	r24, r0
     d8e:	bf 01       	movw	r22, r30
     d90:	ff 27       	eor	r31, r31
     d92:	93 58       	subi	r25, 0x83	; 131
     d94:	5f 4f       	sbci	r21, 0xFF	; 255
     d96:	3a f0       	brmi	.+14     	; 0xda6 <__divsf3_pse+0x70>
     d98:	9e 3f       	cpi	r25, 0xFE	; 254
     d9a:	51 05       	cpc	r21, r1
     d9c:	78 f0       	brcs	.+30     	; 0xdbc <__divsf3_pse+0x86>
     d9e:	0c 94 86 07 	jmp	0xf0c	; 0xf0c <__fp_inf>
     da2:	0c 94 d1 07 	jmp	0xfa2	; 0xfa2 <__fp_szero>
     da6:	5f 3f       	cpi	r21, 0xFF	; 255
     da8:	e4 f3       	brlt	.-8      	; 0xda2 <__divsf3_pse+0x6c>
     daa:	98 3e       	cpi	r25, 0xE8	; 232
     dac:	d4 f3       	brlt	.-12     	; 0xda2 <__divsf3_pse+0x6c>
     dae:	86 95       	lsr	r24
     db0:	77 95       	ror	r23
     db2:	67 95       	ror	r22
     db4:	b7 95       	ror	r27
     db6:	f7 95       	ror	r31
     db8:	9f 5f       	subi	r25, 0xFF	; 255
     dba:	c9 f7       	brne	.-14     	; 0xdae <__divsf3_pse+0x78>
     dbc:	88 0f       	add	r24, r24
     dbe:	91 1d       	adc	r25, r1
     dc0:	96 95       	lsr	r25
     dc2:	87 95       	ror	r24
     dc4:	97 f9       	bld	r25, 7
     dc6:	08 95       	ret
     dc8:	e1 e0       	ldi	r30, 0x01	; 1
     dca:	66 0f       	add	r22, r22
     dcc:	77 1f       	adc	r23, r23
     dce:	88 1f       	adc	r24, r24
     dd0:	bb 1f       	adc	r27, r27
     dd2:	62 17       	cp	r22, r18
     dd4:	73 07       	cpc	r23, r19
     dd6:	84 07       	cpc	r24, r20
     dd8:	ba 07       	cpc	r27, r26
     dda:	20 f0       	brcs	.+8      	; 0xde4 <__divsf3_pse+0xae>
     ddc:	62 1b       	sub	r22, r18
     dde:	73 0b       	sbc	r23, r19
     de0:	84 0b       	sbc	r24, r20
     de2:	ba 0b       	sbc	r27, r26
     de4:	ee 1f       	adc	r30, r30
     de6:	88 f7       	brcc	.-30     	; 0xdca <__divsf3_pse+0x94>
     de8:	e0 95       	com	r30
     dea:	08 95       	ret

00000dec <__fixunssfsi>:
     dec:	0e 94 b6 07 	call	0xf6c	; 0xf6c <__fp_splitA>
     df0:	88 f0       	brcs	.+34     	; 0xe14 <__fixunssfsi+0x28>
     df2:	9f 57       	subi	r25, 0x7F	; 127
     df4:	98 f0       	brcs	.+38     	; 0xe1c <__fixunssfsi+0x30>
     df6:	b9 2f       	mov	r27, r25
     df8:	99 27       	eor	r25, r25
     dfa:	b7 51       	subi	r27, 0x17	; 23
     dfc:	b0 f0       	brcs	.+44     	; 0xe2a <__fixunssfsi+0x3e>
     dfe:	e1 f0       	breq	.+56     	; 0xe38 <__fixunssfsi+0x4c>
     e00:	66 0f       	add	r22, r22
     e02:	77 1f       	adc	r23, r23
     e04:	88 1f       	adc	r24, r24
     e06:	99 1f       	adc	r25, r25
     e08:	1a f0       	brmi	.+6      	; 0xe10 <__fixunssfsi+0x24>
     e0a:	ba 95       	dec	r27
     e0c:	c9 f7       	brne	.-14     	; 0xe00 <__fixunssfsi+0x14>
     e0e:	14 c0       	rjmp	.+40     	; 0xe38 <__fixunssfsi+0x4c>
     e10:	b1 30       	cpi	r27, 0x01	; 1
     e12:	91 f0       	breq	.+36     	; 0xe38 <__fixunssfsi+0x4c>
     e14:	0e 94 d0 07 	call	0xfa0	; 0xfa0 <__fp_zero>
     e18:	b1 e0       	ldi	r27, 0x01	; 1
     e1a:	08 95       	ret
     e1c:	0c 94 d0 07 	jmp	0xfa0	; 0xfa0 <__fp_zero>
     e20:	67 2f       	mov	r22, r23
     e22:	78 2f       	mov	r23, r24
     e24:	88 27       	eor	r24, r24
     e26:	b8 5f       	subi	r27, 0xF8	; 248
     e28:	39 f0       	breq	.+14     	; 0xe38 <__fixunssfsi+0x4c>
     e2a:	b9 3f       	cpi	r27, 0xF9	; 249
     e2c:	cc f3       	brlt	.-14     	; 0xe20 <__fixunssfsi+0x34>
     e2e:	86 95       	lsr	r24
     e30:	77 95       	ror	r23
     e32:	67 95       	ror	r22
     e34:	b3 95       	inc	r27
     e36:	d9 f7       	brne	.-10     	; 0xe2e <__fixunssfsi+0x42>
     e38:	3e f4       	brtc	.+14     	; 0xe48 <__fixunssfsi+0x5c>
     e3a:	90 95       	com	r25
     e3c:	80 95       	com	r24
     e3e:	70 95       	com	r23
     e40:	61 95       	neg	r22
     e42:	7f 4f       	sbci	r23, 0xFF	; 255
     e44:	8f 4f       	sbci	r24, 0xFF	; 255
     e46:	9f 4f       	sbci	r25, 0xFF	; 255
     e48:	08 95       	ret

00000e4a <__floatunsisf>:
     e4a:	e8 94       	clt
     e4c:	09 c0       	rjmp	.+18     	; 0xe60 <__floatsisf+0x12>

00000e4e <__floatsisf>:
     e4e:	97 fb       	bst	r25, 7
     e50:	3e f4       	brtc	.+14     	; 0xe60 <__floatsisf+0x12>
     e52:	90 95       	com	r25
     e54:	80 95       	com	r24
     e56:	70 95       	com	r23
     e58:	61 95       	neg	r22
     e5a:	7f 4f       	sbci	r23, 0xFF	; 255
     e5c:	8f 4f       	sbci	r24, 0xFF	; 255
     e5e:	9f 4f       	sbci	r25, 0xFF	; 255
     e60:	99 23       	and	r25, r25
     e62:	a9 f0       	breq	.+42     	; 0xe8e <__floatsisf+0x40>
     e64:	f9 2f       	mov	r31, r25
     e66:	96 e9       	ldi	r25, 0x96	; 150
     e68:	bb 27       	eor	r27, r27
     e6a:	93 95       	inc	r25
     e6c:	f6 95       	lsr	r31
     e6e:	87 95       	ror	r24
     e70:	77 95       	ror	r23
     e72:	67 95       	ror	r22
     e74:	b7 95       	ror	r27
     e76:	f1 11       	cpse	r31, r1
     e78:	f8 cf       	rjmp	.-16     	; 0xe6a <__floatsisf+0x1c>
     e7a:	fa f4       	brpl	.+62     	; 0xeba <__floatsisf+0x6c>
     e7c:	bb 0f       	add	r27, r27
     e7e:	11 f4       	brne	.+4      	; 0xe84 <__floatsisf+0x36>
     e80:	60 ff       	sbrs	r22, 0
     e82:	1b c0       	rjmp	.+54     	; 0xeba <__floatsisf+0x6c>
     e84:	6f 5f       	subi	r22, 0xFF	; 255
     e86:	7f 4f       	sbci	r23, 0xFF	; 255
     e88:	8f 4f       	sbci	r24, 0xFF	; 255
     e8a:	9f 4f       	sbci	r25, 0xFF	; 255
     e8c:	16 c0       	rjmp	.+44     	; 0xeba <__floatsisf+0x6c>
     e8e:	88 23       	and	r24, r24
     e90:	11 f0       	breq	.+4      	; 0xe96 <__floatsisf+0x48>
     e92:	96 e9       	ldi	r25, 0x96	; 150
     e94:	11 c0       	rjmp	.+34     	; 0xeb8 <__floatsisf+0x6a>
     e96:	77 23       	and	r23, r23
     e98:	21 f0       	breq	.+8      	; 0xea2 <__floatsisf+0x54>
     e9a:	9e e8       	ldi	r25, 0x8E	; 142
     e9c:	87 2f       	mov	r24, r23
     e9e:	76 2f       	mov	r23, r22
     ea0:	05 c0       	rjmp	.+10     	; 0xeac <__floatsisf+0x5e>
     ea2:	66 23       	and	r22, r22
     ea4:	71 f0       	breq	.+28     	; 0xec2 <__floatsisf+0x74>
     ea6:	96 e8       	ldi	r25, 0x86	; 134
     ea8:	86 2f       	mov	r24, r22
     eaa:	70 e0       	ldi	r23, 0x00	; 0
     eac:	60 e0       	ldi	r22, 0x00	; 0
     eae:	2a f0       	brmi	.+10     	; 0xeba <__floatsisf+0x6c>
     eb0:	9a 95       	dec	r25
     eb2:	66 0f       	add	r22, r22
     eb4:	77 1f       	adc	r23, r23
     eb6:	88 1f       	adc	r24, r24
     eb8:	da f7       	brpl	.-10     	; 0xeb0 <__floatsisf+0x62>
     eba:	88 0f       	add	r24, r24
     ebc:	96 95       	lsr	r25
     ebe:	87 95       	ror	r24
     ec0:	97 f9       	bld	r25, 7
     ec2:	08 95       	ret

00000ec4 <__fp_cmp>:
     ec4:	99 0f       	add	r25, r25
     ec6:	00 08       	sbc	r0, r0
     ec8:	55 0f       	add	r21, r21
     eca:	aa 0b       	sbc	r26, r26
     ecc:	e0 e8       	ldi	r30, 0x80	; 128
     ece:	fe ef       	ldi	r31, 0xFE	; 254
     ed0:	16 16       	cp	r1, r22
     ed2:	17 06       	cpc	r1, r23
     ed4:	e8 07       	cpc	r30, r24
     ed6:	f9 07       	cpc	r31, r25
     ed8:	c0 f0       	brcs	.+48     	; 0xf0a <__fp_cmp+0x46>
     eda:	12 16       	cp	r1, r18
     edc:	13 06       	cpc	r1, r19
     ede:	e4 07       	cpc	r30, r20
     ee0:	f5 07       	cpc	r31, r21
     ee2:	98 f0       	brcs	.+38     	; 0xf0a <__fp_cmp+0x46>
     ee4:	62 1b       	sub	r22, r18
     ee6:	73 0b       	sbc	r23, r19
     ee8:	84 0b       	sbc	r24, r20
     eea:	95 0b       	sbc	r25, r21
     eec:	39 f4       	brne	.+14     	; 0xefc <__fp_cmp+0x38>
     eee:	0a 26       	eor	r0, r26
     ef0:	61 f0       	breq	.+24     	; 0xf0a <__fp_cmp+0x46>
     ef2:	23 2b       	or	r18, r19
     ef4:	24 2b       	or	r18, r20
     ef6:	25 2b       	or	r18, r21
     ef8:	21 f4       	brne	.+8      	; 0xf02 <__fp_cmp+0x3e>
     efa:	08 95       	ret
     efc:	0a 26       	eor	r0, r26
     efe:	09 f4       	brne	.+2      	; 0xf02 <__fp_cmp+0x3e>
     f00:	a1 40       	sbci	r26, 0x01	; 1
     f02:	a6 95       	lsr	r26
     f04:	8f ef       	ldi	r24, 0xFF	; 255
     f06:	81 1d       	adc	r24, r1
     f08:	81 1d       	adc	r24, r1
     f0a:	08 95       	ret

00000f0c <__fp_inf>:
     f0c:	97 f9       	bld	r25, 7
     f0e:	9f 67       	ori	r25, 0x7F	; 127
     f10:	80 e8       	ldi	r24, 0x80	; 128
     f12:	70 e0       	ldi	r23, 0x00	; 0
     f14:	60 e0       	ldi	r22, 0x00	; 0
     f16:	08 95       	ret

00000f18 <__fp_nan>:
     f18:	9f ef       	ldi	r25, 0xFF	; 255
     f1a:	80 ec       	ldi	r24, 0xC0	; 192
     f1c:	08 95       	ret

00000f1e <__fp_pscA>:
     f1e:	00 24       	eor	r0, r0
     f20:	0a 94       	dec	r0
     f22:	16 16       	cp	r1, r22
     f24:	17 06       	cpc	r1, r23
     f26:	18 06       	cpc	r1, r24
     f28:	09 06       	cpc	r0, r25
     f2a:	08 95       	ret

00000f2c <__fp_pscB>:
     f2c:	00 24       	eor	r0, r0
     f2e:	0a 94       	dec	r0
     f30:	12 16       	cp	r1, r18
     f32:	13 06       	cpc	r1, r19
     f34:	14 06       	cpc	r1, r20
     f36:	05 06       	cpc	r0, r21
     f38:	08 95       	ret

00000f3a <__fp_round>:
     f3a:	09 2e       	mov	r0, r25
     f3c:	03 94       	inc	r0
     f3e:	00 0c       	add	r0, r0
     f40:	11 f4       	brne	.+4      	; 0xf46 <__fp_round+0xc>
     f42:	88 23       	and	r24, r24
     f44:	52 f0       	brmi	.+20     	; 0xf5a <__fp_round+0x20>
     f46:	bb 0f       	add	r27, r27
     f48:	40 f4       	brcc	.+16     	; 0xf5a <__fp_round+0x20>
     f4a:	bf 2b       	or	r27, r31
     f4c:	11 f4       	brne	.+4      	; 0xf52 <__fp_round+0x18>
     f4e:	60 ff       	sbrs	r22, 0
     f50:	04 c0       	rjmp	.+8      	; 0xf5a <__fp_round+0x20>
     f52:	6f 5f       	subi	r22, 0xFF	; 255
     f54:	7f 4f       	sbci	r23, 0xFF	; 255
     f56:	8f 4f       	sbci	r24, 0xFF	; 255
     f58:	9f 4f       	sbci	r25, 0xFF	; 255
     f5a:	08 95       	ret

00000f5c <__fp_split3>:
     f5c:	57 fd       	sbrc	r21, 7
     f5e:	90 58       	subi	r25, 0x80	; 128
     f60:	44 0f       	add	r20, r20
     f62:	55 1f       	adc	r21, r21
     f64:	59 f0       	breq	.+22     	; 0xf7c <__fp_splitA+0x10>
     f66:	5f 3f       	cpi	r21, 0xFF	; 255
     f68:	71 f0       	breq	.+28     	; 0xf86 <__fp_splitA+0x1a>
     f6a:	47 95       	ror	r20

00000f6c <__fp_splitA>:
     f6c:	88 0f       	add	r24, r24
     f6e:	97 fb       	bst	r25, 7
     f70:	99 1f       	adc	r25, r25
     f72:	61 f0       	breq	.+24     	; 0xf8c <__fp_splitA+0x20>
     f74:	9f 3f       	cpi	r25, 0xFF	; 255
     f76:	79 f0       	breq	.+30     	; 0xf96 <__fp_splitA+0x2a>
     f78:	87 95       	ror	r24
     f7a:	08 95       	ret
     f7c:	12 16       	cp	r1, r18
     f7e:	13 06       	cpc	r1, r19
     f80:	14 06       	cpc	r1, r20
     f82:	55 1f       	adc	r21, r21
     f84:	f2 cf       	rjmp	.-28     	; 0xf6a <__fp_split3+0xe>
     f86:	46 95       	lsr	r20
     f88:	f1 df       	rcall	.-30     	; 0xf6c <__fp_splitA>
     f8a:	08 c0       	rjmp	.+16     	; 0xf9c <__fp_splitA+0x30>
     f8c:	16 16       	cp	r1, r22
     f8e:	17 06       	cpc	r1, r23
     f90:	18 06       	cpc	r1, r24
     f92:	99 1f       	adc	r25, r25
     f94:	f1 cf       	rjmp	.-30     	; 0xf78 <__fp_splitA+0xc>
     f96:	86 95       	lsr	r24
     f98:	71 05       	cpc	r23, r1
     f9a:	61 05       	cpc	r22, r1
     f9c:	08 94       	sec
     f9e:	08 95       	ret

00000fa0 <__fp_zero>:
     fa0:	e8 94       	clt

00000fa2 <__fp_szero>:
     fa2:	bb 27       	eor	r27, r27
     fa4:	66 27       	eor	r22, r22
     fa6:	77 27       	eor	r23, r23
     fa8:	cb 01       	movw	r24, r22
     faa:	97 f9       	bld	r25, 7
     fac:	08 95       	ret

00000fae <__gesf2>:
     fae:	0e 94 62 07 	call	0xec4	; 0xec4 <__fp_cmp>
     fb2:	08 f4       	brcc	.+2      	; 0xfb6 <__gesf2+0x8>
     fb4:	8f ef       	ldi	r24, 0xFF	; 255
     fb6:	08 95       	ret

00000fb8 <__mulsf3>:
     fb8:	0e 94 ef 07 	call	0xfde	; 0xfde <__mulsf3x>
     fbc:	0c 94 9d 07 	jmp	0xf3a	; 0xf3a <__fp_round>
     fc0:	0e 94 8f 07 	call	0xf1e	; 0xf1e <__fp_pscA>
     fc4:	38 f0       	brcs	.+14     	; 0xfd4 <__mulsf3+0x1c>
     fc6:	0e 94 96 07 	call	0xf2c	; 0xf2c <__fp_pscB>
     fca:	20 f0       	brcs	.+8      	; 0xfd4 <__mulsf3+0x1c>
     fcc:	95 23       	and	r25, r21
     fce:	11 f0       	breq	.+4      	; 0xfd4 <__mulsf3+0x1c>
     fd0:	0c 94 86 07 	jmp	0xf0c	; 0xf0c <__fp_inf>
     fd4:	0c 94 8c 07 	jmp	0xf18	; 0xf18 <__fp_nan>
     fd8:	11 24       	eor	r1, r1
     fda:	0c 94 d1 07 	jmp	0xfa2	; 0xfa2 <__fp_szero>

00000fde <__mulsf3x>:
     fde:	0e 94 ae 07 	call	0xf5c	; 0xf5c <__fp_split3>
     fe2:	70 f3       	brcs	.-36     	; 0xfc0 <__mulsf3+0x8>

00000fe4 <__mulsf3_pse>:
     fe4:	95 9f       	mul	r25, r21
     fe6:	c1 f3       	breq	.-16     	; 0xfd8 <__mulsf3+0x20>
     fe8:	95 0f       	add	r25, r21
     fea:	50 e0       	ldi	r21, 0x00	; 0
     fec:	55 1f       	adc	r21, r21
     fee:	62 9f       	mul	r22, r18
     ff0:	f0 01       	movw	r30, r0
     ff2:	72 9f       	mul	r23, r18
     ff4:	bb 27       	eor	r27, r27
     ff6:	f0 0d       	add	r31, r0
     ff8:	b1 1d       	adc	r27, r1
     ffa:	63 9f       	mul	r22, r19
     ffc:	aa 27       	eor	r26, r26
     ffe:	f0 0d       	add	r31, r0
    1000:	b1 1d       	adc	r27, r1
    1002:	aa 1f       	adc	r26, r26
    1004:	64 9f       	mul	r22, r20
    1006:	66 27       	eor	r22, r22
    1008:	b0 0d       	add	r27, r0
    100a:	a1 1d       	adc	r26, r1
    100c:	66 1f       	adc	r22, r22
    100e:	82 9f       	mul	r24, r18
    1010:	22 27       	eor	r18, r18
    1012:	b0 0d       	add	r27, r0
    1014:	a1 1d       	adc	r26, r1
    1016:	62 1f       	adc	r22, r18
    1018:	73 9f       	mul	r23, r19
    101a:	b0 0d       	add	r27, r0
    101c:	a1 1d       	adc	r26, r1
    101e:	62 1f       	adc	r22, r18
    1020:	83 9f       	mul	r24, r19
    1022:	a0 0d       	add	r26, r0
    1024:	61 1d       	adc	r22, r1
    1026:	22 1f       	adc	r18, r18
    1028:	74 9f       	mul	r23, r20
    102a:	33 27       	eor	r19, r19
    102c:	a0 0d       	add	r26, r0
    102e:	61 1d       	adc	r22, r1
    1030:	23 1f       	adc	r18, r19
    1032:	84 9f       	mul	r24, r20
    1034:	60 0d       	add	r22, r0
    1036:	21 1d       	adc	r18, r1
    1038:	82 2f       	mov	r24, r18
    103a:	76 2f       	mov	r23, r22
    103c:	6a 2f       	mov	r22, r26
    103e:	11 24       	eor	r1, r1
    1040:	9f 57       	subi	r25, 0x7F	; 127
    1042:	50 40       	sbci	r21, 0x00	; 0
    1044:	9a f0       	brmi	.+38     	; 0x106c <__mulsf3_pse+0x88>
    1046:	f1 f0       	breq	.+60     	; 0x1084 <__mulsf3_pse+0xa0>
    1048:	88 23       	and	r24, r24
    104a:	4a f0       	brmi	.+18     	; 0x105e <__mulsf3_pse+0x7a>
    104c:	ee 0f       	add	r30, r30
    104e:	ff 1f       	adc	r31, r31
    1050:	bb 1f       	adc	r27, r27
    1052:	66 1f       	adc	r22, r22
    1054:	77 1f       	adc	r23, r23
    1056:	88 1f       	adc	r24, r24
    1058:	91 50       	subi	r25, 0x01	; 1
    105a:	50 40       	sbci	r21, 0x00	; 0
    105c:	a9 f7       	brne	.-22     	; 0x1048 <__mulsf3_pse+0x64>
    105e:	9e 3f       	cpi	r25, 0xFE	; 254
    1060:	51 05       	cpc	r21, r1
    1062:	80 f0       	brcs	.+32     	; 0x1084 <__mulsf3_pse+0xa0>
    1064:	0c 94 86 07 	jmp	0xf0c	; 0xf0c <__fp_inf>
    1068:	0c 94 d1 07 	jmp	0xfa2	; 0xfa2 <__fp_szero>
    106c:	5f 3f       	cpi	r21, 0xFF	; 255
    106e:	e4 f3       	brlt	.-8      	; 0x1068 <__mulsf3_pse+0x84>
    1070:	98 3e       	cpi	r25, 0xE8	; 232
    1072:	d4 f3       	brlt	.-12     	; 0x1068 <__mulsf3_pse+0x84>
    1074:	86 95       	lsr	r24
    1076:	77 95       	ror	r23
    1078:	67 95       	ror	r22
    107a:	b7 95       	ror	r27
    107c:	f7 95       	ror	r31
    107e:	e7 95       	ror	r30
    1080:	9f 5f       	subi	r25, 0xFF	; 255
    1082:	c1 f7       	brne	.-16     	; 0x1074 <__mulsf3_pse+0x90>
    1084:	fe 2b       	or	r31, r30
    1086:	88 0f       	add	r24, r24
    1088:	91 1d       	adc	r25, r1
    108a:	96 95       	lsr	r25
    108c:	87 95       	ror	r24
    108e:	97 f9       	bld	r25, 7
    1090:	08 95       	ret

00001092 <vfprintf>:
    1092:	a0 e1       	ldi	r26, 0x10	; 16
    1094:	b0 e0       	ldi	r27, 0x00	; 0
    1096:	ef e4       	ldi	r30, 0x4F	; 79
    1098:	f8 e0       	ldi	r31, 0x08	; 8
    109a:	0c 94 c6 0b 	jmp	0x178c	; 0x178c <__prologue_saves__>
    109e:	7c 01       	movw	r14, r24
    10a0:	1b 01       	movw	r2, r22
    10a2:	6a 01       	movw	r12, r20
    10a4:	fc 01       	movw	r30, r24
    10a6:	17 82       	std	Z+7, r1	; 0x07
    10a8:	16 82       	std	Z+6, r1	; 0x06
    10aa:	83 81       	ldd	r24, Z+3	; 0x03
    10ac:	81 ff       	sbrs	r24, 1
    10ae:	44 c3       	rjmp	.+1672   	; 0x1738 <vfprintf+0x6a6>
    10b0:	9e 01       	movw	r18, r28
    10b2:	2f 5f       	subi	r18, 0xFF	; 255
    10b4:	3f 4f       	sbci	r19, 0xFF	; 255
    10b6:	39 01       	movw	r6, r18
    10b8:	f7 01       	movw	r30, r14
    10ba:	93 81       	ldd	r25, Z+3	; 0x03
    10bc:	f1 01       	movw	r30, r2
    10be:	93 fd       	sbrc	r25, 3
    10c0:	85 91       	lpm	r24, Z+
    10c2:	93 ff       	sbrs	r25, 3
    10c4:	81 91       	ld	r24, Z+
    10c6:	1f 01       	movw	r2, r30
    10c8:	88 23       	and	r24, r24
    10ca:	09 f4       	brne	.+2      	; 0x10ce <vfprintf+0x3c>
    10cc:	31 c3       	rjmp	.+1634   	; 0x1730 <vfprintf+0x69e>
    10ce:	85 32       	cpi	r24, 0x25	; 37
    10d0:	39 f4       	brne	.+14     	; 0x10e0 <vfprintf+0x4e>
    10d2:	93 fd       	sbrc	r25, 3
    10d4:	85 91       	lpm	r24, Z+
    10d6:	93 ff       	sbrs	r25, 3
    10d8:	81 91       	ld	r24, Z+
    10da:	1f 01       	movw	r2, r30
    10dc:	85 32       	cpi	r24, 0x25	; 37
    10de:	39 f4       	brne	.+14     	; 0x10ee <vfprintf+0x5c>
    10e0:	b7 01       	movw	r22, r14
    10e2:	90 e0       	ldi	r25, 0x00	; 0
    10e4:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <fputc>
    10e8:	56 01       	movw	r10, r12
    10ea:	65 01       	movw	r12, r10
    10ec:	e5 cf       	rjmp	.-54     	; 0x10b8 <vfprintf+0x26>
    10ee:	10 e0       	ldi	r17, 0x00	; 0
    10f0:	51 2c       	mov	r5, r1
    10f2:	91 2c       	mov	r9, r1
    10f4:	ff e1       	ldi	r31, 0x1F	; 31
    10f6:	f9 15       	cp	r31, r9
    10f8:	d8 f0       	brcs	.+54     	; 0x1130 <vfprintf+0x9e>
    10fa:	8b 32       	cpi	r24, 0x2B	; 43
    10fc:	79 f0       	breq	.+30     	; 0x111c <vfprintf+0x8a>
    10fe:	38 f4       	brcc	.+14     	; 0x110e <vfprintf+0x7c>
    1100:	80 32       	cpi	r24, 0x20	; 32
    1102:	79 f0       	breq	.+30     	; 0x1122 <vfprintf+0x90>
    1104:	83 32       	cpi	r24, 0x23	; 35
    1106:	a1 f4       	brne	.+40     	; 0x1130 <vfprintf+0x9e>
    1108:	f9 2d       	mov	r31, r9
    110a:	f0 61       	ori	r31, 0x10	; 16
    110c:	2e c0       	rjmp	.+92     	; 0x116a <vfprintf+0xd8>
    110e:	8d 32       	cpi	r24, 0x2D	; 45
    1110:	61 f0       	breq	.+24     	; 0x112a <vfprintf+0x98>
    1112:	80 33       	cpi	r24, 0x30	; 48
    1114:	69 f4       	brne	.+26     	; 0x1130 <vfprintf+0x9e>
    1116:	29 2d       	mov	r18, r9
    1118:	21 60       	ori	r18, 0x01	; 1
    111a:	2d c0       	rjmp	.+90     	; 0x1176 <vfprintf+0xe4>
    111c:	39 2d       	mov	r19, r9
    111e:	32 60       	ori	r19, 0x02	; 2
    1120:	93 2e       	mov	r9, r19
    1122:	89 2d       	mov	r24, r9
    1124:	84 60       	ori	r24, 0x04	; 4
    1126:	98 2e       	mov	r9, r24
    1128:	2a c0       	rjmp	.+84     	; 0x117e <vfprintf+0xec>
    112a:	e9 2d       	mov	r30, r9
    112c:	e8 60       	ori	r30, 0x08	; 8
    112e:	15 c0       	rjmp	.+42     	; 0x115a <vfprintf+0xc8>
    1130:	97 fc       	sbrc	r9, 7
    1132:	2d c0       	rjmp	.+90     	; 0x118e <vfprintf+0xfc>
    1134:	20 ed       	ldi	r18, 0xD0	; 208
    1136:	28 0f       	add	r18, r24
    1138:	2a 30       	cpi	r18, 0x0A	; 10
    113a:	88 f4       	brcc	.+34     	; 0x115e <vfprintf+0xcc>
    113c:	96 fe       	sbrs	r9, 6
    113e:	06 c0       	rjmp	.+12     	; 0x114c <vfprintf+0xba>
    1140:	3a e0       	ldi	r19, 0x0A	; 10
    1142:	13 9f       	mul	r17, r19
    1144:	20 0d       	add	r18, r0
    1146:	11 24       	eor	r1, r1
    1148:	12 2f       	mov	r17, r18
    114a:	19 c0       	rjmp	.+50     	; 0x117e <vfprintf+0xec>
    114c:	8a e0       	ldi	r24, 0x0A	; 10
    114e:	58 9e       	mul	r5, r24
    1150:	20 0d       	add	r18, r0
    1152:	11 24       	eor	r1, r1
    1154:	52 2e       	mov	r5, r18
    1156:	e9 2d       	mov	r30, r9
    1158:	e0 62       	ori	r30, 0x20	; 32
    115a:	9e 2e       	mov	r9, r30
    115c:	10 c0       	rjmp	.+32     	; 0x117e <vfprintf+0xec>
    115e:	8e 32       	cpi	r24, 0x2E	; 46
    1160:	31 f4       	brne	.+12     	; 0x116e <vfprintf+0xdc>
    1162:	96 fc       	sbrc	r9, 6
    1164:	e5 c2       	rjmp	.+1482   	; 0x1730 <vfprintf+0x69e>
    1166:	f9 2d       	mov	r31, r9
    1168:	f0 64       	ori	r31, 0x40	; 64
    116a:	9f 2e       	mov	r9, r31
    116c:	08 c0       	rjmp	.+16     	; 0x117e <vfprintf+0xec>
    116e:	8c 36       	cpi	r24, 0x6C	; 108
    1170:	21 f4       	brne	.+8      	; 0x117a <vfprintf+0xe8>
    1172:	29 2d       	mov	r18, r9
    1174:	20 68       	ori	r18, 0x80	; 128
    1176:	92 2e       	mov	r9, r18
    1178:	02 c0       	rjmp	.+4      	; 0x117e <vfprintf+0xec>
    117a:	88 36       	cpi	r24, 0x68	; 104
    117c:	41 f4       	brne	.+16     	; 0x118e <vfprintf+0xfc>
    117e:	f1 01       	movw	r30, r2
    1180:	93 fd       	sbrc	r25, 3
    1182:	85 91       	lpm	r24, Z+
    1184:	93 ff       	sbrs	r25, 3
    1186:	81 91       	ld	r24, Z+
    1188:	1f 01       	movw	r2, r30
    118a:	81 11       	cpse	r24, r1
    118c:	b3 cf       	rjmp	.-154    	; 0x10f4 <vfprintf+0x62>
    118e:	9b eb       	ldi	r25, 0xBB	; 187
    1190:	98 0f       	add	r25, r24
    1192:	93 30       	cpi	r25, 0x03	; 3
    1194:	20 f4       	brcc	.+8      	; 0x119e <vfprintf+0x10c>
    1196:	99 2d       	mov	r25, r9
    1198:	90 61       	ori	r25, 0x10	; 16
    119a:	80 5e       	subi	r24, 0xE0	; 224
    119c:	07 c0       	rjmp	.+14     	; 0x11ac <vfprintf+0x11a>
    119e:	9b e9       	ldi	r25, 0x9B	; 155
    11a0:	98 0f       	add	r25, r24
    11a2:	93 30       	cpi	r25, 0x03	; 3
    11a4:	08 f0       	brcs	.+2      	; 0x11a8 <vfprintf+0x116>
    11a6:	66 c1       	rjmp	.+716    	; 0x1474 <vfprintf+0x3e2>
    11a8:	99 2d       	mov	r25, r9
    11aa:	9f 7e       	andi	r25, 0xEF	; 239
    11ac:	96 ff       	sbrs	r25, 6
    11ae:	16 e0       	ldi	r17, 0x06	; 6
    11b0:	9f 73       	andi	r25, 0x3F	; 63
    11b2:	99 2e       	mov	r9, r25
    11b4:	85 36       	cpi	r24, 0x65	; 101
    11b6:	19 f4       	brne	.+6      	; 0x11be <vfprintf+0x12c>
    11b8:	90 64       	ori	r25, 0x40	; 64
    11ba:	99 2e       	mov	r9, r25
    11bc:	08 c0       	rjmp	.+16     	; 0x11ce <vfprintf+0x13c>
    11be:	86 36       	cpi	r24, 0x66	; 102
    11c0:	21 f4       	brne	.+8      	; 0x11ca <vfprintf+0x138>
    11c2:	39 2f       	mov	r19, r25
    11c4:	30 68       	ori	r19, 0x80	; 128
    11c6:	93 2e       	mov	r9, r19
    11c8:	02 c0       	rjmp	.+4      	; 0x11ce <vfprintf+0x13c>
    11ca:	11 11       	cpse	r17, r1
    11cc:	11 50       	subi	r17, 0x01	; 1
    11ce:	97 fe       	sbrs	r9, 7
    11d0:	07 c0       	rjmp	.+14     	; 0x11e0 <vfprintf+0x14e>
    11d2:	1c 33       	cpi	r17, 0x3C	; 60
    11d4:	50 f4       	brcc	.+20     	; 0x11ea <vfprintf+0x158>
    11d6:	44 24       	eor	r4, r4
    11d8:	43 94       	inc	r4
    11da:	41 0e       	add	r4, r17
    11dc:	27 e0       	ldi	r18, 0x07	; 7
    11de:	0b c0       	rjmp	.+22     	; 0x11f6 <vfprintf+0x164>
    11e0:	18 30       	cpi	r17, 0x08	; 8
    11e2:	38 f0       	brcs	.+14     	; 0x11f2 <vfprintf+0x160>
    11e4:	27 e0       	ldi	r18, 0x07	; 7
    11e6:	17 e0       	ldi	r17, 0x07	; 7
    11e8:	05 c0       	rjmp	.+10     	; 0x11f4 <vfprintf+0x162>
    11ea:	27 e0       	ldi	r18, 0x07	; 7
    11ec:	9c e3       	ldi	r25, 0x3C	; 60
    11ee:	49 2e       	mov	r4, r25
    11f0:	02 c0       	rjmp	.+4      	; 0x11f6 <vfprintf+0x164>
    11f2:	21 2f       	mov	r18, r17
    11f4:	41 2c       	mov	r4, r1
    11f6:	56 01       	movw	r10, r12
    11f8:	84 e0       	ldi	r24, 0x04	; 4
    11fa:	a8 0e       	add	r10, r24
    11fc:	b1 1c       	adc	r11, r1
    11fe:	f6 01       	movw	r30, r12
    1200:	60 81       	ld	r22, Z
    1202:	71 81       	ldd	r23, Z+1	; 0x01
    1204:	82 81       	ldd	r24, Z+2	; 0x02
    1206:	93 81       	ldd	r25, Z+3	; 0x03
    1208:	04 2d       	mov	r16, r4
    120a:	a3 01       	movw	r20, r6
    120c:	0e 94 fd 0b 	call	0x17fa	; 0x17fa <__ftoa_engine>
    1210:	6c 01       	movw	r12, r24
    1212:	f9 81       	ldd	r31, Y+1	; 0x01
    1214:	fc 87       	std	Y+12, r31	; 0x0c
    1216:	f0 ff       	sbrs	r31, 0
    1218:	02 c0       	rjmp	.+4      	; 0x121e <vfprintf+0x18c>
    121a:	f3 ff       	sbrs	r31, 3
    121c:	06 c0       	rjmp	.+12     	; 0x122a <vfprintf+0x198>
    121e:	91 fc       	sbrc	r9, 1
    1220:	06 c0       	rjmp	.+12     	; 0x122e <vfprintf+0x19c>
    1222:	92 fe       	sbrs	r9, 2
    1224:	06 c0       	rjmp	.+12     	; 0x1232 <vfprintf+0x1a0>
    1226:	00 e2       	ldi	r16, 0x20	; 32
    1228:	05 c0       	rjmp	.+10     	; 0x1234 <vfprintf+0x1a2>
    122a:	0d e2       	ldi	r16, 0x2D	; 45
    122c:	03 c0       	rjmp	.+6      	; 0x1234 <vfprintf+0x1a2>
    122e:	0b e2       	ldi	r16, 0x2B	; 43
    1230:	01 c0       	rjmp	.+2      	; 0x1234 <vfprintf+0x1a2>
    1232:	00 e0       	ldi	r16, 0x00	; 0
    1234:	8c 85       	ldd	r24, Y+12	; 0x0c
    1236:	8c 70       	andi	r24, 0x0C	; 12
    1238:	19 f0       	breq	.+6      	; 0x1240 <vfprintf+0x1ae>
    123a:	01 11       	cpse	r16, r1
    123c:	5a c2       	rjmp	.+1204   	; 0x16f2 <vfprintf+0x660>
    123e:	9b c2       	rjmp	.+1334   	; 0x1776 <vfprintf+0x6e4>
    1240:	97 fe       	sbrs	r9, 7
    1242:	10 c0       	rjmp	.+32     	; 0x1264 <vfprintf+0x1d2>
    1244:	4c 0c       	add	r4, r12
    1246:	fc 85       	ldd	r31, Y+12	; 0x0c
    1248:	f4 ff       	sbrs	r31, 4
    124a:	04 c0       	rjmp	.+8      	; 0x1254 <vfprintf+0x1c2>
    124c:	8a 81       	ldd	r24, Y+2	; 0x02
    124e:	81 33       	cpi	r24, 0x31	; 49
    1250:	09 f4       	brne	.+2      	; 0x1254 <vfprintf+0x1c2>
    1252:	4a 94       	dec	r4
    1254:	14 14       	cp	r1, r4
    1256:	74 f5       	brge	.+92     	; 0x12b4 <vfprintf+0x222>
    1258:	28 e0       	ldi	r18, 0x08	; 8
    125a:	24 15       	cp	r18, r4
    125c:	78 f5       	brcc	.+94     	; 0x12bc <vfprintf+0x22a>
    125e:	88 e0       	ldi	r24, 0x08	; 8
    1260:	48 2e       	mov	r4, r24
    1262:	2c c0       	rjmp	.+88     	; 0x12bc <vfprintf+0x22a>
    1264:	96 fc       	sbrc	r9, 6
    1266:	2a c0       	rjmp	.+84     	; 0x12bc <vfprintf+0x22a>
    1268:	81 2f       	mov	r24, r17
    126a:	90 e0       	ldi	r25, 0x00	; 0
    126c:	8c 15       	cp	r24, r12
    126e:	9d 05       	cpc	r25, r13
    1270:	9c f0       	brlt	.+38     	; 0x1298 <vfprintf+0x206>
    1272:	3c ef       	ldi	r19, 0xFC	; 252
    1274:	c3 16       	cp	r12, r19
    1276:	3f ef       	ldi	r19, 0xFF	; 255
    1278:	d3 06       	cpc	r13, r19
    127a:	74 f0       	brlt	.+28     	; 0x1298 <vfprintf+0x206>
    127c:	89 2d       	mov	r24, r9
    127e:	80 68       	ori	r24, 0x80	; 128
    1280:	98 2e       	mov	r9, r24
    1282:	0a c0       	rjmp	.+20     	; 0x1298 <vfprintf+0x206>
    1284:	e2 e0       	ldi	r30, 0x02	; 2
    1286:	f0 e0       	ldi	r31, 0x00	; 0
    1288:	ec 0f       	add	r30, r28
    128a:	fd 1f       	adc	r31, r29
    128c:	e1 0f       	add	r30, r17
    128e:	f1 1d       	adc	r31, r1
    1290:	80 81       	ld	r24, Z
    1292:	80 33       	cpi	r24, 0x30	; 48
    1294:	19 f4       	brne	.+6      	; 0x129c <vfprintf+0x20a>
    1296:	11 50       	subi	r17, 0x01	; 1
    1298:	11 11       	cpse	r17, r1
    129a:	f4 cf       	rjmp	.-24     	; 0x1284 <vfprintf+0x1f2>
    129c:	97 fe       	sbrs	r9, 7
    129e:	0e c0       	rjmp	.+28     	; 0x12bc <vfprintf+0x22a>
    12a0:	44 24       	eor	r4, r4
    12a2:	43 94       	inc	r4
    12a4:	41 0e       	add	r4, r17
    12a6:	81 2f       	mov	r24, r17
    12a8:	90 e0       	ldi	r25, 0x00	; 0
    12aa:	c8 16       	cp	r12, r24
    12ac:	d9 06       	cpc	r13, r25
    12ae:	2c f4       	brge	.+10     	; 0x12ba <vfprintf+0x228>
    12b0:	1c 19       	sub	r17, r12
    12b2:	04 c0       	rjmp	.+8      	; 0x12bc <vfprintf+0x22a>
    12b4:	44 24       	eor	r4, r4
    12b6:	43 94       	inc	r4
    12b8:	01 c0       	rjmp	.+2      	; 0x12bc <vfprintf+0x22a>
    12ba:	10 e0       	ldi	r17, 0x00	; 0
    12bc:	97 fe       	sbrs	r9, 7
    12be:	06 c0       	rjmp	.+12     	; 0x12cc <vfprintf+0x23a>
    12c0:	1c 14       	cp	r1, r12
    12c2:	1d 04       	cpc	r1, r13
    12c4:	34 f4       	brge	.+12     	; 0x12d2 <vfprintf+0x240>
    12c6:	c6 01       	movw	r24, r12
    12c8:	01 96       	adiw	r24, 0x01	; 1
    12ca:	05 c0       	rjmp	.+10     	; 0x12d6 <vfprintf+0x244>
    12cc:	85 e0       	ldi	r24, 0x05	; 5
    12ce:	90 e0       	ldi	r25, 0x00	; 0
    12d0:	02 c0       	rjmp	.+4      	; 0x12d6 <vfprintf+0x244>
    12d2:	81 e0       	ldi	r24, 0x01	; 1
    12d4:	90 e0       	ldi	r25, 0x00	; 0
    12d6:	01 11       	cpse	r16, r1
    12d8:	01 96       	adiw	r24, 0x01	; 1
    12da:	11 23       	and	r17, r17
    12dc:	31 f0       	breq	.+12     	; 0x12ea <vfprintf+0x258>
    12de:	21 2f       	mov	r18, r17
    12e0:	30 e0       	ldi	r19, 0x00	; 0
    12e2:	2f 5f       	subi	r18, 0xFF	; 255
    12e4:	3f 4f       	sbci	r19, 0xFF	; 255
    12e6:	82 0f       	add	r24, r18
    12e8:	93 1f       	adc	r25, r19
    12ea:	25 2d       	mov	r18, r5
    12ec:	30 e0       	ldi	r19, 0x00	; 0
    12ee:	82 17       	cp	r24, r18
    12f0:	93 07       	cpc	r25, r19
    12f2:	14 f4       	brge	.+4      	; 0x12f8 <vfprintf+0x266>
    12f4:	58 1a       	sub	r5, r24
    12f6:	01 c0       	rjmp	.+2      	; 0x12fa <vfprintf+0x268>
    12f8:	51 2c       	mov	r5, r1
    12fa:	89 2d       	mov	r24, r9
    12fc:	89 70       	andi	r24, 0x09	; 9
    12fe:	49 f4       	brne	.+18     	; 0x1312 <vfprintf+0x280>
    1300:	55 20       	and	r5, r5
    1302:	39 f0       	breq	.+14     	; 0x1312 <vfprintf+0x280>
    1304:	b7 01       	movw	r22, r14
    1306:	80 e2       	ldi	r24, 0x20	; 32
    1308:	90 e0       	ldi	r25, 0x00	; 0
    130a:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <fputc>
    130e:	5a 94       	dec	r5
    1310:	f7 cf       	rjmp	.-18     	; 0x1300 <vfprintf+0x26e>
    1312:	00 23       	and	r16, r16
    1314:	29 f0       	breq	.+10     	; 0x1320 <vfprintf+0x28e>
    1316:	b7 01       	movw	r22, r14
    1318:	80 2f       	mov	r24, r16
    131a:	90 e0       	ldi	r25, 0x00	; 0
    131c:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <fputc>
    1320:	93 fc       	sbrc	r9, 3
    1322:	09 c0       	rjmp	.+18     	; 0x1336 <vfprintf+0x2a4>
    1324:	55 20       	and	r5, r5
    1326:	39 f0       	breq	.+14     	; 0x1336 <vfprintf+0x2a4>
    1328:	b7 01       	movw	r22, r14
    132a:	80 e3       	ldi	r24, 0x30	; 48
    132c:	90 e0       	ldi	r25, 0x00	; 0
    132e:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <fputc>
    1332:	5a 94       	dec	r5
    1334:	f7 cf       	rjmp	.-18     	; 0x1324 <vfprintf+0x292>
    1336:	97 fe       	sbrs	r9, 7
    1338:	4c c0       	rjmp	.+152    	; 0x13d2 <vfprintf+0x340>
    133a:	46 01       	movw	r8, r12
    133c:	d7 fe       	sbrs	r13, 7
    133e:	02 c0       	rjmp	.+4      	; 0x1344 <vfprintf+0x2b2>
    1340:	81 2c       	mov	r8, r1
    1342:	91 2c       	mov	r9, r1
    1344:	c6 01       	movw	r24, r12
    1346:	88 19       	sub	r24, r8
    1348:	99 09       	sbc	r25, r9
    134a:	f3 01       	movw	r30, r6
    134c:	e8 0f       	add	r30, r24
    134e:	f9 1f       	adc	r31, r25
    1350:	fe 87       	std	Y+14, r31	; 0x0e
    1352:	ed 87       	std	Y+13, r30	; 0x0d
    1354:	96 01       	movw	r18, r12
    1356:	24 19       	sub	r18, r4
    1358:	31 09       	sbc	r19, r1
    135a:	38 8b       	std	Y+16, r19	; 0x10
    135c:	2f 87       	std	Y+15, r18	; 0x0f
    135e:	01 2f       	mov	r16, r17
    1360:	10 e0       	ldi	r17, 0x00	; 0
    1362:	11 95       	neg	r17
    1364:	01 95       	neg	r16
    1366:	11 09       	sbc	r17, r1
    1368:	3f ef       	ldi	r19, 0xFF	; 255
    136a:	83 16       	cp	r8, r19
    136c:	93 06       	cpc	r9, r19
    136e:	29 f4       	brne	.+10     	; 0x137a <vfprintf+0x2e8>
    1370:	b7 01       	movw	r22, r14
    1372:	8e e2       	ldi	r24, 0x2E	; 46
    1374:	90 e0       	ldi	r25, 0x00	; 0
    1376:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <fputc>
    137a:	c8 14       	cp	r12, r8
    137c:	d9 04       	cpc	r13, r9
    137e:	4c f0       	brlt	.+18     	; 0x1392 <vfprintf+0x300>
    1380:	8f 85       	ldd	r24, Y+15	; 0x0f
    1382:	98 89       	ldd	r25, Y+16	; 0x10
    1384:	88 15       	cp	r24, r8
    1386:	99 05       	cpc	r25, r9
    1388:	24 f4       	brge	.+8      	; 0x1392 <vfprintf+0x300>
    138a:	ed 85       	ldd	r30, Y+13	; 0x0d
    138c:	fe 85       	ldd	r31, Y+14	; 0x0e
    138e:	81 81       	ldd	r24, Z+1	; 0x01
    1390:	01 c0       	rjmp	.+2      	; 0x1394 <vfprintf+0x302>
    1392:	80 e3       	ldi	r24, 0x30	; 48
    1394:	f1 e0       	ldi	r31, 0x01	; 1
    1396:	8f 1a       	sub	r8, r31
    1398:	91 08       	sbc	r9, r1
    139a:	2d 85       	ldd	r18, Y+13	; 0x0d
    139c:	3e 85       	ldd	r19, Y+14	; 0x0e
    139e:	2f 5f       	subi	r18, 0xFF	; 255
    13a0:	3f 4f       	sbci	r19, 0xFF	; 255
    13a2:	3e 87       	std	Y+14, r19	; 0x0e
    13a4:	2d 87       	std	Y+13, r18	; 0x0d
    13a6:	80 16       	cp	r8, r16
    13a8:	91 06       	cpc	r9, r17
    13aa:	2c f0       	brlt	.+10     	; 0x13b6 <vfprintf+0x324>
    13ac:	b7 01       	movw	r22, r14
    13ae:	90 e0       	ldi	r25, 0x00	; 0
    13b0:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <fputc>
    13b4:	d9 cf       	rjmp	.-78     	; 0x1368 <vfprintf+0x2d6>
    13b6:	c8 14       	cp	r12, r8
    13b8:	d9 04       	cpc	r13, r9
    13ba:	41 f4       	brne	.+16     	; 0x13cc <vfprintf+0x33a>
    13bc:	9a 81       	ldd	r25, Y+2	; 0x02
    13be:	96 33       	cpi	r25, 0x36	; 54
    13c0:	20 f4       	brcc	.+8      	; 0x13ca <vfprintf+0x338>
    13c2:	95 33       	cpi	r25, 0x35	; 53
    13c4:	19 f4       	brne	.+6      	; 0x13cc <vfprintf+0x33a>
    13c6:	3c 85       	ldd	r19, Y+12	; 0x0c
    13c8:	34 ff       	sbrs	r19, 4
    13ca:	81 e3       	ldi	r24, 0x31	; 49
    13cc:	b7 01       	movw	r22, r14
    13ce:	90 e0       	ldi	r25, 0x00	; 0
    13d0:	4e c0       	rjmp	.+156    	; 0x146e <vfprintf+0x3dc>
    13d2:	8a 81       	ldd	r24, Y+2	; 0x02
    13d4:	81 33       	cpi	r24, 0x31	; 49
    13d6:	19 f0       	breq	.+6      	; 0x13de <vfprintf+0x34c>
    13d8:	9c 85       	ldd	r25, Y+12	; 0x0c
    13da:	9f 7e       	andi	r25, 0xEF	; 239
    13dc:	9c 87       	std	Y+12, r25	; 0x0c
    13de:	b7 01       	movw	r22, r14
    13e0:	90 e0       	ldi	r25, 0x00	; 0
    13e2:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <fputc>
    13e6:	11 11       	cpse	r17, r1
    13e8:	05 c0       	rjmp	.+10     	; 0x13f4 <vfprintf+0x362>
    13ea:	94 fc       	sbrc	r9, 4
    13ec:	18 c0       	rjmp	.+48     	; 0x141e <vfprintf+0x38c>
    13ee:	85 e6       	ldi	r24, 0x65	; 101
    13f0:	90 e0       	ldi	r25, 0x00	; 0
    13f2:	17 c0       	rjmp	.+46     	; 0x1422 <vfprintf+0x390>
    13f4:	b7 01       	movw	r22, r14
    13f6:	8e e2       	ldi	r24, 0x2E	; 46
    13f8:	90 e0       	ldi	r25, 0x00	; 0
    13fa:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <fputc>
    13fe:	1e 5f       	subi	r17, 0xFE	; 254
    1400:	82 e0       	ldi	r24, 0x02	; 2
    1402:	01 e0       	ldi	r16, 0x01	; 1
    1404:	08 0f       	add	r16, r24
    1406:	f3 01       	movw	r30, r6
    1408:	e8 0f       	add	r30, r24
    140a:	f1 1d       	adc	r31, r1
    140c:	80 81       	ld	r24, Z
    140e:	b7 01       	movw	r22, r14
    1410:	90 e0       	ldi	r25, 0x00	; 0
    1412:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <fputc>
    1416:	80 2f       	mov	r24, r16
    1418:	01 13       	cpse	r16, r17
    141a:	f3 cf       	rjmp	.-26     	; 0x1402 <vfprintf+0x370>
    141c:	e6 cf       	rjmp	.-52     	; 0x13ea <vfprintf+0x358>
    141e:	85 e4       	ldi	r24, 0x45	; 69
    1420:	90 e0       	ldi	r25, 0x00	; 0
    1422:	b7 01       	movw	r22, r14
    1424:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <fputc>
    1428:	d7 fc       	sbrc	r13, 7
    142a:	06 c0       	rjmp	.+12     	; 0x1438 <vfprintf+0x3a6>
    142c:	c1 14       	cp	r12, r1
    142e:	d1 04       	cpc	r13, r1
    1430:	41 f4       	brne	.+16     	; 0x1442 <vfprintf+0x3b0>
    1432:	ec 85       	ldd	r30, Y+12	; 0x0c
    1434:	e4 ff       	sbrs	r30, 4
    1436:	05 c0       	rjmp	.+10     	; 0x1442 <vfprintf+0x3b0>
    1438:	d1 94       	neg	r13
    143a:	c1 94       	neg	r12
    143c:	d1 08       	sbc	r13, r1
    143e:	8d e2       	ldi	r24, 0x2D	; 45
    1440:	01 c0       	rjmp	.+2      	; 0x1444 <vfprintf+0x3b2>
    1442:	8b e2       	ldi	r24, 0x2B	; 43
    1444:	b7 01       	movw	r22, r14
    1446:	90 e0       	ldi	r25, 0x00	; 0
    1448:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <fputc>
    144c:	80 e3       	ldi	r24, 0x30	; 48
    144e:	2a e0       	ldi	r18, 0x0A	; 10
    1450:	c2 16       	cp	r12, r18
    1452:	d1 04       	cpc	r13, r1
    1454:	2c f0       	brlt	.+10     	; 0x1460 <vfprintf+0x3ce>
    1456:	8f 5f       	subi	r24, 0xFF	; 255
    1458:	fa e0       	ldi	r31, 0x0A	; 10
    145a:	cf 1a       	sub	r12, r31
    145c:	d1 08       	sbc	r13, r1
    145e:	f7 cf       	rjmp	.-18     	; 0x144e <vfprintf+0x3bc>
    1460:	b7 01       	movw	r22, r14
    1462:	90 e0       	ldi	r25, 0x00	; 0
    1464:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <fputc>
    1468:	b7 01       	movw	r22, r14
    146a:	c6 01       	movw	r24, r12
    146c:	c0 96       	adiw	r24, 0x30	; 48
    146e:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <fputc>
    1472:	54 c1       	rjmp	.+680    	; 0x171c <vfprintf+0x68a>
    1474:	83 36       	cpi	r24, 0x63	; 99
    1476:	31 f0       	breq	.+12     	; 0x1484 <vfprintf+0x3f2>
    1478:	83 37       	cpi	r24, 0x73	; 115
    147a:	79 f0       	breq	.+30     	; 0x149a <vfprintf+0x408>
    147c:	83 35       	cpi	r24, 0x53	; 83
    147e:	09 f0       	breq	.+2      	; 0x1482 <vfprintf+0x3f0>
    1480:	56 c0       	rjmp	.+172    	; 0x152e <vfprintf+0x49c>
    1482:	20 c0       	rjmp	.+64     	; 0x14c4 <vfprintf+0x432>
    1484:	56 01       	movw	r10, r12
    1486:	32 e0       	ldi	r19, 0x02	; 2
    1488:	a3 0e       	add	r10, r19
    148a:	b1 1c       	adc	r11, r1
    148c:	f6 01       	movw	r30, r12
    148e:	80 81       	ld	r24, Z
    1490:	89 83       	std	Y+1, r24	; 0x01
    1492:	01 e0       	ldi	r16, 0x01	; 1
    1494:	10 e0       	ldi	r17, 0x00	; 0
    1496:	63 01       	movw	r12, r6
    1498:	12 c0       	rjmp	.+36     	; 0x14be <vfprintf+0x42c>
    149a:	56 01       	movw	r10, r12
    149c:	f2 e0       	ldi	r31, 0x02	; 2
    149e:	af 0e       	add	r10, r31
    14a0:	b1 1c       	adc	r11, r1
    14a2:	f6 01       	movw	r30, r12
    14a4:	c0 80       	ld	r12, Z
    14a6:	d1 80       	ldd	r13, Z+1	; 0x01
    14a8:	96 fe       	sbrs	r9, 6
    14aa:	03 c0       	rjmp	.+6      	; 0x14b2 <vfprintf+0x420>
    14ac:	61 2f       	mov	r22, r17
    14ae:	70 e0       	ldi	r23, 0x00	; 0
    14b0:	02 c0       	rjmp	.+4      	; 0x14b6 <vfprintf+0x424>
    14b2:	6f ef       	ldi	r22, 0xFF	; 255
    14b4:	7f ef       	ldi	r23, 0xFF	; 255
    14b6:	c6 01       	movw	r24, r12
    14b8:	0e 94 e0 0c 	call	0x19c0	; 0x19c0 <strnlen>
    14bc:	8c 01       	movw	r16, r24
    14be:	f9 2d       	mov	r31, r9
    14c0:	ff 77       	andi	r31, 0x7F	; 127
    14c2:	14 c0       	rjmp	.+40     	; 0x14ec <vfprintf+0x45a>
    14c4:	56 01       	movw	r10, r12
    14c6:	22 e0       	ldi	r18, 0x02	; 2
    14c8:	a2 0e       	add	r10, r18
    14ca:	b1 1c       	adc	r11, r1
    14cc:	f6 01       	movw	r30, r12
    14ce:	c0 80       	ld	r12, Z
    14d0:	d1 80       	ldd	r13, Z+1	; 0x01
    14d2:	96 fe       	sbrs	r9, 6
    14d4:	03 c0       	rjmp	.+6      	; 0x14dc <vfprintf+0x44a>
    14d6:	61 2f       	mov	r22, r17
    14d8:	70 e0       	ldi	r23, 0x00	; 0
    14da:	02 c0       	rjmp	.+4      	; 0x14e0 <vfprintf+0x44e>
    14dc:	6f ef       	ldi	r22, 0xFF	; 255
    14de:	7f ef       	ldi	r23, 0xFF	; 255
    14e0:	c6 01       	movw	r24, r12
    14e2:	0e 94 d5 0c 	call	0x19aa	; 0x19aa <strnlen_P>
    14e6:	8c 01       	movw	r16, r24
    14e8:	f9 2d       	mov	r31, r9
    14ea:	f0 68       	ori	r31, 0x80	; 128
    14ec:	9f 2e       	mov	r9, r31
    14ee:	f3 fd       	sbrc	r31, 3
    14f0:	1a c0       	rjmp	.+52     	; 0x1526 <vfprintf+0x494>
    14f2:	85 2d       	mov	r24, r5
    14f4:	90 e0       	ldi	r25, 0x00	; 0
    14f6:	08 17       	cp	r16, r24
    14f8:	19 07       	cpc	r17, r25
    14fa:	a8 f4       	brcc	.+42     	; 0x1526 <vfprintf+0x494>
    14fc:	b7 01       	movw	r22, r14
    14fe:	80 e2       	ldi	r24, 0x20	; 32
    1500:	90 e0       	ldi	r25, 0x00	; 0
    1502:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <fputc>
    1506:	5a 94       	dec	r5
    1508:	f4 cf       	rjmp	.-24     	; 0x14f2 <vfprintf+0x460>
    150a:	f6 01       	movw	r30, r12
    150c:	97 fc       	sbrc	r9, 7
    150e:	85 91       	lpm	r24, Z+
    1510:	97 fe       	sbrs	r9, 7
    1512:	81 91       	ld	r24, Z+
    1514:	6f 01       	movw	r12, r30
    1516:	b7 01       	movw	r22, r14
    1518:	90 e0       	ldi	r25, 0x00	; 0
    151a:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <fputc>
    151e:	51 10       	cpse	r5, r1
    1520:	5a 94       	dec	r5
    1522:	01 50       	subi	r16, 0x01	; 1
    1524:	11 09       	sbc	r17, r1
    1526:	01 15       	cp	r16, r1
    1528:	11 05       	cpc	r17, r1
    152a:	79 f7       	brne	.-34     	; 0x150a <vfprintf+0x478>
    152c:	f7 c0       	rjmp	.+494    	; 0x171c <vfprintf+0x68a>
    152e:	84 36       	cpi	r24, 0x64	; 100
    1530:	11 f0       	breq	.+4      	; 0x1536 <vfprintf+0x4a4>
    1532:	89 36       	cpi	r24, 0x69	; 105
    1534:	61 f5       	brne	.+88     	; 0x158e <vfprintf+0x4fc>
    1536:	56 01       	movw	r10, r12
    1538:	97 fe       	sbrs	r9, 7
    153a:	09 c0       	rjmp	.+18     	; 0x154e <vfprintf+0x4bc>
    153c:	24 e0       	ldi	r18, 0x04	; 4
    153e:	a2 0e       	add	r10, r18
    1540:	b1 1c       	adc	r11, r1
    1542:	f6 01       	movw	r30, r12
    1544:	60 81       	ld	r22, Z
    1546:	71 81       	ldd	r23, Z+1	; 0x01
    1548:	82 81       	ldd	r24, Z+2	; 0x02
    154a:	93 81       	ldd	r25, Z+3	; 0x03
    154c:	0a c0       	rjmp	.+20     	; 0x1562 <vfprintf+0x4d0>
    154e:	f2 e0       	ldi	r31, 0x02	; 2
    1550:	af 0e       	add	r10, r31
    1552:	b1 1c       	adc	r11, r1
    1554:	f6 01       	movw	r30, r12
    1556:	60 81       	ld	r22, Z
    1558:	71 81       	ldd	r23, Z+1	; 0x01
    155a:	07 2e       	mov	r0, r23
    155c:	00 0c       	add	r0, r0
    155e:	88 0b       	sbc	r24, r24
    1560:	99 0b       	sbc	r25, r25
    1562:	f9 2d       	mov	r31, r9
    1564:	ff 76       	andi	r31, 0x6F	; 111
    1566:	9f 2e       	mov	r9, r31
    1568:	97 ff       	sbrs	r25, 7
    156a:	09 c0       	rjmp	.+18     	; 0x157e <vfprintf+0x4ec>
    156c:	90 95       	com	r25
    156e:	80 95       	com	r24
    1570:	70 95       	com	r23
    1572:	61 95       	neg	r22
    1574:	7f 4f       	sbci	r23, 0xFF	; 255
    1576:	8f 4f       	sbci	r24, 0xFF	; 255
    1578:	9f 4f       	sbci	r25, 0xFF	; 255
    157a:	f0 68       	ori	r31, 0x80	; 128
    157c:	9f 2e       	mov	r9, r31
    157e:	2a e0       	ldi	r18, 0x0A	; 10
    1580:	30 e0       	ldi	r19, 0x00	; 0
    1582:	a3 01       	movw	r20, r6
    1584:	0e 94 6d 0d 	call	0x1ada	; 0x1ada <__ultoa_invert>
    1588:	c8 2e       	mov	r12, r24
    158a:	c6 18       	sub	r12, r6
    158c:	3f c0       	rjmp	.+126    	; 0x160c <vfprintf+0x57a>
    158e:	09 2d       	mov	r16, r9
    1590:	85 37       	cpi	r24, 0x75	; 117
    1592:	21 f4       	brne	.+8      	; 0x159c <vfprintf+0x50a>
    1594:	0f 7e       	andi	r16, 0xEF	; 239
    1596:	2a e0       	ldi	r18, 0x0A	; 10
    1598:	30 e0       	ldi	r19, 0x00	; 0
    159a:	1d c0       	rjmp	.+58     	; 0x15d6 <vfprintf+0x544>
    159c:	09 7f       	andi	r16, 0xF9	; 249
    159e:	8f 36       	cpi	r24, 0x6F	; 111
    15a0:	91 f0       	breq	.+36     	; 0x15c6 <vfprintf+0x534>
    15a2:	18 f4       	brcc	.+6      	; 0x15aa <vfprintf+0x518>
    15a4:	88 35       	cpi	r24, 0x58	; 88
    15a6:	59 f0       	breq	.+22     	; 0x15be <vfprintf+0x52c>
    15a8:	c3 c0       	rjmp	.+390    	; 0x1730 <vfprintf+0x69e>
    15aa:	80 37       	cpi	r24, 0x70	; 112
    15ac:	19 f0       	breq	.+6      	; 0x15b4 <vfprintf+0x522>
    15ae:	88 37       	cpi	r24, 0x78	; 120
    15b0:	11 f0       	breq	.+4      	; 0x15b6 <vfprintf+0x524>
    15b2:	be c0       	rjmp	.+380    	; 0x1730 <vfprintf+0x69e>
    15b4:	00 61       	ori	r16, 0x10	; 16
    15b6:	04 ff       	sbrs	r16, 4
    15b8:	09 c0       	rjmp	.+18     	; 0x15cc <vfprintf+0x53a>
    15ba:	04 60       	ori	r16, 0x04	; 4
    15bc:	07 c0       	rjmp	.+14     	; 0x15cc <vfprintf+0x53a>
    15be:	94 fe       	sbrs	r9, 4
    15c0:	08 c0       	rjmp	.+16     	; 0x15d2 <vfprintf+0x540>
    15c2:	06 60       	ori	r16, 0x06	; 6
    15c4:	06 c0       	rjmp	.+12     	; 0x15d2 <vfprintf+0x540>
    15c6:	28 e0       	ldi	r18, 0x08	; 8
    15c8:	30 e0       	ldi	r19, 0x00	; 0
    15ca:	05 c0       	rjmp	.+10     	; 0x15d6 <vfprintf+0x544>
    15cc:	20 e1       	ldi	r18, 0x10	; 16
    15ce:	30 e0       	ldi	r19, 0x00	; 0
    15d0:	02 c0       	rjmp	.+4      	; 0x15d6 <vfprintf+0x544>
    15d2:	20 e1       	ldi	r18, 0x10	; 16
    15d4:	32 e0       	ldi	r19, 0x02	; 2
    15d6:	56 01       	movw	r10, r12
    15d8:	07 ff       	sbrs	r16, 7
    15da:	09 c0       	rjmp	.+18     	; 0x15ee <vfprintf+0x55c>
    15dc:	84 e0       	ldi	r24, 0x04	; 4
    15de:	a8 0e       	add	r10, r24
    15e0:	b1 1c       	adc	r11, r1
    15e2:	f6 01       	movw	r30, r12
    15e4:	60 81       	ld	r22, Z
    15e6:	71 81       	ldd	r23, Z+1	; 0x01
    15e8:	82 81       	ldd	r24, Z+2	; 0x02
    15ea:	93 81       	ldd	r25, Z+3	; 0x03
    15ec:	08 c0       	rjmp	.+16     	; 0x15fe <vfprintf+0x56c>
    15ee:	f2 e0       	ldi	r31, 0x02	; 2
    15f0:	af 0e       	add	r10, r31
    15f2:	b1 1c       	adc	r11, r1
    15f4:	f6 01       	movw	r30, r12
    15f6:	60 81       	ld	r22, Z
    15f8:	71 81       	ldd	r23, Z+1	; 0x01
    15fa:	80 e0       	ldi	r24, 0x00	; 0
    15fc:	90 e0       	ldi	r25, 0x00	; 0
    15fe:	a3 01       	movw	r20, r6
    1600:	0e 94 6d 0d 	call	0x1ada	; 0x1ada <__ultoa_invert>
    1604:	c8 2e       	mov	r12, r24
    1606:	c6 18       	sub	r12, r6
    1608:	0f 77       	andi	r16, 0x7F	; 127
    160a:	90 2e       	mov	r9, r16
    160c:	96 fe       	sbrs	r9, 6
    160e:	0b c0       	rjmp	.+22     	; 0x1626 <vfprintf+0x594>
    1610:	09 2d       	mov	r16, r9
    1612:	0e 7f       	andi	r16, 0xFE	; 254
    1614:	c1 16       	cp	r12, r17
    1616:	50 f4       	brcc	.+20     	; 0x162c <vfprintf+0x59a>
    1618:	94 fe       	sbrs	r9, 4
    161a:	0a c0       	rjmp	.+20     	; 0x1630 <vfprintf+0x59e>
    161c:	92 fc       	sbrc	r9, 2
    161e:	08 c0       	rjmp	.+16     	; 0x1630 <vfprintf+0x59e>
    1620:	09 2d       	mov	r16, r9
    1622:	0e 7e       	andi	r16, 0xEE	; 238
    1624:	05 c0       	rjmp	.+10     	; 0x1630 <vfprintf+0x59e>
    1626:	dc 2c       	mov	r13, r12
    1628:	09 2d       	mov	r16, r9
    162a:	03 c0       	rjmp	.+6      	; 0x1632 <vfprintf+0x5a0>
    162c:	dc 2c       	mov	r13, r12
    162e:	01 c0       	rjmp	.+2      	; 0x1632 <vfprintf+0x5a0>
    1630:	d1 2e       	mov	r13, r17
    1632:	04 ff       	sbrs	r16, 4
    1634:	0d c0       	rjmp	.+26     	; 0x1650 <vfprintf+0x5be>
    1636:	fe 01       	movw	r30, r28
    1638:	ec 0d       	add	r30, r12
    163a:	f1 1d       	adc	r31, r1
    163c:	80 81       	ld	r24, Z
    163e:	80 33       	cpi	r24, 0x30	; 48
    1640:	11 f4       	brne	.+4      	; 0x1646 <vfprintf+0x5b4>
    1642:	09 7e       	andi	r16, 0xE9	; 233
    1644:	09 c0       	rjmp	.+18     	; 0x1658 <vfprintf+0x5c6>
    1646:	02 ff       	sbrs	r16, 2
    1648:	06 c0       	rjmp	.+12     	; 0x1656 <vfprintf+0x5c4>
    164a:	d3 94       	inc	r13
    164c:	d3 94       	inc	r13
    164e:	04 c0       	rjmp	.+8      	; 0x1658 <vfprintf+0x5c6>
    1650:	80 2f       	mov	r24, r16
    1652:	86 78       	andi	r24, 0x86	; 134
    1654:	09 f0       	breq	.+2      	; 0x1658 <vfprintf+0x5c6>
    1656:	d3 94       	inc	r13
    1658:	03 fd       	sbrc	r16, 3
    165a:	11 c0       	rjmp	.+34     	; 0x167e <vfprintf+0x5ec>
    165c:	00 ff       	sbrs	r16, 0
    165e:	06 c0       	rjmp	.+12     	; 0x166c <vfprintf+0x5da>
    1660:	1c 2d       	mov	r17, r12
    1662:	d5 14       	cp	r13, r5
    1664:	80 f4       	brcc	.+32     	; 0x1686 <vfprintf+0x5f4>
    1666:	15 0d       	add	r17, r5
    1668:	1d 19       	sub	r17, r13
    166a:	0d c0       	rjmp	.+26     	; 0x1686 <vfprintf+0x5f4>
    166c:	d5 14       	cp	r13, r5
    166e:	58 f4       	brcc	.+22     	; 0x1686 <vfprintf+0x5f4>
    1670:	b7 01       	movw	r22, r14
    1672:	80 e2       	ldi	r24, 0x20	; 32
    1674:	90 e0       	ldi	r25, 0x00	; 0
    1676:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <fputc>
    167a:	d3 94       	inc	r13
    167c:	f7 cf       	rjmp	.-18     	; 0x166c <vfprintf+0x5da>
    167e:	d5 14       	cp	r13, r5
    1680:	10 f4       	brcc	.+4      	; 0x1686 <vfprintf+0x5f4>
    1682:	5d 18       	sub	r5, r13
    1684:	01 c0       	rjmp	.+2      	; 0x1688 <vfprintf+0x5f6>
    1686:	51 2c       	mov	r5, r1
    1688:	04 ff       	sbrs	r16, 4
    168a:	10 c0       	rjmp	.+32     	; 0x16ac <vfprintf+0x61a>
    168c:	b7 01       	movw	r22, r14
    168e:	80 e3       	ldi	r24, 0x30	; 48
    1690:	90 e0       	ldi	r25, 0x00	; 0
    1692:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <fputc>
    1696:	02 ff       	sbrs	r16, 2
    1698:	17 c0       	rjmp	.+46     	; 0x16c8 <vfprintf+0x636>
    169a:	01 fd       	sbrc	r16, 1
    169c:	03 c0       	rjmp	.+6      	; 0x16a4 <vfprintf+0x612>
    169e:	88 e7       	ldi	r24, 0x78	; 120
    16a0:	90 e0       	ldi	r25, 0x00	; 0
    16a2:	02 c0       	rjmp	.+4      	; 0x16a8 <vfprintf+0x616>
    16a4:	88 e5       	ldi	r24, 0x58	; 88
    16a6:	90 e0       	ldi	r25, 0x00	; 0
    16a8:	b7 01       	movw	r22, r14
    16aa:	0c c0       	rjmp	.+24     	; 0x16c4 <vfprintf+0x632>
    16ac:	80 2f       	mov	r24, r16
    16ae:	86 78       	andi	r24, 0x86	; 134
    16b0:	59 f0       	breq	.+22     	; 0x16c8 <vfprintf+0x636>
    16b2:	01 ff       	sbrs	r16, 1
    16b4:	02 c0       	rjmp	.+4      	; 0x16ba <vfprintf+0x628>
    16b6:	8b e2       	ldi	r24, 0x2B	; 43
    16b8:	01 c0       	rjmp	.+2      	; 0x16bc <vfprintf+0x62a>
    16ba:	80 e2       	ldi	r24, 0x20	; 32
    16bc:	07 fd       	sbrc	r16, 7
    16be:	8d e2       	ldi	r24, 0x2D	; 45
    16c0:	b7 01       	movw	r22, r14
    16c2:	90 e0       	ldi	r25, 0x00	; 0
    16c4:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <fputc>
    16c8:	c1 16       	cp	r12, r17
    16ca:	38 f4       	brcc	.+14     	; 0x16da <vfprintf+0x648>
    16cc:	b7 01       	movw	r22, r14
    16ce:	80 e3       	ldi	r24, 0x30	; 48
    16d0:	90 e0       	ldi	r25, 0x00	; 0
    16d2:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <fputc>
    16d6:	11 50       	subi	r17, 0x01	; 1
    16d8:	f7 cf       	rjmp	.-18     	; 0x16c8 <vfprintf+0x636>
    16da:	ca 94       	dec	r12
    16dc:	f3 01       	movw	r30, r6
    16de:	ec 0d       	add	r30, r12
    16e0:	f1 1d       	adc	r31, r1
    16e2:	80 81       	ld	r24, Z
    16e4:	b7 01       	movw	r22, r14
    16e6:	90 e0       	ldi	r25, 0x00	; 0
    16e8:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <fputc>
    16ec:	c1 10       	cpse	r12, r1
    16ee:	f5 cf       	rjmp	.-22     	; 0x16da <vfprintf+0x648>
    16f0:	15 c0       	rjmp	.+42     	; 0x171c <vfprintf+0x68a>
    16f2:	f4 e0       	ldi	r31, 0x04	; 4
    16f4:	f5 15       	cp	r31, r5
    16f6:	60 f5       	brcc	.+88     	; 0x1750 <vfprintf+0x6be>
    16f8:	84 e0       	ldi	r24, 0x04	; 4
    16fa:	58 1a       	sub	r5, r24
    16fc:	93 fe       	sbrs	r9, 3
    16fe:	1f c0       	rjmp	.+62     	; 0x173e <vfprintf+0x6ac>
    1700:	01 11       	cpse	r16, r1
    1702:	27 c0       	rjmp	.+78     	; 0x1752 <vfprintf+0x6c0>
    1704:	2c 85       	ldd	r18, Y+12	; 0x0c
    1706:	23 ff       	sbrs	r18, 3
    1708:	2a c0       	rjmp	.+84     	; 0x175e <vfprintf+0x6cc>
    170a:	04 eb       	ldi	r16, 0xB4	; 180
    170c:	10 e0       	ldi	r17, 0x00	; 0
    170e:	39 2d       	mov	r19, r9
    1710:	30 71       	andi	r19, 0x10	; 16
    1712:	93 2e       	mov	r9, r19
    1714:	f8 01       	movw	r30, r16
    1716:	84 91       	lpm	r24, Z
    1718:	81 11       	cpse	r24, r1
    171a:	24 c0       	rjmp	.+72     	; 0x1764 <vfprintf+0x6d2>
    171c:	55 20       	and	r5, r5
    171e:	09 f4       	brne	.+2      	; 0x1722 <vfprintf+0x690>
    1720:	e4 cc       	rjmp	.-1592   	; 0x10ea <vfprintf+0x58>
    1722:	b7 01       	movw	r22, r14
    1724:	80 e2       	ldi	r24, 0x20	; 32
    1726:	90 e0       	ldi	r25, 0x00	; 0
    1728:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <fputc>
    172c:	5a 94       	dec	r5
    172e:	f6 cf       	rjmp	.-20     	; 0x171c <vfprintf+0x68a>
    1730:	f7 01       	movw	r30, r14
    1732:	86 81       	ldd	r24, Z+6	; 0x06
    1734:	97 81       	ldd	r25, Z+7	; 0x07
    1736:	26 c0       	rjmp	.+76     	; 0x1784 <vfprintf+0x6f2>
    1738:	8f ef       	ldi	r24, 0xFF	; 255
    173a:	9f ef       	ldi	r25, 0xFF	; 255
    173c:	23 c0       	rjmp	.+70     	; 0x1784 <vfprintf+0x6f2>
    173e:	b7 01       	movw	r22, r14
    1740:	80 e2       	ldi	r24, 0x20	; 32
    1742:	90 e0       	ldi	r25, 0x00	; 0
    1744:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <fputc>
    1748:	5a 94       	dec	r5
    174a:	51 10       	cpse	r5, r1
    174c:	f8 cf       	rjmp	.-16     	; 0x173e <vfprintf+0x6ac>
    174e:	d8 cf       	rjmp	.-80     	; 0x1700 <vfprintf+0x66e>
    1750:	51 2c       	mov	r5, r1
    1752:	b7 01       	movw	r22, r14
    1754:	80 2f       	mov	r24, r16
    1756:	90 e0       	ldi	r25, 0x00	; 0
    1758:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <fputc>
    175c:	d3 cf       	rjmp	.-90     	; 0x1704 <vfprintf+0x672>
    175e:	08 eb       	ldi	r16, 0xB8	; 184
    1760:	10 e0       	ldi	r17, 0x00	; 0
    1762:	d5 cf       	rjmp	.-86     	; 0x170e <vfprintf+0x67c>
    1764:	91 10       	cpse	r9, r1
    1766:	80 52       	subi	r24, 0x20	; 32
    1768:	b7 01       	movw	r22, r14
    176a:	90 e0       	ldi	r25, 0x00	; 0
    176c:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <fputc>
    1770:	0f 5f       	subi	r16, 0xFF	; 255
    1772:	1f 4f       	sbci	r17, 0xFF	; 255
    1774:	cf cf       	rjmp	.-98     	; 0x1714 <vfprintf+0x682>
    1776:	23 e0       	ldi	r18, 0x03	; 3
    1778:	25 15       	cp	r18, r5
    177a:	10 f4       	brcc	.+4      	; 0x1780 <vfprintf+0x6ee>
    177c:	83 e0       	ldi	r24, 0x03	; 3
    177e:	bd cf       	rjmp	.-134    	; 0x16fa <vfprintf+0x668>
    1780:	51 2c       	mov	r5, r1
    1782:	c0 cf       	rjmp	.-128    	; 0x1704 <vfprintf+0x672>
    1784:	60 96       	adiw	r28, 0x10	; 16
    1786:	e2 e1       	ldi	r30, 0x12	; 18
    1788:	0c 94 e2 0b 	jmp	0x17c4	; 0x17c4 <__epilogue_restores__>

0000178c <__prologue_saves__>:
    178c:	2f 92       	push	r2
    178e:	3f 92       	push	r3
    1790:	4f 92       	push	r4
    1792:	5f 92       	push	r5
    1794:	6f 92       	push	r6
    1796:	7f 92       	push	r7
    1798:	8f 92       	push	r8
    179a:	9f 92       	push	r9
    179c:	af 92       	push	r10
    179e:	bf 92       	push	r11
    17a0:	cf 92       	push	r12
    17a2:	df 92       	push	r13
    17a4:	ef 92       	push	r14
    17a6:	ff 92       	push	r15
    17a8:	0f 93       	push	r16
    17aa:	1f 93       	push	r17
    17ac:	cf 93       	push	r28
    17ae:	df 93       	push	r29
    17b0:	cd b7       	in	r28, 0x3d	; 61
    17b2:	de b7       	in	r29, 0x3e	; 62
    17b4:	ca 1b       	sub	r28, r26
    17b6:	db 0b       	sbc	r29, r27
    17b8:	0f b6       	in	r0, 0x3f	; 63
    17ba:	f8 94       	cli
    17bc:	de bf       	out	0x3e, r29	; 62
    17be:	0f be       	out	0x3f, r0	; 63
    17c0:	cd bf       	out	0x3d, r28	; 61
    17c2:	09 94       	ijmp

000017c4 <__epilogue_restores__>:
    17c4:	2a 88       	ldd	r2, Y+18	; 0x12
    17c6:	39 88       	ldd	r3, Y+17	; 0x11
    17c8:	48 88       	ldd	r4, Y+16	; 0x10
    17ca:	5f 84       	ldd	r5, Y+15	; 0x0f
    17cc:	6e 84       	ldd	r6, Y+14	; 0x0e
    17ce:	7d 84       	ldd	r7, Y+13	; 0x0d
    17d0:	8c 84       	ldd	r8, Y+12	; 0x0c
    17d2:	9b 84       	ldd	r9, Y+11	; 0x0b
    17d4:	aa 84       	ldd	r10, Y+10	; 0x0a
    17d6:	b9 84       	ldd	r11, Y+9	; 0x09
    17d8:	c8 84       	ldd	r12, Y+8	; 0x08
    17da:	df 80       	ldd	r13, Y+7	; 0x07
    17dc:	ee 80       	ldd	r14, Y+6	; 0x06
    17de:	fd 80       	ldd	r15, Y+5	; 0x05
    17e0:	0c 81       	ldd	r16, Y+4	; 0x04
    17e2:	1b 81       	ldd	r17, Y+3	; 0x03
    17e4:	aa 81       	ldd	r26, Y+2	; 0x02
    17e6:	b9 81       	ldd	r27, Y+1	; 0x01
    17e8:	ce 0f       	add	r28, r30
    17ea:	d1 1d       	adc	r29, r1
    17ec:	0f b6       	in	r0, 0x3f	; 63
    17ee:	f8 94       	cli
    17f0:	de bf       	out	0x3e, r29	; 62
    17f2:	0f be       	out	0x3f, r0	; 63
    17f4:	cd bf       	out	0x3d, r28	; 61
    17f6:	ed 01       	movw	r28, r26
    17f8:	08 95       	ret

000017fa <__ftoa_engine>:
    17fa:	28 30       	cpi	r18, 0x08	; 8
    17fc:	08 f0       	brcs	.+2      	; 0x1800 <__ftoa_engine+0x6>
    17fe:	27 e0       	ldi	r18, 0x07	; 7
    1800:	33 27       	eor	r19, r19
    1802:	da 01       	movw	r26, r20
    1804:	99 0f       	add	r25, r25
    1806:	31 1d       	adc	r19, r1
    1808:	87 fd       	sbrc	r24, 7
    180a:	91 60       	ori	r25, 0x01	; 1
    180c:	00 96       	adiw	r24, 0x00	; 0
    180e:	61 05       	cpc	r22, r1
    1810:	71 05       	cpc	r23, r1
    1812:	39 f4       	brne	.+14     	; 0x1822 <__ftoa_engine+0x28>
    1814:	32 60       	ori	r19, 0x02	; 2
    1816:	2e 5f       	subi	r18, 0xFE	; 254
    1818:	3d 93       	st	X+, r19
    181a:	30 e3       	ldi	r19, 0x30	; 48
    181c:	2a 95       	dec	r18
    181e:	e1 f7       	brne	.-8      	; 0x1818 <__ftoa_engine+0x1e>
    1820:	08 95       	ret
    1822:	9f 3f       	cpi	r25, 0xFF	; 255
    1824:	30 f0       	brcs	.+12     	; 0x1832 <__ftoa_engine+0x38>
    1826:	80 38       	cpi	r24, 0x80	; 128
    1828:	71 05       	cpc	r23, r1
    182a:	61 05       	cpc	r22, r1
    182c:	09 f0       	breq	.+2      	; 0x1830 <__ftoa_engine+0x36>
    182e:	3c 5f       	subi	r19, 0xFC	; 252
    1830:	3c 5f       	subi	r19, 0xFC	; 252
    1832:	3d 93       	st	X+, r19
    1834:	91 30       	cpi	r25, 0x01	; 1
    1836:	08 f0       	brcs	.+2      	; 0x183a <__ftoa_engine+0x40>
    1838:	80 68       	ori	r24, 0x80	; 128
    183a:	91 1d       	adc	r25, r1
    183c:	df 93       	push	r29
    183e:	cf 93       	push	r28
    1840:	1f 93       	push	r17
    1842:	0f 93       	push	r16
    1844:	ff 92       	push	r15
    1846:	ef 92       	push	r14
    1848:	19 2f       	mov	r17, r25
    184a:	98 7f       	andi	r25, 0xF8	; 248
    184c:	96 95       	lsr	r25
    184e:	e9 2f       	mov	r30, r25
    1850:	96 95       	lsr	r25
    1852:	96 95       	lsr	r25
    1854:	e9 0f       	add	r30, r25
    1856:	ff 27       	eor	r31, r31
    1858:	ea 5e       	subi	r30, 0xEA	; 234
    185a:	fe 4f       	sbci	r31, 0xFE	; 254
    185c:	99 27       	eor	r25, r25
    185e:	33 27       	eor	r19, r19
    1860:	ee 24       	eor	r14, r14
    1862:	ff 24       	eor	r15, r15
    1864:	a7 01       	movw	r20, r14
    1866:	e7 01       	movw	r28, r14
    1868:	05 90       	lpm	r0, Z+
    186a:	08 94       	sec
    186c:	07 94       	ror	r0
    186e:	28 f4       	brcc	.+10     	; 0x187a <__ftoa_engine+0x80>
    1870:	36 0f       	add	r19, r22
    1872:	e7 1e       	adc	r14, r23
    1874:	f8 1e       	adc	r15, r24
    1876:	49 1f       	adc	r20, r25
    1878:	51 1d       	adc	r21, r1
    187a:	66 0f       	add	r22, r22
    187c:	77 1f       	adc	r23, r23
    187e:	88 1f       	adc	r24, r24
    1880:	99 1f       	adc	r25, r25
    1882:	06 94       	lsr	r0
    1884:	a1 f7       	brne	.-24     	; 0x186e <__ftoa_engine+0x74>
    1886:	05 90       	lpm	r0, Z+
    1888:	07 94       	ror	r0
    188a:	28 f4       	brcc	.+10     	; 0x1896 <__ftoa_engine+0x9c>
    188c:	e7 0e       	add	r14, r23
    188e:	f8 1e       	adc	r15, r24
    1890:	49 1f       	adc	r20, r25
    1892:	56 1f       	adc	r21, r22
    1894:	c1 1d       	adc	r28, r1
    1896:	77 0f       	add	r23, r23
    1898:	88 1f       	adc	r24, r24
    189a:	99 1f       	adc	r25, r25
    189c:	66 1f       	adc	r22, r22
    189e:	06 94       	lsr	r0
    18a0:	a1 f7       	brne	.-24     	; 0x188a <__ftoa_engine+0x90>
    18a2:	05 90       	lpm	r0, Z+
    18a4:	07 94       	ror	r0
    18a6:	28 f4       	brcc	.+10     	; 0x18b2 <__ftoa_engine+0xb8>
    18a8:	f8 0e       	add	r15, r24
    18aa:	49 1f       	adc	r20, r25
    18ac:	56 1f       	adc	r21, r22
    18ae:	c7 1f       	adc	r28, r23
    18b0:	d1 1d       	adc	r29, r1
    18b2:	88 0f       	add	r24, r24
    18b4:	99 1f       	adc	r25, r25
    18b6:	66 1f       	adc	r22, r22
    18b8:	77 1f       	adc	r23, r23
    18ba:	06 94       	lsr	r0
    18bc:	a1 f7       	brne	.-24     	; 0x18a6 <__ftoa_engine+0xac>
    18be:	05 90       	lpm	r0, Z+
    18c0:	07 94       	ror	r0
    18c2:	20 f4       	brcc	.+8      	; 0x18cc <__ftoa_engine+0xd2>
    18c4:	49 0f       	add	r20, r25
    18c6:	56 1f       	adc	r21, r22
    18c8:	c7 1f       	adc	r28, r23
    18ca:	d8 1f       	adc	r29, r24
    18cc:	99 0f       	add	r25, r25
    18ce:	66 1f       	adc	r22, r22
    18d0:	77 1f       	adc	r23, r23
    18d2:	88 1f       	adc	r24, r24
    18d4:	06 94       	lsr	r0
    18d6:	a9 f7       	brne	.-22     	; 0x18c2 <__ftoa_engine+0xc8>
    18d8:	84 91       	lpm	r24, Z
    18da:	10 95       	com	r17
    18dc:	17 70       	andi	r17, 0x07	; 7
    18de:	41 f0       	breq	.+16     	; 0x18f0 <__ftoa_engine+0xf6>
    18e0:	d6 95       	lsr	r29
    18e2:	c7 95       	ror	r28
    18e4:	57 95       	ror	r21
    18e6:	47 95       	ror	r20
    18e8:	f7 94       	ror	r15
    18ea:	e7 94       	ror	r14
    18ec:	1a 95       	dec	r17
    18ee:	c1 f7       	brne	.-16     	; 0x18e0 <__ftoa_engine+0xe6>
    18f0:	ec eb       	ldi	r30, 0xBC	; 188
    18f2:	f0 e0       	ldi	r31, 0x00	; 0
    18f4:	68 94       	set
    18f6:	15 90       	lpm	r1, Z+
    18f8:	15 91       	lpm	r17, Z+
    18fa:	35 91       	lpm	r19, Z+
    18fc:	65 91       	lpm	r22, Z+
    18fe:	95 91       	lpm	r25, Z+
    1900:	05 90       	lpm	r0, Z+
    1902:	7f e2       	ldi	r23, 0x2F	; 47
    1904:	73 95       	inc	r23
    1906:	e1 18       	sub	r14, r1
    1908:	f1 0a       	sbc	r15, r17
    190a:	43 0b       	sbc	r20, r19
    190c:	56 0b       	sbc	r21, r22
    190e:	c9 0b       	sbc	r28, r25
    1910:	d0 09       	sbc	r29, r0
    1912:	c0 f7       	brcc	.-16     	; 0x1904 <__ftoa_engine+0x10a>
    1914:	e1 0c       	add	r14, r1
    1916:	f1 1e       	adc	r15, r17
    1918:	43 1f       	adc	r20, r19
    191a:	56 1f       	adc	r21, r22
    191c:	c9 1f       	adc	r28, r25
    191e:	d0 1d       	adc	r29, r0
    1920:	7e f4       	brtc	.+30     	; 0x1940 <__ftoa_engine+0x146>
    1922:	70 33       	cpi	r23, 0x30	; 48
    1924:	11 f4       	brne	.+4      	; 0x192a <__ftoa_engine+0x130>
    1926:	8a 95       	dec	r24
    1928:	e6 cf       	rjmp	.-52     	; 0x18f6 <__ftoa_engine+0xfc>
    192a:	e8 94       	clt
    192c:	01 50       	subi	r16, 0x01	; 1
    192e:	30 f0       	brcs	.+12     	; 0x193c <__ftoa_engine+0x142>
    1930:	08 0f       	add	r16, r24
    1932:	0a f4       	brpl	.+2      	; 0x1936 <__ftoa_engine+0x13c>
    1934:	00 27       	eor	r16, r16
    1936:	02 17       	cp	r16, r18
    1938:	08 f4       	brcc	.+2      	; 0x193c <__ftoa_engine+0x142>
    193a:	20 2f       	mov	r18, r16
    193c:	23 95       	inc	r18
    193e:	02 2f       	mov	r16, r18
    1940:	7a 33       	cpi	r23, 0x3A	; 58
    1942:	28 f0       	brcs	.+10     	; 0x194e <__ftoa_engine+0x154>
    1944:	79 e3       	ldi	r23, 0x39	; 57
    1946:	7d 93       	st	X+, r23
    1948:	2a 95       	dec	r18
    194a:	e9 f7       	brne	.-6      	; 0x1946 <__ftoa_engine+0x14c>
    194c:	10 c0       	rjmp	.+32     	; 0x196e <__ftoa_engine+0x174>
    194e:	7d 93       	st	X+, r23
    1950:	2a 95       	dec	r18
    1952:	89 f6       	brne	.-94     	; 0x18f6 <__ftoa_engine+0xfc>
    1954:	06 94       	lsr	r0
    1956:	97 95       	ror	r25
    1958:	67 95       	ror	r22
    195a:	37 95       	ror	r19
    195c:	17 95       	ror	r17
    195e:	17 94       	ror	r1
    1960:	e1 18       	sub	r14, r1
    1962:	f1 0a       	sbc	r15, r17
    1964:	43 0b       	sbc	r20, r19
    1966:	56 0b       	sbc	r21, r22
    1968:	c9 0b       	sbc	r28, r25
    196a:	d0 09       	sbc	r29, r0
    196c:	98 f0       	brcs	.+38     	; 0x1994 <__ftoa_engine+0x19a>
    196e:	23 95       	inc	r18
    1970:	7e 91       	ld	r23, -X
    1972:	73 95       	inc	r23
    1974:	7a 33       	cpi	r23, 0x3A	; 58
    1976:	08 f0       	brcs	.+2      	; 0x197a <__ftoa_engine+0x180>
    1978:	70 e3       	ldi	r23, 0x30	; 48
    197a:	7c 93       	st	X, r23
    197c:	20 13       	cpse	r18, r16
    197e:	b8 f7       	brcc	.-18     	; 0x196e <__ftoa_engine+0x174>
    1980:	7e 91       	ld	r23, -X
    1982:	70 61       	ori	r23, 0x10	; 16
    1984:	7d 93       	st	X+, r23
    1986:	30 f0       	brcs	.+12     	; 0x1994 <__ftoa_engine+0x19a>
    1988:	83 95       	inc	r24
    198a:	71 e3       	ldi	r23, 0x31	; 49
    198c:	7d 93       	st	X+, r23
    198e:	70 e3       	ldi	r23, 0x30	; 48
    1990:	2a 95       	dec	r18
    1992:	e1 f7       	brne	.-8      	; 0x198c <__ftoa_engine+0x192>
    1994:	11 24       	eor	r1, r1
    1996:	ef 90       	pop	r14
    1998:	ff 90       	pop	r15
    199a:	0f 91       	pop	r16
    199c:	1f 91       	pop	r17
    199e:	cf 91       	pop	r28
    19a0:	df 91       	pop	r29
    19a2:	99 27       	eor	r25, r25
    19a4:	87 fd       	sbrc	r24, 7
    19a6:	90 95       	com	r25
    19a8:	08 95       	ret

000019aa <strnlen_P>:
    19aa:	fc 01       	movw	r30, r24
    19ac:	05 90       	lpm	r0, Z+
    19ae:	61 50       	subi	r22, 0x01	; 1
    19b0:	70 40       	sbci	r23, 0x00	; 0
    19b2:	01 10       	cpse	r0, r1
    19b4:	d8 f7       	brcc	.-10     	; 0x19ac <strnlen_P+0x2>
    19b6:	80 95       	com	r24
    19b8:	90 95       	com	r25
    19ba:	8e 0f       	add	r24, r30
    19bc:	9f 1f       	adc	r25, r31
    19be:	08 95       	ret

000019c0 <strnlen>:
    19c0:	fc 01       	movw	r30, r24
    19c2:	61 50       	subi	r22, 0x01	; 1
    19c4:	70 40       	sbci	r23, 0x00	; 0
    19c6:	01 90       	ld	r0, Z+
    19c8:	01 10       	cpse	r0, r1
    19ca:	d8 f7       	brcc	.-10     	; 0x19c2 <strnlen+0x2>
    19cc:	80 95       	com	r24
    19ce:	90 95       	com	r25
    19d0:	8e 0f       	add	r24, r30
    19d2:	9f 1f       	adc	r25, r31
    19d4:	08 95       	ret

000019d6 <fputc>:
    19d6:	0f 93       	push	r16
    19d8:	1f 93       	push	r17
    19da:	cf 93       	push	r28
    19dc:	df 93       	push	r29
    19de:	fb 01       	movw	r30, r22
    19e0:	23 81       	ldd	r18, Z+3	; 0x03
    19e2:	21 fd       	sbrc	r18, 1
    19e4:	03 c0       	rjmp	.+6      	; 0x19ec <fputc+0x16>
    19e6:	8f ef       	ldi	r24, 0xFF	; 255
    19e8:	9f ef       	ldi	r25, 0xFF	; 255
    19ea:	2c c0       	rjmp	.+88     	; 0x1a44 <fputc+0x6e>
    19ec:	22 ff       	sbrs	r18, 2
    19ee:	16 c0       	rjmp	.+44     	; 0x1a1c <fputc+0x46>
    19f0:	46 81       	ldd	r20, Z+6	; 0x06
    19f2:	57 81       	ldd	r21, Z+7	; 0x07
    19f4:	24 81       	ldd	r18, Z+4	; 0x04
    19f6:	35 81       	ldd	r19, Z+5	; 0x05
    19f8:	42 17       	cp	r20, r18
    19fa:	53 07       	cpc	r21, r19
    19fc:	44 f4       	brge	.+16     	; 0x1a0e <fputc+0x38>
    19fe:	a0 81       	ld	r26, Z
    1a00:	b1 81       	ldd	r27, Z+1	; 0x01
    1a02:	9d 01       	movw	r18, r26
    1a04:	2f 5f       	subi	r18, 0xFF	; 255
    1a06:	3f 4f       	sbci	r19, 0xFF	; 255
    1a08:	31 83       	std	Z+1, r19	; 0x01
    1a0a:	20 83       	st	Z, r18
    1a0c:	8c 93       	st	X, r24
    1a0e:	26 81       	ldd	r18, Z+6	; 0x06
    1a10:	37 81       	ldd	r19, Z+7	; 0x07
    1a12:	2f 5f       	subi	r18, 0xFF	; 255
    1a14:	3f 4f       	sbci	r19, 0xFF	; 255
    1a16:	37 83       	std	Z+7, r19	; 0x07
    1a18:	26 83       	std	Z+6, r18	; 0x06
    1a1a:	14 c0       	rjmp	.+40     	; 0x1a44 <fputc+0x6e>
    1a1c:	8b 01       	movw	r16, r22
    1a1e:	ec 01       	movw	r28, r24
    1a20:	fb 01       	movw	r30, r22
    1a22:	00 84       	ldd	r0, Z+8	; 0x08
    1a24:	f1 85       	ldd	r31, Z+9	; 0x09
    1a26:	e0 2d       	mov	r30, r0
    1a28:	09 95       	icall
    1a2a:	89 2b       	or	r24, r25
    1a2c:	e1 f6       	brne	.-72     	; 0x19e6 <fputc+0x10>
    1a2e:	d8 01       	movw	r26, r16
    1a30:	16 96       	adiw	r26, 0x06	; 6
    1a32:	8d 91       	ld	r24, X+
    1a34:	9c 91       	ld	r25, X
    1a36:	17 97       	sbiw	r26, 0x07	; 7
    1a38:	01 96       	adiw	r24, 0x01	; 1
    1a3a:	17 96       	adiw	r26, 0x07	; 7
    1a3c:	9c 93       	st	X, r25
    1a3e:	8e 93       	st	-X, r24
    1a40:	16 97       	sbiw	r26, 0x06	; 6
    1a42:	ce 01       	movw	r24, r28
    1a44:	df 91       	pop	r29
    1a46:	cf 91       	pop	r28
    1a48:	1f 91       	pop	r17
    1a4a:	0f 91       	pop	r16
    1a4c:	08 95       	ret

00001a4e <printf>:
    1a4e:	a0 e0       	ldi	r26, 0x00	; 0
    1a50:	b0 e0       	ldi	r27, 0x00	; 0
    1a52:	ed e2       	ldi	r30, 0x2D	; 45
    1a54:	fd e0       	ldi	r31, 0x0D	; 13
    1a56:	0c 94 d6 0b 	jmp	0x17ac	; 0x17ac <__prologue_saves__+0x20>
    1a5a:	ae 01       	movw	r20, r28
    1a5c:	4b 5f       	subi	r20, 0xFB	; 251
    1a5e:	5f 4f       	sbci	r21, 0xFF	; 255
    1a60:	fa 01       	movw	r30, r20
    1a62:	61 91       	ld	r22, Z+
    1a64:	71 91       	ld	r23, Z+
    1a66:	af 01       	movw	r20, r30
    1a68:	80 91 e8 02 	lds	r24, 0x02E8	; 0x8002e8 <__data_end+0x2>
    1a6c:	90 91 e9 02 	lds	r25, 0x02E9	; 0x8002e9 <__data_end+0x3>
    1a70:	0e 94 49 08 	call	0x1092	; 0x1092 <vfprintf>
    1a74:	e2 e0       	ldi	r30, 0x02	; 2
    1a76:	0c 94 f2 0b 	jmp	0x17e4	; 0x17e4 <__epilogue_restores__+0x20>

00001a7a <puts>:
    1a7a:	0f 93       	push	r16
    1a7c:	1f 93       	push	r17
    1a7e:	cf 93       	push	r28
    1a80:	df 93       	push	r29
    1a82:	e0 91 e8 02 	lds	r30, 0x02E8	; 0x8002e8 <__data_end+0x2>
    1a86:	f0 91 e9 02 	lds	r31, 0x02E9	; 0x8002e9 <__data_end+0x3>
    1a8a:	23 81       	ldd	r18, Z+3	; 0x03
    1a8c:	21 ff       	sbrs	r18, 1
    1a8e:	1b c0       	rjmp	.+54     	; 0x1ac6 <puts+0x4c>
    1a90:	8c 01       	movw	r16, r24
    1a92:	d0 e0       	ldi	r29, 0x00	; 0
    1a94:	c0 e0       	ldi	r28, 0x00	; 0
    1a96:	f8 01       	movw	r30, r16
    1a98:	81 91       	ld	r24, Z+
    1a9a:	8f 01       	movw	r16, r30
    1a9c:	60 91 e8 02 	lds	r22, 0x02E8	; 0x8002e8 <__data_end+0x2>
    1aa0:	70 91 e9 02 	lds	r23, 0x02E9	; 0x8002e9 <__data_end+0x3>
    1aa4:	db 01       	movw	r26, r22
    1aa6:	18 96       	adiw	r26, 0x08	; 8
    1aa8:	ed 91       	ld	r30, X+
    1aaa:	fc 91       	ld	r31, X
    1aac:	19 97       	sbiw	r26, 0x09	; 9
    1aae:	88 23       	and	r24, r24
    1ab0:	31 f0       	breq	.+12     	; 0x1abe <puts+0x44>
    1ab2:	09 95       	icall
    1ab4:	89 2b       	or	r24, r25
    1ab6:	79 f3       	breq	.-34     	; 0x1a96 <puts+0x1c>
    1ab8:	df ef       	ldi	r29, 0xFF	; 255
    1aba:	cf ef       	ldi	r28, 0xFF	; 255
    1abc:	ec cf       	rjmp	.-40     	; 0x1a96 <puts+0x1c>
    1abe:	8a e0       	ldi	r24, 0x0A	; 10
    1ac0:	09 95       	icall
    1ac2:	89 2b       	or	r24, r25
    1ac4:	19 f0       	breq	.+6      	; 0x1acc <puts+0x52>
    1ac6:	8f ef       	ldi	r24, 0xFF	; 255
    1ac8:	9f ef       	ldi	r25, 0xFF	; 255
    1aca:	02 c0       	rjmp	.+4      	; 0x1ad0 <puts+0x56>
    1acc:	8d 2f       	mov	r24, r29
    1ace:	9c 2f       	mov	r25, r28
    1ad0:	df 91       	pop	r29
    1ad2:	cf 91       	pop	r28
    1ad4:	1f 91       	pop	r17
    1ad6:	0f 91       	pop	r16
    1ad8:	08 95       	ret

00001ada <__ultoa_invert>:
    1ada:	fa 01       	movw	r30, r20
    1adc:	aa 27       	eor	r26, r26
    1ade:	28 30       	cpi	r18, 0x08	; 8
    1ae0:	51 f1       	breq	.+84     	; 0x1b36 <__ultoa_invert+0x5c>
    1ae2:	20 31       	cpi	r18, 0x10	; 16
    1ae4:	81 f1       	breq	.+96     	; 0x1b46 <__ultoa_invert+0x6c>
    1ae6:	e8 94       	clt
    1ae8:	6f 93       	push	r22
    1aea:	6e 7f       	andi	r22, 0xFE	; 254
    1aec:	6e 5f       	subi	r22, 0xFE	; 254
    1aee:	7f 4f       	sbci	r23, 0xFF	; 255
    1af0:	8f 4f       	sbci	r24, 0xFF	; 255
    1af2:	9f 4f       	sbci	r25, 0xFF	; 255
    1af4:	af 4f       	sbci	r26, 0xFF	; 255
    1af6:	b1 e0       	ldi	r27, 0x01	; 1
    1af8:	3e d0       	rcall	.+124    	; 0x1b76 <__ultoa_invert+0x9c>
    1afa:	b4 e0       	ldi	r27, 0x04	; 4
    1afc:	3c d0       	rcall	.+120    	; 0x1b76 <__ultoa_invert+0x9c>
    1afe:	67 0f       	add	r22, r23
    1b00:	78 1f       	adc	r23, r24
    1b02:	89 1f       	adc	r24, r25
    1b04:	9a 1f       	adc	r25, r26
    1b06:	a1 1d       	adc	r26, r1
    1b08:	68 0f       	add	r22, r24
    1b0a:	79 1f       	adc	r23, r25
    1b0c:	8a 1f       	adc	r24, r26
    1b0e:	91 1d       	adc	r25, r1
    1b10:	a1 1d       	adc	r26, r1
    1b12:	6a 0f       	add	r22, r26
    1b14:	71 1d       	adc	r23, r1
    1b16:	81 1d       	adc	r24, r1
    1b18:	91 1d       	adc	r25, r1
    1b1a:	a1 1d       	adc	r26, r1
    1b1c:	20 d0       	rcall	.+64     	; 0x1b5e <__ultoa_invert+0x84>
    1b1e:	09 f4       	brne	.+2      	; 0x1b22 <__ultoa_invert+0x48>
    1b20:	68 94       	set
    1b22:	3f 91       	pop	r19
    1b24:	2a e0       	ldi	r18, 0x0A	; 10
    1b26:	26 9f       	mul	r18, r22
    1b28:	11 24       	eor	r1, r1
    1b2a:	30 19       	sub	r19, r0
    1b2c:	30 5d       	subi	r19, 0xD0	; 208
    1b2e:	31 93       	st	Z+, r19
    1b30:	de f6       	brtc	.-74     	; 0x1ae8 <__ultoa_invert+0xe>
    1b32:	cf 01       	movw	r24, r30
    1b34:	08 95       	ret
    1b36:	46 2f       	mov	r20, r22
    1b38:	47 70       	andi	r20, 0x07	; 7
    1b3a:	40 5d       	subi	r20, 0xD0	; 208
    1b3c:	41 93       	st	Z+, r20
    1b3e:	b3 e0       	ldi	r27, 0x03	; 3
    1b40:	0f d0       	rcall	.+30     	; 0x1b60 <__ultoa_invert+0x86>
    1b42:	c9 f7       	brne	.-14     	; 0x1b36 <__ultoa_invert+0x5c>
    1b44:	f6 cf       	rjmp	.-20     	; 0x1b32 <__ultoa_invert+0x58>
    1b46:	46 2f       	mov	r20, r22
    1b48:	4f 70       	andi	r20, 0x0F	; 15
    1b4a:	40 5d       	subi	r20, 0xD0	; 208
    1b4c:	4a 33       	cpi	r20, 0x3A	; 58
    1b4e:	18 f0       	brcs	.+6      	; 0x1b56 <__ultoa_invert+0x7c>
    1b50:	49 5d       	subi	r20, 0xD9	; 217
    1b52:	31 fd       	sbrc	r19, 1
    1b54:	40 52       	subi	r20, 0x20	; 32
    1b56:	41 93       	st	Z+, r20
    1b58:	02 d0       	rcall	.+4      	; 0x1b5e <__ultoa_invert+0x84>
    1b5a:	a9 f7       	brne	.-22     	; 0x1b46 <__ultoa_invert+0x6c>
    1b5c:	ea cf       	rjmp	.-44     	; 0x1b32 <__ultoa_invert+0x58>
    1b5e:	b4 e0       	ldi	r27, 0x04	; 4
    1b60:	a6 95       	lsr	r26
    1b62:	97 95       	ror	r25
    1b64:	87 95       	ror	r24
    1b66:	77 95       	ror	r23
    1b68:	67 95       	ror	r22
    1b6a:	ba 95       	dec	r27
    1b6c:	c9 f7       	brne	.-14     	; 0x1b60 <__ultoa_invert+0x86>
    1b6e:	00 97       	sbiw	r24, 0x00	; 0
    1b70:	61 05       	cpc	r22, r1
    1b72:	71 05       	cpc	r23, r1
    1b74:	08 95       	ret
    1b76:	9b 01       	movw	r18, r22
    1b78:	ac 01       	movw	r20, r24
    1b7a:	0a 2e       	mov	r0, r26
    1b7c:	06 94       	lsr	r0
    1b7e:	57 95       	ror	r21
    1b80:	47 95       	ror	r20
    1b82:	37 95       	ror	r19
    1b84:	27 95       	ror	r18
    1b86:	ba 95       	dec	r27
    1b88:	c9 f7       	brne	.-14     	; 0x1b7c <__ultoa_invert+0xa2>
    1b8a:	62 0f       	add	r22, r18
    1b8c:	73 1f       	adc	r23, r19
    1b8e:	84 1f       	adc	r24, r20
    1b90:	95 1f       	adc	r25, r21
    1b92:	a0 1d       	adc	r26, r0
    1b94:	08 95       	ret

00001b96 <_exit>:
    1b96:	f8 94       	cli

00001b98 <__stop_program>:
    1b98:	ff cf       	rjmp	.-2      	; 0x1b98 <__stop_program>
