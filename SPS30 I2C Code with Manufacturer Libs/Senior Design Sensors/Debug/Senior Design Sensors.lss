
Senior Design Sensors.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001b6  00800100  00000f90  00001024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000f90  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  008002b6  008002b6  000011da  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000011da  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001238  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001e0  00000000  00000000  00001278  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002647  00000000  00000000  00001458  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001016  00000000  00000000  00003a9f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000fa7  00000000  00000000  00004ab5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000065c  00000000  00000000  00005a5c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000aff  00000000  00000000  000060b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001c15  00000000  00000000  00006bb7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001b8  00000000  00000000  000087cc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  10:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  14:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  18:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  1c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  20:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  24:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  28:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  2c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  30:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  34:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  38:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  3c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  40:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  44:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  48:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  4c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  50:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  54:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  58:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  5c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  60:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  64:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  68:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  6c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  70:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  74:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  78:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  7c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  80:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  84:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  88:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  8c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  90:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  94:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  98:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  9c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  ac:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  b0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_copy_data>:
  c0:	12 e0       	ldi	r17, 0x02	; 2
  c2:	a0 e0       	ldi	r26, 0x00	; 0
  c4:	b1 e0       	ldi	r27, 0x01	; 1
  c6:	e0 e9       	ldi	r30, 0x90	; 144
  c8:	ff e0       	ldi	r31, 0x0F	; 15
  ca:	02 c0       	rjmp	.+4      	; 0xd0 <__do_copy_data+0x10>
  cc:	05 90       	lpm	r0, Z+
  ce:	0d 92       	st	X+, r0
  d0:	a6 3b       	cpi	r26, 0xB6	; 182
  d2:	b1 07       	cpc	r27, r17
  d4:	d9 f7       	brne	.-10     	; 0xcc <__do_copy_data+0xc>

000000d6 <__do_clear_bss>:
  d6:	22 e0       	ldi	r18, 0x02	; 2
  d8:	a6 eb       	ldi	r26, 0xB6	; 182
  da:	b2 e0       	ldi	r27, 0x02	; 2
  dc:	01 c0       	rjmp	.+2      	; 0xe0 <.do_clear_bss_start>

000000de <.do_clear_bss_loop>:
  de:	1d 92       	st	X+, r1

000000e0 <.do_clear_bss_start>:
  e0:	ac 3b       	cpi	r26, 0xBC	; 188
  e2:	b2 07       	cpc	r27, r18
  e4:	e1 f7       	brne	.-8      	; 0xde <.do_clear_bss_loop>
  e6:	0e 94 93 00 	call	0x126	; 0x126 <main>
  ea:	0c 94 c6 07 	jmp	0xf8c	; 0xf8c <_exit>

000000ee <__bad_interrupt>:
  ee:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000f2 <uart_putchar>:

FILE uart_output = FDEV_SETUP_STREAM(uart_putchar, NULL, _FDEV_SETUP_WRITE);

// Initialize printf for UART
void init_printf(void) {
	stdout = &uart_output;  // Link stdout to uart_output
  f2:	e0 ec       	ldi	r30, 0xC0	; 192
  f4:	f0 e0       	ldi	r31, 0x00	; 0
  f6:	90 81       	ld	r25, Z
  f8:	95 ff       	sbrs	r25, 5
  fa:	fd cf       	rjmp	.-6      	; 0xf6 <uart_putchar+0x4>
  fc:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
 100:	80 e0       	ldi	r24, 0x00	; 0
 102:	90 e0       	ldi	r25, 0x00	; 0
 104:	08 95       	ret

00000106 <uart_init>:
 106:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
 10a:	87 e6       	ldi	r24, 0x67	; 103
 10c:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
 110:	e1 ec       	ldi	r30, 0xC1	; 193
 112:	f0 e0       	ldi	r31, 0x00	; 0
 114:	80 81       	ld	r24, Z
 116:	88 61       	ori	r24, 0x18	; 24
 118:	80 83       	st	Z, r24
 11a:	e2 ec       	ldi	r30, 0xC2	; 194
 11c:	f0 e0       	ldi	r31, 0x00	; 0
 11e:	80 81       	ld	r24, Z
 120:	86 60       	ori	r24, 0x06	; 6
 122:	80 83       	st	Z, r24
 124:	08 95       	ret

00000126 <main>:
}

int main(void)
{
 126:	cf 93       	push	r28
 128:	df 93       	push	r29
 12a:	cd b7       	in	r28, 0x3d	; 61
 12c:	de b7       	in	r29, 0x3e	; 62
 12e:	a8 97       	sbiw	r28, 0x28	; 40
 130:	0f b6       	in	r0, 0x3f	; 63
 132:	f8 94       	cli
 134:	de bf       	out	0x3e, r29	; 62
 136:	0f be       	out	0x3f, r0	; 63
 138:	cd bf       	out	0x3d, r28	; 61
	uart_init();  // Initialize UART
 13a:	0e 94 83 00 	call	0x106	; 0x106 <uart_init>

FILE uart_output = FDEV_SETUP_STREAM(uart_putchar, NULL, _FDEV_SETUP_WRITE);

// Initialize printf for UART
void init_printf(void) {
	stdout = &uart_output;  // Link stdout to uart_output
 13e:	80 e0       	ldi	r24, 0x00	; 0
 140:	91 e0       	ldi	r25, 0x01	; 1
 142:	90 93 b9 02 	sts	0x02B9, r25	; 0x8002b9 <__data_end+0x3>
 146:	80 93 b8 02 	sts	0x02B8, r24	; 0x8002b8 <__data_end+0x2>
	
	struct sps30_measurement m;
    int16_t ret;

    /* Initialize I2C bus */
    sensirion_i2c_init();
 14a:	0e 94 ca 03 	call	0x794	; 0x794 <sensirion_i2c_init>
	//printf("probe=%d\n", sps30_probe());
	
	//sensirion_i2c_write(SPS30_I2C_ADDRESS, 0x5607, 16);
	
	
	printf("Probing!");
 14e:	8e e0       	ldi	r24, 0x0E	; 14
 150:	91 e0       	ldi	r25, 0x01	; 1
 152:	9f 93       	push	r25
 154:	8f 93       	push	r24
 156:	0e 94 b8 04 	call	0x970	; 0x970 <printf>
	if(sps30_probe() != 0)
 15a:	0e 94 54 03 	call	0x6a8	; 0x6a8 <sps30_probe>
 15e:	0f 90       	pop	r0
 160:	0f 90       	pop	r0
 162:	89 2b       	or	r24, r25
 164:	21 f0       	breq	.+8      	; 0x16e <main+0x48>
	{
		printf("SPS sensor probing failed\n");
 166:	87 e1       	ldi	r24, 0x17	; 23
 168:	91 e0       	ldi	r25, 0x01	; 1
 16a:	0e 94 ce 04 	call	0x99c	; 0x99c <puts>
	*/
	
	//printf("SPS sensor probing successful\n");
	
	
	ret = sps30_start_measurement();
 16e:	0e 94 89 02 	call	0x512	; 0x512 <sps30_start_measurement>
	if (ret < 0){
 172:	99 23       	and	r25, r25
 174:	24 f4       	brge	.+8      	; 0x17e <main+0x58>
		printf("error starting measurement\n");
 176:	81 e3       	ldi	r24, 0x31	; 49
 178:	91 e0       	ldi	r25, 0x01	; 1
 17a:	0e 94 ce 04 	call	0x99c	; 0x99c <puts>
	}
	printf("measurements started\n");
 17e:	8c e4       	ldi	r24, 0x4C	; 76
 180:	91 e0       	ldi	r25, 0x01	; 1
 182:	0e 94 ce 04 	call	0x99c	; 0x99c <puts>
		ret = sps30_read_measurement(&m);
		if (ret < 0) {
			printf("error reading measurement\n");

			} else {
			printf("measured values:\n"
 186:	0b e7       	ldi	r16, 0x7B	; 123
 188:	11 e0       	ldi	r17, 0x01	; 1
	
    /* Replace with your application code */
    while (1) 
    {
		
		sensirion_sleep_usec(SPS30_MEASUREMENT_DURATION_USEC); 
 18a:	60 e4       	ldi	r22, 0x40	; 64
 18c:	72 e4       	ldi	r23, 0x42	; 66
 18e:	8f e0       	ldi	r24, 0x0F	; 15
 190:	90 e0       	ldi	r25, 0x00	; 0
 192:	0e 94 5e 04 	call	0x8bc	; 0x8bc <sensirion_sleep_usec>
		ret = sps30_read_measurement(&m);
 196:	ce 01       	movw	r24, r28
 198:	01 96       	adiw	r24, 0x01	; 1
 19a:	0e 94 ad 02 	call	0x55a	; 0x55a <sps30_read_measurement>
		if (ret < 0) {
 19e:	99 23       	and	r25, r25
 1a0:	2c f4       	brge	.+10     	; 0x1ac <main+0x86>
			printf("error reading measurement\n");
 1a2:	81 e6       	ldi	r24, 0x61	; 97
 1a4:	91 e0       	ldi	r25, 0x01	; 1
 1a6:	0e 94 ce 04 	call	0x99c	; 0x99c <puts>
 1aa:	ef cf       	rjmp	.-34     	; 0x18a <main+0x64>

			} else {
			printf("measured values:\n"
 1ac:	88 a5       	ldd	r24, Y+40	; 0x28
 1ae:	8f 93       	push	r24
 1b0:	8f a1       	ldd	r24, Y+39	; 0x27
 1b2:	8f 93       	push	r24
 1b4:	8e a1       	ldd	r24, Y+38	; 0x26
 1b6:	8f 93       	push	r24
 1b8:	8d a1       	ldd	r24, Y+37	; 0x25
 1ba:	8f 93       	push	r24
 1bc:	8c a1       	ldd	r24, Y+36	; 0x24
 1be:	8f 93       	push	r24
 1c0:	8b a1       	ldd	r24, Y+35	; 0x23
 1c2:	8f 93       	push	r24
 1c4:	8a a1       	ldd	r24, Y+34	; 0x22
 1c6:	8f 93       	push	r24
 1c8:	89 a1       	ldd	r24, Y+33	; 0x21
 1ca:	8f 93       	push	r24
 1cc:	88 a1       	ldd	r24, Y+32	; 0x20
 1ce:	8f 93       	push	r24
 1d0:	8f 8d       	ldd	r24, Y+31	; 0x1f
 1d2:	8f 93       	push	r24
 1d4:	8e 8d       	ldd	r24, Y+30	; 0x1e
 1d6:	8f 93       	push	r24
 1d8:	8d 8d       	ldd	r24, Y+29	; 0x1d
 1da:	8f 93       	push	r24
 1dc:	8c 8d       	ldd	r24, Y+28	; 0x1c
 1de:	8f 93       	push	r24
 1e0:	8b 8d       	ldd	r24, Y+27	; 0x1b
 1e2:	8f 93       	push	r24
 1e4:	8a 8d       	ldd	r24, Y+26	; 0x1a
 1e6:	8f 93       	push	r24
 1e8:	89 8d       	ldd	r24, Y+25	; 0x19
 1ea:	8f 93       	push	r24
 1ec:	88 8d       	ldd	r24, Y+24	; 0x18
 1ee:	8f 93       	push	r24
 1f0:	8f 89       	ldd	r24, Y+23	; 0x17
 1f2:	8f 93       	push	r24
 1f4:	8e 89       	ldd	r24, Y+22	; 0x16
 1f6:	8f 93       	push	r24
 1f8:	8d 89       	ldd	r24, Y+21	; 0x15
 1fa:	8f 93       	push	r24
 1fc:	8c 89       	ldd	r24, Y+20	; 0x14
 1fe:	8f 93       	push	r24
 200:	8b 89       	ldd	r24, Y+19	; 0x13
 202:	8f 93       	push	r24
 204:	8a 89       	ldd	r24, Y+18	; 0x12
 206:	8f 93       	push	r24
 208:	89 89       	ldd	r24, Y+17	; 0x11
 20a:	8f 93       	push	r24
 20c:	88 89       	ldd	r24, Y+16	; 0x10
 20e:	8f 93       	push	r24
 210:	8f 85       	ldd	r24, Y+15	; 0x0f
 212:	8f 93       	push	r24
 214:	8e 85       	ldd	r24, Y+14	; 0x0e
 216:	8f 93       	push	r24
 218:	8d 85       	ldd	r24, Y+13	; 0x0d
 21a:	8f 93       	push	r24
 21c:	8c 85       	ldd	r24, Y+12	; 0x0c
 21e:	8f 93       	push	r24
 220:	8b 85       	ldd	r24, Y+11	; 0x0b
 222:	8f 93       	push	r24
 224:	8a 85       	ldd	r24, Y+10	; 0x0a
 226:	8f 93       	push	r24
 228:	89 85       	ldd	r24, Y+9	; 0x09
 22a:	8f 93       	push	r24
 22c:	88 85       	ldd	r24, Y+8	; 0x08
 22e:	8f 93       	push	r24
 230:	8f 81       	ldd	r24, Y+7	; 0x07
 232:	8f 93       	push	r24
 234:	8e 81       	ldd	r24, Y+6	; 0x06
 236:	8f 93       	push	r24
 238:	8d 81       	ldd	r24, Y+5	; 0x05
 23a:	8f 93       	push	r24
 23c:	8c 81       	ldd	r24, Y+4	; 0x04
 23e:	8f 93       	push	r24
 240:	8b 81       	ldd	r24, Y+3	; 0x03
 242:	8f 93       	push	r24
 244:	8a 81       	ldd	r24, Y+2	; 0x02
 246:	8f 93       	push	r24
 248:	89 81       	ldd	r24, Y+1	; 0x01
 24a:	8f 93       	push	r24
 24c:	1f 93       	push	r17
 24e:	0f 93       	push	r16
 250:	0e 94 b8 04 	call	0x970	; 0x970 <printf>
 254:	0f b6       	in	r0, 0x3f	; 63
 256:	f8 94       	cli
 258:	de bf       	out	0x3e, r29	; 62
 25a:	0f be       	out	0x3f, r0	; 63
 25c:	cd bf       	out	0x3d, r28	; 61
 25e:	95 cf       	rjmp	.-214    	; 0x18a <main+0x64>

00000260 <sensirion_bytes_to_uint32_t>:
        word_bytes = (uint8_t*)&data_words[i];
        data_words[i] = ((uint16_t)word_bytes[0] << 8) | word_bytes[1];
    }

    return NO_ERROR;
}
 260:	fc 01       	movw	r30, r24
 262:	20 81       	ld	r18, Z
 264:	61 81       	ldd	r22, Z+1	; 0x01
 266:	86 2f       	mov	r24, r22
 268:	90 e0       	ldi	r25, 0x00	; 0
 26a:	a0 e0       	ldi	r26, 0x00	; 0
 26c:	b0 e0       	ldi	r27, 0x00	; 0
 26e:	dc 01       	movw	r26, r24
 270:	99 27       	eor	r25, r25
 272:	88 27       	eor	r24, r24
 274:	b2 2b       	or	r27, r18
 276:	23 81       	ldd	r18, Z+3	; 0x03
 278:	82 2b       	or	r24, r18
 27a:	22 81       	ldd	r18, Z+2	; 0x02
 27c:	bc 01       	movw	r22, r24
 27e:	cd 01       	movw	r24, r26
 280:	72 2b       	or	r23, r18
 282:	08 95       	ret

00000284 <sensirion_bytes_to_float>:
 284:	0e 94 30 01 	call	0x260	; 0x260 <sensirion_bytes_to_uint32_t>
 288:	08 95       	ret

0000028a <sensirion_common_generate_crc>:
 28a:	61 15       	cp	r22, r1
 28c:	71 05       	cpc	r23, r1
 28e:	a1 f0       	breq	.+40     	; 0x2b8 <sensirion_common_generate_crc+0x2e>
 290:	fc 01       	movw	r30, r24
 292:	68 0f       	add	r22, r24
 294:	79 1f       	adc	r23, r25
 296:	8f ef       	ldi	r24, 0xFF	; 255
 298:	21 e3       	ldi	r18, 0x31	; 49
 29a:	91 91       	ld	r25, Z+
 29c:	89 27       	eor	r24, r25
 29e:	98 e0       	ldi	r25, 0x08	; 8
 2a0:	88 23       	and	r24, r24
 2a2:	1c f4       	brge	.+6      	; 0x2aa <sensirion_common_generate_crc+0x20>
 2a4:	88 0f       	add	r24, r24
 2a6:	82 27       	eor	r24, r18
 2a8:	01 c0       	rjmp	.+2      	; 0x2ac <sensirion_common_generate_crc+0x22>
 2aa:	88 0f       	add	r24, r24
 2ac:	91 50       	subi	r25, 0x01	; 1
 2ae:	c1 f7       	brne	.-16     	; 0x2a0 <sensirion_common_generate_crc+0x16>
 2b0:	e6 17       	cp	r30, r22
 2b2:	f7 07       	cpc	r31, r23
 2b4:	91 f7       	brne	.-28     	; 0x29a <sensirion_common_generate_crc+0x10>
 2b6:	08 95       	ret
 2b8:	8f ef       	ldi	r24, 0xFF	; 255
 2ba:	08 95       	ret

000002bc <sensirion_common_check_crc>:
 2bc:	cf 93       	push	r28
 2be:	c4 2f       	mov	r28, r20
 2c0:	0e 94 45 01 	call	0x28a	; 0x28a <sensirion_common_generate_crc>
 2c4:	91 e0       	ldi	r25, 0x01	; 1
 2c6:	8c 13       	cpse	r24, r28
 2c8:	01 c0       	rjmp	.+2      	; 0x2cc <sensirion_common_check_crc+0x10>
 2ca:	90 e0       	ldi	r25, 0x00	; 0
 2cc:	89 2f       	mov	r24, r25
 2ce:	81 95       	neg	r24
 2d0:	cf 91       	pop	r28
 2d2:	08 95       	ret

000002d4 <sensirion_fill_cmd_send_buf>:
 2d4:	ef 92       	push	r14
 2d6:	ff 92       	push	r15
 2d8:	0f 93       	push	r16
 2da:	1f 93       	push	r17
 2dc:	cf 93       	push	r28
 2de:	df 93       	push	r29
 2e0:	ec 01       	movw	r28, r24
 2e2:	78 83       	st	Y, r23
 2e4:	69 83       	std	Y+1, r22	; 0x01
 2e6:	22 23       	and	r18, r18
 2e8:	01 f1       	breq	.+64     	; 0x32a <sensirion_fill_cmd_send_buf+0x56>
 2ea:	e2 2e       	mov	r14, r18
 2ec:	22 96       	adiw	r28, 0x02	; 2
 2ee:	04 2f       	mov	r16, r20
 2f0:	15 2f       	mov	r17, r21
 2f2:	f1 2c       	mov	r15, r1
 2f4:	f8 01       	movw	r30, r16
 2f6:	81 81       	ldd	r24, Z+1	; 0x01
 2f8:	88 83       	st	Y, r24
 2fa:	80 81       	ld	r24, Z
 2fc:	0e 5f       	subi	r16, 0xFE	; 254
 2fe:	1f 4f       	sbci	r17, 0xFF	; 255
 300:	89 83       	std	Y+1, r24	; 0x01
 302:	62 e0       	ldi	r22, 0x02	; 2
 304:	70 e0       	ldi	r23, 0x00	; 0
 306:	ce 01       	movw	r24, r28
 308:	0e 94 45 01 	call	0x28a	; 0x28a <sensirion_common_generate_crc>
 30c:	8a 83       	std	Y+2, r24	; 0x02
 30e:	f3 94       	inc	r15
 310:	23 96       	adiw	r28, 0x03	; 3
 312:	ef 10       	cpse	r14, r15
 314:	ef cf       	rjmp	.-34     	; 0x2f4 <sensirion_fill_cmd_send_buf+0x20>
 316:	ea 94       	dec	r14
 318:	8e 2d       	mov	r24, r14
 31a:	90 e0       	ldi	r25, 0x00	; 0
 31c:	9c 01       	movw	r18, r24
 31e:	22 0f       	add	r18, r18
 320:	33 1f       	adc	r19, r19
 322:	82 0f       	add	r24, r18
 324:	93 1f       	adc	r25, r19
 326:	05 96       	adiw	r24, 0x05	; 5
 328:	02 c0       	rjmp	.+4      	; 0x32e <sensirion_fill_cmd_send_buf+0x5a>
 32a:	82 e0       	ldi	r24, 0x02	; 2
 32c:	90 e0       	ldi	r25, 0x00	; 0
 32e:	df 91       	pop	r29
 330:	cf 91       	pop	r28
 332:	1f 91       	pop	r17
 334:	0f 91       	pop	r16
 336:	ff 90       	pop	r15
 338:	ef 90       	pop	r14
 33a:	08 95       	ret

0000033c <sensirion_i2c_read_words_as_bytes>:
 33c:	6f 92       	push	r6
 33e:	7f 92       	push	r7
 340:	8f 92       	push	r8
 342:	9f 92       	push	r9
 344:	af 92       	push	r10
 346:	bf 92       	push	r11
 348:	cf 92       	push	r12
 34a:	df 92       	push	r13
 34c:	ef 92       	push	r14
 34e:	ff 92       	push	r15
 350:	0f 93       	push	r16
 352:	1f 93       	push	r17
 354:	cf 93       	push	r28
 356:	df 93       	push	r29
 358:	cd b7       	in	r28, 0x3d	; 61
 35a:	de b7       	in	r29, 0x3e	; 62
 35c:	c0 54       	subi	r28, 0x40	; 64
 35e:	d1 09       	sbc	r29, r1
 360:	0f b6       	in	r0, 0x3f	; 63
 362:	f8 94       	cli
 364:	de bf       	out	0x3e, r29	; 62
 366:	0f be       	out	0x3f, r0	; 63
 368:	cd bf       	out	0x3d, r28	; 61
 36a:	c6 2e       	mov	r12, r22
 36c:	d7 2e       	mov	r13, r23
 36e:	4a 01       	movw	r8, r20
 370:	88 0c       	add	r8, r8
 372:	99 1c       	adc	r9, r9
 374:	84 0e       	add	r8, r20
 376:	95 1e       	adc	r9, r21
 378:	a4 01       	movw	r20, r8
 37a:	be 01       	movw	r22, r28
 37c:	6f 5f       	subi	r22, 0xFF	; 255
 37e:	7f 4f       	sbci	r23, 0xFF	; 255
 380:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <sensirion_i2c_read>
 384:	08 2f       	mov	r16, r24
 386:	08 2e       	mov	r0, r24
 388:	00 0c       	add	r0, r0
 38a:	11 0b       	sbc	r17, r17
 38c:	01 15       	cp	r16, r1
 38e:	11 05       	cpc	r17, r1
 390:	31 f4       	brne	.+12     	; 0x39e <sensirion_i2c_read_words_as_bytes+0x62>
 392:	81 14       	cp	r8, r1
 394:	91 04       	cpc	r9, r1
 396:	91 f4       	brne	.+36     	; 0x3bc <sensirion_i2c_read_words_as_bytes+0x80>
 398:	80 e0       	ldi	r24, 0x00	; 0
 39a:	90 e0       	ldi	r25, 0x00	; 0
 39c:	4a c0       	rjmp	.+148    	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
 39e:	1f 93       	push	r17
 3a0:	8f 93       	push	r24
 3a2:	82 e2       	ldi	r24, 0x22	; 34
 3a4:	92 e0       	ldi	r25, 0x02	; 2
 3a6:	9f 93       	push	r25
 3a8:	8f 93       	push	r24
 3aa:	0e 94 b8 04 	call	0x970	; 0x970 <printf>
 3ae:	0f 90       	pop	r0
 3b0:	0f 90       	pop	r0
 3b2:	0f 90       	pop	r0
 3b4:	0f 90       	pop	r0
 3b6:	80 2f       	mov	r24, r16
 3b8:	91 2f       	mov	r25, r17
 3ba:	3b c0       	rjmp	.+118    	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
 3bc:	8e 01       	movw	r16, r28
 3be:	0f 5f       	subi	r16, 0xFF	; 255
 3c0:	1f 4f       	sbci	r17, 0xFF	; 255
 3c2:	ec 2c       	mov	r14, r12
 3c4:	fd 2c       	mov	r15, r13
 3c6:	c1 2c       	mov	r12, r1
 3c8:	d1 2c       	mov	r13, r1
 3ca:	0f 2e       	mov	r0, r31
 3cc:	fd e3       	ldi	r31, 0x3D	; 61
 3ce:	6f 2e       	mov	r6, r31
 3d0:	f2 e0       	ldi	r31, 0x02	; 2
 3d2:	7f 2e       	mov	r7, r31
 3d4:	f0 2d       	mov	r31, r0
 3d6:	58 01       	movw	r10, r16
 3d8:	f8 01       	movw	r30, r16
 3da:	42 81       	ldd	r20, Z+2	; 0x02
 3dc:	62 e0       	ldi	r22, 0x02	; 2
 3de:	70 e0       	ldi	r23, 0x00	; 0
 3e0:	c8 01       	movw	r24, r16
 3e2:	0e 94 5e 01 	call	0x2bc	; 0x2bc <sensirion_common_check_crc>
 3e6:	28 2f       	mov	r18, r24
 3e8:	08 2e       	mov	r0, r24
 3ea:	00 0c       	add	r0, r0
 3ec:	33 0b       	sbc	r19, r19
 3ee:	21 15       	cp	r18, r1
 3f0:	31 05       	cpc	r19, r1
 3f2:	51 f0       	breq	.+20     	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
 3f4:	3f 93       	push	r19
 3f6:	8f 93       	push	r24
 3f8:	7f 92       	push	r7
 3fa:	6f 92       	push	r6
 3fc:	0e 94 b8 04 	call	0x970	; 0x970 <printf>
 400:	0f 90       	pop	r0
 402:	0f 90       	pop	r0
 404:	0f 90       	pop	r0
 406:	0f 90       	pop	r0
 408:	f5 01       	movw	r30, r10
 40a:	80 81       	ld	r24, Z
 40c:	f7 01       	movw	r30, r14
 40e:	80 83       	st	Z, r24
 410:	f5 01       	movw	r30, r10
 412:	81 81       	ldd	r24, Z+1	; 0x01
 414:	f7 01       	movw	r30, r14
 416:	81 83       	std	Z+1, r24	; 0x01
 418:	f3 e0       	ldi	r31, 0x03	; 3
 41a:	cf 0e       	add	r12, r31
 41c:	d1 1c       	adc	r13, r1
 41e:	0d 5f       	subi	r16, 0xFD	; 253
 420:	1f 4f       	sbci	r17, 0xFF	; 255
 422:	82 e0       	ldi	r24, 0x02	; 2
 424:	e8 0e       	add	r14, r24
 426:	f1 1c       	adc	r15, r1
 428:	c8 14       	cp	r12, r8
 42a:	d9 04       	cpc	r13, r9
 42c:	a0 f2       	brcs	.-88     	; 0x3d6 <sensirion_i2c_read_words_as_bytes+0x9a>
 42e:	80 e0       	ldi	r24, 0x00	; 0
 430:	90 e0       	ldi	r25, 0x00	; 0
 432:	c0 5c       	subi	r28, 0xC0	; 192
 434:	df 4f       	sbci	r29, 0xFF	; 255
 436:	0f b6       	in	r0, 0x3f	; 63
 438:	f8 94       	cli
 43a:	de bf       	out	0x3e, r29	; 62
 43c:	0f be       	out	0x3f, r0	; 63
 43e:	cd bf       	out	0x3d, r28	; 61
 440:	df 91       	pop	r29
 442:	cf 91       	pop	r28
 444:	1f 91       	pop	r17
 446:	0f 91       	pop	r16
 448:	ff 90       	pop	r15
 44a:	ef 90       	pop	r14
 44c:	df 90       	pop	r13
 44e:	cf 90       	pop	r12
 450:	bf 90       	pop	r11
 452:	af 90       	pop	r10
 454:	9f 90       	pop	r9
 456:	8f 90       	pop	r8
 458:	7f 90       	pop	r7
 45a:	6f 90       	pop	r6
 45c:	08 95       	ret

0000045e <sensirion_i2c_write_cmd>:

int16_t sensirion_i2c_write_cmd(uint8_t address, uint16_t command) {
 45e:	1f 93       	push	r17
 460:	cf 93       	push	r28
 462:	df 93       	push	r29
 464:	00 d0       	rcall	.+0      	; 0x466 <sensirion_i2c_write_cmd+0x8>
 466:	cd b7       	in	r28, 0x3d	; 61
 468:	de b7       	in	r29, 0x3e	; 62
 46a:	18 2f       	mov	r17, r24
    uint8_t buf[SENSIRION_COMMAND_SIZE];

    sensirion_fill_cmd_send_buf(buf, command, NULL, 0);
 46c:	20 e0       	ldi	r18, 0x00	; 0
 46e:	40 e0       	ldi	r20, 0x00	; 0
 470:	50 e0       	ldi	r21, 0x00	; 0
 472:	ce 01       	movw	r24, r28
 474:	01 96       	adiw	r24, 0x01	; 1
 476:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <sensirion_fill_cmd_send_buf>
    return sensirion_i2c_write(address, buf, SENSIRION_COMMAND_SIZE);
 47a:	42 e0       	ldi	r20, 0x02	; 2
 47c:	50 e0       	ldi	r21, 0x00	; 0
 47e:	be 01       	movw	r22, r28
 480:	6f 5f       	subi	r22, 0xFF	; 255
 482:	7f 4f       	sbci	r23, 0xFF	; 255
 484:	81 2f       	mov	r24, r17
 486:	0e 94 20 04 	call	0x840	; 0x840 <sensirion_i2c_write>
}
 48a:	08 2e       	mov	r0, r24
 48c:	00 0c       	add	r0, r0
 48e:	99 0b       	sbc	r25, r25
 490:	0f 90       	pop	r0
 492:	0f 90       	pop	r0
 494:	df 91       	pop	r29
 496:	cf 91       	pop	r28
 498:	1f 91       	pop	r17
 49a:	08 95       	ret

0000049c <sensirion_i2c_write_cmd_with_args>:

int16_t sensirion_i2c_write_cmd_with_args(uint8_t address, uint16_t command,
                                          const uint16_t* data_words,
                                          uint16_t num_words) {
 49c:	1f 93       	push	r17
 49e:	cf 93       	push	r28
 4a0:	df 93       	push	r29
 4a2:	cd b7       	in	r28, 0x3d	; 61
 4a4:	de b7       	in	r29, 0x3e	; 62
 4a6:	a0 97       	sbiw	r28, 0x20	; 32
 4a8:	0f b6       	in	r0, 0x3f	; 63
 4aa:	f8 94       	cli
 4ac:	de bf       	out	0x3e, r29	; 62
 4ae:	0f be       	out	0x3f, r0	; 63
 4b0:	cd bf       	out	0x3d, r28	; 61
 4b2:	18 2f       	mov	r17, r24
    uint8_t buf[SENSIRION_MAX_BUFFER_WORDS];
    uint16_t buf_size;

    buf_size = sensirion_fill_cmd_send_buf(buf, command, data_words, num_words);
 4b4:	ce 01       	movw	r24, r28
 4b6:	01 96       	adiw	r24, 0x01	; 1
 4b8:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <sensirion_fill_cmd_send_buf>
    return sensirion_i2c_write(address, buf, buf_size);
 4bc:	ac 01       	movw	r20, r24
 4be:	be 01       	movw	r22, r28
 4c0:	6f 5f       	subi	r22, 0xFF	; 255
 4c2:	7f 4f       	sbci	r23, 0xFF	; 255
 4c4:	81 2f       	mov	r24, r17
 4c6:	0e 94 20 04 	call	0x840	; 0x840 <sensirion_i2c_write>
}
 4ca:	08 2e       	mov	r0, r24
 4cc:	00 0c       	add	r0, r0
 4ce:	99 0b       	sbc	r25, r25
 4d0:	a0 96       	adiw	r28, 0x20	; 32
 4d2:	0f b6       	in	r0, 0x3f	; 63
 4d4:	f8 94       	cli
 4d6:	de bf       	out	0x3e, r29	; 62
 4d8:	0f be       	out	0x3f, r0	; 63
 4da:	cd bf       	out	0x3d, r28	; 61
 4dc:	df 91       	pop	r29
 4de:	cf 91       	pop	r28
 4e0:	1f 91       	pop	r17
 4e2:	08 95       	ret

000004e4 <sps30_get_serial>:
    if (ret)
        return ret;

    sensirion_sleep_usec(SPS_CMD_DELAY_USEC);
    return 0;
}
 4e4:	cf 93       	push	r28
 4e6:	df 93       	push	r29
 4e8:	ec 01       	movw	r28, r24
 4ea:	63 e3       	ldi	r22, 0x33	; 51
 4ec:	70 ed       	ldi	r23, 0xD0	; 208
 4ee:	89 e6       	ldi	r24, 0x69	; 105
 4f0:	0e 94 2f 02 	call	0x45e	; 0x45e <sensirion_i2c_write_cmd>
 4f4:	9c 01       	movw	r18, r24
 4f6:	00 97       	sbiw	r24, 0x00	; 0
 4f8:	41 f4       	brne	.+16     	; 0x50a <sps30_get_serial+0x26>
 4fa:	40 e1       	ldi	r20, 0x10	; 16
 4fc:	50 e0       	ldi	r21, 0x00	; 0
 4fe:	be 01       	movw	r22, r28
 500:	89 e6       	ldi	r24, 0x69	; 105
 502:	0e 94 9e 01 	call	0x33c	; 0x33c <sensirion_i2c_read_words_as_bytes>
 506:	1f 8e       	std	Y+31, r1	; 0x1f
 508:	01 c0       	rjmp	.+2      	; 0x50c <sps30_get_serial+0x28>
 50a:	93 2f       	mov	r25, r19
 50c:	df 91       	pop	r29
 50e:	cf 91       	pop	r28
 510:	08 95       	ret

00000512 <sps30_start_measurement>:
 512:	0f 93       	push	r16
 514:	1f 93       	push	r17
 516:	cf 93       	push	r28
 518:	df 93       	push	r29
 51a:	00 d0       	rcall	.+0      	; 0x51c <sps30_start_measurement+0xa>
 51c:	cd b7       	in	r28, 0x3d	; 61
 51e:	de b7       	in	r29, 0x3e	; 62
 520:	80 e0       	ldi	r24, 0x00	; 0
 522:	93 e0       	ldi	r25, 0x03	; 3
 524:	9a 83       	std	Y+2, r25	; 0x02
 526:	89 83       	std	Y+1, r24	; 0x01
 528:	21 e0       	ldi	r18, 0x01	; 1
 52a:	30 e0       	ldi	r19, 0x00	; 0
 52c:	ae 01       	movw	r20, r28
 52e:	4f 5f       	subi	r20, 0xFF	; 255
 530:	5f 4f       	sbci	r21, 0xFF	; 255
 532:	60 e1       	ldi	r22, 0x10	; 16
 534:	70 e0       	ldi	r23, 0x00	; 0
 536:	89 e6       	ldi	r24, 0x69	; 105
 538:	0e 94 4e 02 	call	0x49c	; 0x49c <sensirion_i2c_write_cmd_with_args>
 53c:	8c 01       	movw	r16, r24
 53e:	60 e2       	ldi	r22, 0x20	; 32
 540:	7e e4       	ldi	r23, 0x4E	; 78
 542:	80 e0       	ldi	r24, 0x00	; 0
 544:	90 e0       	ldi	r25, 0x00	; 0
 546:	0e 94 5e 04 	call	0x8bc	; 0x8bc <sensirion_sleep_usec>
 54a:	c8 01       	movw	r24, r16
 54c:	0f 90       	pop	r0
 54e:	0f 90       	pop	r0
 550:	df 91       	pop	r29
 552:	cf 91       	pop	r28
 554:	1f 91       	pop	r17
 556:	0f 91       	pop	r16
 558:	08 95       	ret

0000055a <sps30_read_measurement>:
 55a:	ef 92       	push	r14
 55c:	ff 92       	push	r15
 55e:	0f 93       	push	r16
 560:	1f 93       	push	r17
 562:	cf 93       	push	r28
 564:	df 93       	push	r29
 566:	cd b7       	in	r28, 0x3d	; 61
 568:	de b7       	in	r29, 0x3e	; 62
 56a:	a8 97       	sbiw	r28, 0x28	; 40
 56c:	0f b6       	in	r0, 0x3f	; 63
 56e:	f8 94       	cli
 570:	de bf       	out	0x3e, r29	; 62
 572:	0f be       	out	0x3f, r0	; 63
 574:	cd bf       	out	0x3d, r28	; 61
 576:	8c 01       	movw	r16, r24
 578:	60 e0       	ldi	r22, 0x00	; 0
 57a:	73 e0       	ldi	r23, 0x03	; 3
 57c:	89 e6       	ldi	r24, 0x69	; 105
 57e:	0e 94 2f 02 	call	0x45e	; 0x45e <sensirion_i2c_write_cmd>
 582:	00 97       	sbiw	r24, 0x00	; 0
 584:	09 f0       	breq	.+2      	; 0x588 <sps30_read_measurement+0x2e>
 586:	6a c0       	rjmp	.+212    	; 0x65c <sps30_read_measurement+0x102>
 588:	44 e1       	ldi	r20, 0x14	; 20
 58a:	50 e0       	ldi	r21, 0x00	; 0
 58c:	be 01       	movw	r22, r28
 58e:	6f 5f       	subi	r22, 0xFF	; 255
 590:	7f 4f       	sbci	r23, 0xFF	; 255
 592:	89 e6       	ldi	r24, 0x69	; 105
 594:	0e 94 9e 01 	call	0x33c	; 0x33c <sensirion_i2c_read_words_as_bytes>
 598:	7c 01       	movw	r14, r24
 59a:	00 97       	sbiw	r24, 0x00	; 0
 59c:	09 f0       	breq	.+2      	; 0x5a0 <sps30_read_measurement+0x46>
 59e:	5d c0       	rjmp	.+186    	; 0x65a <sps30_read_measurement+0x100>
 5a0:	ce 01       	movw	r24, r28
 5a2:	01 96       	adiw	r24, 0x01	; 1
 5a4:	0e 94 42 01 	call	0x284	; 0x284 <sensirion_bytes_to_float>
 5a8:	f8 01       	movw	r30, r16
 5aa:	60 83       	st	Z, r22
 5ac:	71 83       	std	Z+1, r23	; 0x01
 5ae:	82 83       	std	Z+2, r24	; 0x02
 5b0:	93 83       	std	Z+3, r25	; 0x03
 5b2:	ce 01       	movw	r24, r28
 5b4:	05 96       	adiw	r24, 0x05	; 5
 5b6:	0e 94 42 01 	call	0x284	; 0x284 <sensirion_bytes_to_float>
 5ba:	f8 01       	movw	r30, r16
 5bc:	64 83       	std	Z+4, r22	; 0x04
 5be:	75 83       	std	Z+5, r23	; 0x05
 5c0:	86 83       	std	Z+6, r24	; 0x06
 5c2:	97 83       	std	Z+7, r25	; 0x07
 5c4:	ce 01       	movw	r24, r28
 5c6:	09 96       	adiw	r24, 0x09	; 9
 5c8:	0e 94 42 01 	call	0x284	; 0x284 <sensirion_bytes_to_float>
 5cc:	f8 01       	movw	r30, r16
 5ce:	60 87       	std	Z+8, r22	; 0x08
 5d0:	71 87       	std	Z+9, r23	; 0x09
 5d2:	82 87       	std	Z+10, r24	; 0x0a
 5d4:	93 87       	std	Z+11, r25	; 0x0b
 5d6:	ce 01       	movw	r24, r28
 5d8:	0d 96       	adiw	r24, 0x0d	; 13
 5da:	0e 94 42 01 	call	0x284	; 0x284 <sensirion_bytes_to_float>
 5de:	f8 01       	movw	r30, r16
 5e0:	64 87       	std	Z+12, r22	; 0x0c
 5e2:	75 87       	std	Z+13, r23	; 0x0d
 5e4:	86 87       	std	Z+14, r24	; 0x0e
 5e6:	97 87       	std	Z+15, r25	; 0x0f
 5e8:	ce 01       	movw	r24, r28
 5ea:	41 96       	adiw	r24, 0x11	; 17
 5ec:	0e 94 42 01 	call	0x284	; 0x284 <sensirion_bytes_to_float>
 5f0:	f8 01       	movw	r30, r16
 5f2:	60 8b       	std	Z+16, r22	; 0x10
 5f4:	71 8b       	std	Z+17, r23	; 0x11
 5f6:	82 8b       	std	Z+18, r24	; 0x12
 5f8:	93 8b       	std	Z+19, r25	; 0x13
 5fa:	ce 01       	movw	r24, r28
 5fc:	45 96       	adiw	r24, 0x15	; 21
 5fe:	0e 94 42 01 	call	0x284	; 0x284 <sensirion_bytes_to_float>
 602:	f8 01       	movw	r30, r16
 604:	64 8b       	std	Z+20, r22	; 0x14
 606:	75 8b       	std	Z+21, r23	; 0x15
 608:	86 8b       	std	Z+22, r24	; 0x16
 60a:	97 8b       	std	Z+23, r25	; 0x17
 60c:	ce 01       	movw	r24, r28
 60e:	49 96       	adiw	r24, 0x19	; 25
 610:	0e 94 42 01 	call	0x284	; 0x284 <sensirion_bytes_to_float>
 614:	f8 01       	movw	r30, r16
 616:	60 8f       	std	Z+24, r22	; 0x18
 618:	71 8f       	std	Z+25, r23	; 0x19
 61a:	82 8f       	std	Z+26, r24	; 0x1a
 61c:	93 8f       	std	Z+27, r25	; 0x1b
 61e:	ce 01       	movw	r24, r28
 620:	4d 96       	adiw	r24, 0x1d	; 29
 622:	0e 94 42 01 	call	0x284	; 0x284 <sensirion_bytes_to_float>
 626:	f8 01       	movw	r30, r16
 628:	64 8f       	std	Z+28, r22	; 0x1c
 62a:	75 8f       	std	Z+29, r23	; 0x1d
 62c:	86 8f       	std	Z+30, r24	; 0x1e
 62e:	97 8f       	std	Z+31, r25	; 0x1f
 630:	ce 01       	movw	r24, r28
 632:	81 96       	adiw	r24, 0x21	; 33
 634:	0e 94 42 01 	call	0x284	; 0x284 <sensirion_bytes_to_float>
 638:	f8 01       	movw	r30, r16
 63a:	60 a3       	std	Z+32, r22	; 0x20
 63c:	71 a3       	std	Z+33, r23	; 0x21
 63e:	82 a3       	std	Z+34, r24	; 0x22
 640:	93 a3       	std	Z+35, r25	; 0x23
 642:	ce 01       	movw	r24, r28
 644:	85 96       	adiw	r24, 0x25	; 37
 646:	0e 94 42 01 	call	0x284	; 0x284 <sensirion_bytes_to_float>
 64a:	f8 01       	movw	r30, r16
 64c:	64 a3       	std	Z+36, r22	; 0x24
 64e:	75 a3       	std	Z+37, r23	; 0x25
 650:	86 a3       	std	Z+38, r24	; 0x26
 652:	97 a3       	std	Z+39, r25	; 0x27
 654:	8e 2d       	mov	r24, r14
 656:	9f 2d       	mov	r25, r15
 658:	01 c0       	rjmp	.+2      	; 0x65c <sps30_read_measurement+0x102>
 65a:	9f 2d       	mov	r25, r15
 65c:	a8 96       	adiw	r28, 0x28	; 40
 65e:	0f b6       	in	r0, 0x3f	; 63
 660:	f8 94       	cli
 662:	de bf       	out	0x3e, r29	; 62
 664:	0f be       	out	0x3f, r0	; 63
 666:	cd bf       	out	0x3d, r28	; 61
 668:	df 91       	pop	r29
 66a:	cf 91       	pop	r28
 66c:	1f 91       	pop	r17
 66e:	0f 91       	pop	r16
 670:	ff 90       	pop	r15
 672:	ef 90       	pop	r14
 674:	08 95       	ret

00000676 <sps30_wake_up>:

int16_t sps30_wake_up(void) {
 676:	cf 93       	push	r28
 678:	df 93       	push	r29
    int16_t ret;

    /* wake-up must be sent twice within 100ms, ignore first return value */
    (void)sensirion_i2c_write_cmd(SPS30_I2C_ADDRESS, SPS_CMD_WAKE_UP);
 67a:	63 e0       	ldi	r22, 0x03	; 3
 67c:	71 e1       	ldi	r23, 0x11	; 17
 67e:	89 e6       	ldi	r24, 0x69	; 105
 680:	0e 94 2f 02 	call	0x45e	; 0x45e <sensirion_i2c_write_cmd>
    ret = sensirion_i2c_write_cmd(SPS30_I2C_ADDRESS, SPS_CMD_WAKE_UP);
 684:	63 e0       	ldi	r22, 0x03	; 3
 686:	71 e1       	ldi	r23, 0x11	; 17
 688:	89 e6       	ldi	r24, 0x69	; 105
 68a:	0e 94 2f 02 	call	0x45e	; 0x45e <sensirion_i2c_write_cmd>
 68e:	ec 01       	movw	r28, r24
	
    if (ret)
 690:	89 2b       	or	r24, r25
 692:	31 f4       	brne	.+12     	; 0x6a0 <sps30_wake_up+0x2a>
	{
		//printf("\nret:%d\n", ret);
        return ret;
	}

    sensirion_sleep_usec(SPS_CMD_DELAY_USEC);
 694:	68 e8       	ldi	r22, 0x88	; 136
 696:	73 e1       	ldi	r23, 0x13	; 19
 698:	80 e0       	ldi	r24, 0x00	; 0
 69a:	90 e0       	ldi	r25, 0x00	; 0
 69c:	0e 94 5e 04 	call	0x8bc	; 0x8bc <sensirion_sleep_usec>
    return 0;
}
 6a0:	ce 01       	movw	r24, r28
 6a2:	df 91       	pop	r29
 6a4:	cf 91       	pop	r28
 6a6:	08 95       	ret

000006a8 <sps30_probe>:

const char* sps_get_driver_version(void) {
    return SPS_DRV_VERSION_STR;
}

int16_t sps30_probe(void) {
 6a8:	cf 93       	push	r28
 6aa:	df 93       	push	r29
 6ac:	cd b7       	in	r28, 0x3d	; 61
 6ae:	de b7       	in	r29, 0x3e	; 62
 6b0:	a0 97       	sbiw	r28, 0x20	; 32
 6b2:	0f b6       	in	r0, 0x3f	; 63
 6b4:	f8 94       	cli
 6b6:	de bf       	out	0x3e, r29	; 62
 6b8:	0f be       	out	0x3f, r0	; 63
 6ba:	cd bf       	out	0x3d, r28	; 61
    char serial[SPS30_MAX_SERIAL_LEN];

    // Try to wake up, but ignore failure if it is not in sleep mode
    (void)sps30_wake_up();
 6bc:	0e 94 3b 03 	call	0x676	; 0x676 <sps30_wake_up>

    return sps30_get_serial(serial);
 6c0:	ce 01       	movw	r24, r28
 6c2:	01 96       	adiw	r24, 0x01	; 1
 6c4:	0e 94 72 02 	call	0x4e4	; 0x4e4 <sps30_get_serial>
}
 6c8:	a0 96       	adiw	r28, 0x20	; 32
 6ca:	0f b6       	in	r0, 0x3f	; 63
 6cc:	f8 94       	cli
 6ce:	de bf       	out	0x3e, r29	; 62
 6d0:	0f be       	out	0x3f, r0	; 63
 6d2:	cd bf       	out	0x3d, r28	; 61
 6d4:	df 91       	pop	r29
 6d6:	cf 91       	pop	r28
 6d8:	08 95       	ret

000006da <i2c_start>:


/**
 * Release all resources initialized by sensirion_i2c_init().
 */
void sensirion_i2c_release(void) {
 6da:	94 ea       	ldi	r25, 0xA4	; 164
 6dc:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
 6e0:	ec eb       	ldi	r30, 0xBC	; 188
 6e2:	f0 e0       	ldi	r31, 0x00	; 0
 6e4:	90 81       	ld	r25, Z
 6e6:	99 23       	and	r25, r25
 6e8:	ec f7       	brge	.-6      	; 0x6e4 <i2c_start+0xa>
 6ea:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
 6ee:	98 7f       	andi	r25, 0xF8	; 248
 6f0:	98 30       	cpi	r25, 0x08	; 8
 6f2:	11 f0       	breq	.+4      	; 0x6f8 <i2c_start+0x1e>
 6f4:	90 31       	cpi	r25, 0x10	; 16
 6f6:	b9 f4       	brne	.+46     	; 0x726 <i2c_start+0x4c>
 6f8:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
 6fc:	84 e8       	ldi	r24, 0x84	; 132
 6fe:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
 702:	ec eb       	ldi	r30, 0xBC	; 188
 704:	f0 e0       	ldi	r31, 0x00	; 0
 706:	80 81       	ld	r24, Z
 708:	88 23       	and	r24, r24
 70a:	ec f7       	brge	.-6      	; 0x706 <i2c_start+0x2c>
 70c:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
 710:	88 7f       	andi	r24, 0xF8	; 248
 712:	88 31       	cpi	r24, 0x18	; 24
 714:	51 f0       	breq	.+20     	; 0x72a <i2c_start+0x50>
 716:	80 34       	cpi	r24, 0x40	; 64
 718:	51 f0       	breq	.+20     	; 0x72e <i2c_start+0x54>
 71a:	88 e5       	ldi	r24, 0x58	; 88
 71c:	92 e0       	ldi	r25, 0x02	; 2
 71e:	0e 94 ce 04 	call	0x99c	; 0x99c <puts>
 722:	80 e0       	ldi	r24, 0x00	; 0
 724:	08 95       	ret
 726:	81 e0       	ldi	r24, 0x01	; 1
 728:	08 95       	ret
 72a:	80 e0       	ldi	r24, 0x00	; 0
 72c:	08 95       	ret
 72e:	80 e0       	ldi	r24, 0x00	; 0
 730:	08 95       	ret

00000732 <i2c_stop>:
 732:	84 e9       	ldi	r24, 0x94	; 148
 734:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
 738:	ec eb       	ldi	r30, 0xBC	; 188
 73a:	f0 e0       	ldi	r31, 0x00	; 0
 73c:	80 81       	ld	r24, Z
 73e:	84 fd       	sbrc	r24, 4
 740:	fd cf       	rjmp	.-6      	; 0x73c <i2c_stop+0xa>
 742:	08 95       	ret

00000744 <i2c_write>:
 744:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
 748:	84 e8       	ldi	r24, 0x84	; 132
 74a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
 74e:	ec eb       	ldi	r30, 0xBC	; 188
 750:	f0 e0       	ldi	r31, 0x00	; 0
 752:	80 81       	ld	r24, Z
 754:	88 23       	and	r24, r24
 756:	ec f7       	brge	.-6      	; 0x752 <i2c_write+0xe>
 758:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
 75c:	98 7f       	andi	r25, 0xF8	; 248
 75e:	81 e0       	ldi	r24, 0x01	; 1
 760:	98 32       	cpi	r25, 0x28	; 40
 762:	09 f4       	brne	.+2      	; 0x766 <i2c_write+0x22>
 764:	80 e0       	ldi	r24, 0x00	; 0
 766:	08 95       	ret

00000768 <i2c_readAck>:
 768:	84 ec       	ldi	r24, 0xC4	; 196
 76a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
 76e:	ec eb       	ldi	r30, 0xBC	; 188
 770:	f0 e0       	ldi	r31, 0x00	; 0
 772:	80 81       	ld	r24, Z
 774:	88 23       	and	r24, r24
 776:	ec f7       	brge	.-6      	; 0x772 <i2c_readAck+0xa>
 778:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
 77c:	08 95       	ret

0000077e <i2c_readNak>:
 77e:	84 e8       	ldi	r24, 0x84	; 132
 780:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
 784:	ec eb       	ldi	r30, 0xBC	; 188
 786:	f0 e0       	ldi	r31, 0x00	; 0
 788:	80 81       	ld	r24, Z
 78a:	88 23       	and	r24, r24
 78c:	ec f7       	brge	.-6      	; 0x788 <i2c_readNak+0xa>
 78e:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
 792:	08 95       	ret

00000794 <sensirion_i2c_init>:
 794:	88 e4       	ldi	r24, 0x48	; 72
 796:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__DATA_REGION_ORIGIN__+0x58>
 79a:	e9 eb       	ldi	r30, 0xB9	; 185
 79c:	f0 e0       	ldi	r31, 0x00	; 0
 79e:	80 81       	ld	r24, Z
 7a0:	8c 7f       	andi	r24, 0xFC	; 252
 7a2:	80 83       	st	Z, r24
 7a4:	87 b1       	in	r24, 0x07	; 7
 7a6:	8f 7c       	andi	r24, 0xCF	; 207
 7a8:	87 b9       	out	0x07, r24	; 7
 7aa:	88 b1       	in	r24, 0x08	; 8
 7ac:	80 63       	ori	r24, 0x30	; 48
 7ae:	88 b9       	out	0x08, r24	; 8
 7b0:	08 95       	ret

000007b2 <sensirion_i2c_read>:
 * @param address 7-bit I2C address to read from
 * @param data    pointer to the buffer where the data is to be stored
 * @param count   number of bytes to read from I2C and store in the buffer
 * @returns 0 on success, error code otherwise
 */
int8_t sensirion_i2c_read(uint8_t address, uint8_t* data, uint16_t count) {
 7b2:	af 92       	push	r10
 7b4:	bf 92       	push	r11
 7b6:	cf 92       	push	r12
 7b8:	df 92       	push	r13
 7ba:	ef 92       	push	r14
 7bc:	ff 92       	push	r15
 7be:	0f 93       	push	r16
 7c0:	1f 93       	push	r17
 7c2:	cf 93       	push	r28
 7c4:	df 93       	push	r29
 7c6:	b6 2e       	mov	r11, r22
 7c8:	a7 2e       	mov	r10, r23
 7ca:	7a 01       	movw	r14, r20
	uint16_t i;

	address = (address << 1) | 0;
	i2c_start(address);
 7cc:	88 0f       	add	r24, r24
 7ce:	0e 94 6d 03 	call	0x6da	; 0x6da <i2c_start>
	
	// Read bytes from the I2C bus
    for (i = 0; i < count; i++) {
 7d2:	e1 14       	cp	r14, r1
 7d4:	f1 04       	cpc	r15, r1
 7d6:	d1 f0       	breq	.+52     	; 0x80c <sensirion_i2c_read+0x5a>
 7d8:	0b 2d       	mov	r16, r11
 7da:	1a 2d       	mov	r17, r10
 7dc:	c0 e0       	ldi	r28, 0x00	; 0
 7de:	d0 e0       	ldi	r29, 0x00	; 0
        if (i < count - 1) {
 7e0:	67 01       	movw	r12, r14
 7e2:	81 e0       	ldi	r24, 0x01	; 1
 7e4:	c8 1a       	sub	r12, r24
 7e6:	d1 08       	sbc	r13, r1
 7e8:	cc 15       	cp	r28, r12
 7ea:	dd 05       	cpc	r29, r13
 7ec:	28 f4       	brcc	.+10     	; 0x7f8 <sensirion_i2c_read+0x46>
            // Use i2c_readAck to request the next byte
            data[i] = i2c_readAck();
 7ee:	0e 94 b4 03 	call	0x768	; 0x768 <i2c_readAck>
 7f2:	f8 01       	movw	r30, r16
 7f4:	80 83       	st	Z, r24
 7f6:	04 c0       	rjmp	.+8      	; 0x800 <sensirion_i2c_read+0x4e>
        } else {
            // Use i2c_readNak for the last byte to indicate end of read
            data[i] = i2c_readNak();
 7f8:	0e 94 bf 03 	call	0x77e	; 0x77e <i2c_readNak>
 7fc:	f8 01       	movw	r30, r16
 7fe:	80 83       	st	Z, r24

	address = (address << 1) | 0;
	i2c_start(address);
	
	// Read bytes from the I2C bus
    for (i = 0; i < count; i++) {
 800:	21 96       	adiw	r28, 0x01	; 1
 802:	0f 5f       	subi	r16, 0xFF	; 255
 804:	1f 4f       	sbci	r17, 0xFF	; 255
 806:	ec 16       	cp	r14, r28
 808:	fd 06       	cpc	r15, r29
 80a:	71 f7       	brne	.-36     	; 0x7e8 <sensirion_i2c_read+0x36>
            data[i] = i2c_readNak();
        }
    }

    // Stop the I2C communication
    i2c_stop();
 80c:	0e 94 99 03 	call	0x732	; 0x732 <i2c_stop>
	
	printf("data=0x%02X\n", data);
 810:	af 92       	push	r10
 812:	bf 92       	push	r11
 814:	8a e7       	ldi	r24, 0x7A	; 122
 816:	92 e0       	ldi	r25, 0x02	; 2
 818:	9f 93       	push	r25
 81a:	8f 93       	push	r24
 81c:	0e 94 b8 04 	call	0x970	; 0x970 <printf>
    //printf("Read %u bytes from address 0x%02X\n", count, address);
    return 0;
 820:	0f 90       	pop	r0
 822:	0f 90       	pop	r0
 824:	0f 90       	pop	r0
 826:	0f 90       	pop	r0
}
 828:	80 e0       	ldi	r24, 0x00	; 0
 82a:	df 91       	pop	r29
 82c:	cf 91       	pop	r28
 82e:	1f 91       	pop	r17
 830:	0f 91       	pop	r16
 832:	ff 90       	pop	r15
 834:	ef 90       	pop	r14
 836:	df 90       	pop	r13
 838:	cf 90       	pop	r12
 83a:	bf 90       	pop	r11
 83c:	af 90       	pop	r10
 83e:	08 95       	ret

00000840 <sensirion_i2c_write>:
 * @param data    pointer to the buffer containing the data to write
 * @param count   number of bytes to read from the buffer and send over I2C
 * @returns 0 on success, error code otherwise
 */
int8_t sensirion_i2c_write(uint8_t address, const uint8_t* data,
                           uint16_t count) {
 840:	ef 92       	push	r14
 842:	ff 92       	push	r15
 844:	0f 93       	push	r16
 846:	1f 93       	push	r17
 848:	cf 93       	push	r28
 84a:	df 93       	push	r29
 84c:	d6 2f       	mov	r29, r22
 84e:	c7 2f       	mov	r28, r23
 850:	7a 01       	movw	r14, r20
	uint16_t i;
	address = (address << 1) | 0;
	i2c_start(address);
 852:	88 0f       	add	r24, r24
 854:	0e 94 6d 03 	call	0x6da	; 0x6da <i2c_start>
	
	// Write each byte of the data buffer
    for (i = 0; i < count; i++) {
 858:	e1 14       	cp	r14, r1
 85a:	f1 04       	cpc	r15, r1
 85c:	e9 f0       	breq	.+58     	; 0x898 <sensirion_i2c_write+0x58>
 85e:	0d 2f       	mov	r16, r29
 860:	1c 2f       	mov	r17, r28
 862:	c0 e0       	ldi	r28, 0x00	; 0
 864:	d0 e0       	ldi	r29, 0x00	; 0
        if (i2c_write(data[i])) {
 866:	f8 01       	movw	r30, r16
 868:	81 91       	ld	r24, Z+
 86a:	8f 01       	movw	r16, r30
 86c:	0e 94 a2 03 	call	0x744	; 0x744 <i2c_write>
 870:	88 23       	and	r24, r24
 872:	71 f0       	breq	.+28     	; 0x890 <sensirion_i2c_write+0x50>
            printf("Data byte %d not acknowledged\n", i);
 874:	df 93       	push	r29
 876:	cf 93       	push	r28
 878:	87 e8       	ldi	r24, 0x87	; 135
 87a:	92 e0       	ldi	r25, 0x02	; 2
 87c:	9f 93       	push	r25
 87e:	8f 93       	push	r24
 880:	0e 94 b8 04 	call	0x970	; 0x970 <printf>
            return 1;  // Stop on error
 884:	0f 90       	pop	r0
 886:	0f 90       	pop	r0
 888:	0f 90       	pop	r0
 88a:	0f 90       	pop	r0
 88c:	81 e0       	ldi	r24, 0x01	; 1
 88e:	0f c0       	rjmp	.+30     	; 0x8ae <sensirion_i2c_write+0x6e>
	uint16_t i;
	address = (address << 1) | 0;
	i2c_start(address);
	
	// Write each byte of the data buffer
    for (i = 0; i < count; i++) {
 890:	21 96       	adiw	r28, 0x01	; 1
 892:	ec 16       	cp	r14, r28
 894:	fd 06       	cpc	r15, r29
 896:	39 f7       	brne	.-50     	; 0x866 <sensirion_i2c_write+0x26>
            printf("Data byte %d not acknowledged\n", i);
            return 1;  // Stop on error
        }
    }

	i2c_stop();
 898:	0e 94 99 03 	call	0x732	; 0x732 <i2c_stop>
	
	printf("Write complete!");
 89c:	86 ea       	ldi	r24, 0xA6	; 166
 89e:	92 e0       	ldi	r25, 0x02	; 2
 8a0:	9f 93       	push	r25
 8a2:	8f 93       	push	r24
 8a4:	0e 94 b8 04 	call	0x970	; 0x970 <printf>
	return 0;
 8a8:	0f 90       	pop	r0
 8aa:	0f 90       	pop	r0
 8ac:	80 e0       	ldi	r24, 0x00	; 0
}
 8ae:	df 91       	pop	r29
 8b0:	cf 91       	pop	r28
 8b2:	1f 91       	pop	r17
 8b4:	0f 91       	pop	r16
 8b6:	ff 90       	pop	r15
 8b8:	ef 90       	pop	r14
 8ba:	08 95       	ret

000008bc <sensirion_sleep_usec>:
 *
 * Despite the unit, a <10 millisecond precision is sufficient.
 *
 * @param useconds the sleep time in microseconds
 */
void sensirion_sleep_usec(uint32_t useconds) {
 8bc:	cf 92       	push	r12
 8be:	df 92       	push	r13
 8c0:	ef 92       	push	r14
 8c2:	ff 92       	push	r15
	//uint32_t temp = useconds * 1000;
    //_delay_ms(temp);
	
	uint32_t ms = useconds / 1000;
 8c4:	28 ee       	ldi	r18, 0xE8	; 232
 8c6:	33 e0       	ldi	r19, 0x03	; 3
 8c8:	40 e0       	ldi	r20, 0x00	; 0
 8ca:	50 e0       	ldi	r21, 0x00	; 0
 8cc:	0e 94 96 04 	call	0x92c	; 0x92c <__udivmodsi4>
 8d0:	f6 2f       	mov	r31, r22
 8d2:	e7 2f       	mov	r30, r23
	uint32_t us = useconds % 1000;
 8d4:	c6 2e       	mov	r12, r22
 8d6:	d7 2e       	mov	r13, r23
 8d8:	e8 2e       	mov	r14, r24
 8da:	f9 2e       	mov	r15, r25
	
	// Delay in milliseconds
	while (ms--) {
 8dc:	21 15       	cp	r18, r1
 8de:	31 05       	cpc	r19, r1
 8e0:	41 05       	cpc	r20, r1
 8e2:	51 05       	cpc	r21, r1
 8e4:	69 f0       	breq	.+26     	; 0x900 <__stack+0x1>
 8e6:	ba 01       	movw	r22, r20
 8e8:	a9 01       	movw	r20, r18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 8ea:	af e9       	ldi	r26, 0x9F	; 159
 8ec:	bf e0       	ldi	r27, 0x0F	; 15
 8ee:	11 97       	sbiw	r26, 0x01	; 1
 8f0:	f1 f7       	brne	.-4      	; 0x8ee <sensirion_sleep_usec+0x32>
 8f2:	00 c0       	rjmp	.+0      	; 0x8f4 <sensirion_sleep_usec+0x38>
 8f4:	00 00       	nop
 8f6:	41 50       	subi	r20, 0x01	; 1
 8f8:	51 09       	sbc	r21, r1
 8fa:	61 09       	sbc	r22, r1
 8fc:	71 09       	sbc	r23, r1
 8fe:	a9 f7       	brne	.-22     	; 0x8ea <sensirion_sleep_usec+0x2e>
		_delay_ms(1);
	}

	// Delay remaining microseconds
	while (us--) {
 900:	cd 28       	or	r12, r13
 902:	ce 28       	or	r12, r14
 904:	cf 28       	or	r12, r15
 906:	69 f0       	breq	.+26     	; 0x922 <__stack+0x23>
 908:	4f 2f       	mov	r20, r31
 90a:	5e 2f       	mov	r21, r30
 90c:	68 2f       	mov	r22, r24
 90e:	79 2f       	mov	r23, r25
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 910:	b5 e0       	ldi	r27, 0x05	; 5
 912:	ba 95       	dec	r27
 914:	f1 f7       	brne	.-4      	; 0x912 <__stack+0x13>
 916:	00 00       	nop
 918:	41 50       	subi	r20, 0x01	; 1
 91a:	51 09       	sbc	r21, r1
 91c:	61 09       	sbc	r22, r1
 91e:	71 09       	sbc	r23, r1
 920:	b9 f7       	brne	.-18     	; 0x910 <__stack+0x11>
		_delay_us(1);
	}
}
 922:	ff 90       	pop	r15
 924:	ef 90       	pop	r14
 926:	df 90       	pop	r13
 928:	cf 90       	pop	r12
 92a:	08 95       	ret

0000092c <__udivmodsi4>:
 92c:	a1 e2       	ldi	r26, 0x21	; 33
 92e:	1a 2e       	mov	r1, r26
 930:	aa 1b       	sub	r26, r26
 932:	bb 1b       	sub	r27, r27
 934:	fd 01       	movw	r30, r26
 936:	0d c0       	rjmp	.+26     	; 0x952 <__udivmodsi4_ep>

00000938 <__udivmodsi4_loop>:
 938:	aa 1f       	adc	r26, r26
 93a:	bb 1f       	adc	r27, r27
 93c:	ee 1f       	adc	r30, r30
 93e:	ff 1f       	adc	r31, r31
 940:	a2 17       	cp	r26, r18
 942:	b3 07       	cpc	r27, r19
 944:	e4 07       	cpc	r30, r20
 946:	f5 07       	cpc	r31, r21
 948:	20 f0       	brcs	.+8      	; 0x952 <__udivmodsi4_ep>
 94a:	a2 1b       	sub	r26, r18
 94c:	b3 0b       	sbc	r27, r19
 94e:	e4 0b       	sbc	r30, r20
 950:	f5 0b       	sbc	r31, r21

00000952 <__udivmodsi4_ep>:
 952:	66 1f       	adc	r22, r22
 954:	77 1f       	adc	r23, r23
 956:	88 1f       	adc	r24, r24
 958:	99 1f       	adc	r25, r25
 95a:	1a 94       	dec	r1
 95c:	69 f7       	brne	.-38     	; 0x938 <__udivmodsi4_loop>
 95e:	60 95       	com	r22
 960:	70 95       	com	r23
 962:	80 95       	com	r24
 964:	90 95       	com	r25
 966:	9b 01       	movw	r18, r22
 968:	ac 01       	movw	r20, r24
 96a:	bd 01       	movw	r22, r26
 96c:	cf 01       	movw	r24, r30
 96e:	08 95       	ret

00000970 <printf>:
 970:	a0 e0       	ldi	r26, 0x00	; 0
 972:	b0 e0       	ldi	r27, 0x00	; 0
 974:	ee eb       	ldi	r30, 0xBE	; 190
 976:	f4 e0       	ldi	r31, 0x04	; 4
 978:	0c 94 9f 07 	jmp	0xf3e	; 0xf3e <__prologue_saves__+0x20>
 97c:	ae 01       	movw	r20, r28
 97e:	4b 5f       	subi	r20, 0xFB	; 251
 980:	5f 4f       	sbci	r21, 0xFF	; 255
 982:	fa 01       	movw	r30, r20
 984:	61 91       	ld	r22, Z+
 986:	71 91       	ld	r23, Z+
 988:	af 01       	movw	r20, r30
 98a:	80 91 b8 02 	lds	r24, 0x02B8	; 0x8002b8 <__data_end+0x2>
 98e:	90 91 b9 02 	lds	r25, 0x02B9	; 0x8002b9 <__data_end+0x3>
 992:	0e 94 fe 04 	call	0x9fc	; 0x9fc <vfprintf>
 996:	e2 e0       	ldi	r30, 0x02	; 2
 998:	0c 94 bb 07 	jmp	0xf76	; 0xf76 <__epilogue_restores__+0x20>

0000099c <puts>:
 99c:	0f 93       	push	r16
 99e:	1f 93       	push	r17
 9a0:	cf 93       	push	r28
 9a2:	df 93       	push	r29
 9a4:	e0 91 b8 02 	lds	r30, 0x02B8	; 0x8002b8 <__data_end+0x2>
 9a8:	f0 91 b9 02 	lds	r31, 0x02B9	; 0x8002b9 <__data_end+0x3>
 9ac:	23 81       	ldd	r18, Z+3	; 0x03
 9ae:	21 ff       	sbrs	r18, 1
 9b0:	1b c0       	rjmp	.+54     	; 0x9e8 <puts+0x4c>
 9b2:	8c 01       	movw	r16, r24
 9b4:	d0 e0       	ldi	r29, 0x00	; 0
 9b6:	c0 e0       	ldi	r28, 0x00	; 0
 9b8:	f8 01       	movw	r30, r16
 9ba:	81 91       	ld	r24, Z+
 9bc:	8f 01       	movw	r16, r30
 9be:	60 91 b8 02 	lds	r22, 0x02B8	; 0x8002b8 <__data_end+0x2>
 9c2:	70 91 b9 02 	lds	r23, 0x02B9	; 0x8002b9 <__data_end+0x3>
 9c6:	db 01       	movw	r26, r22
 9c8:	18 96       	adiw	r26, 0x08	; 8
 9ca:	ed 91       	ld	r30, X+
 9cc:	fc 91       	ld	r31, X
 9ce:	19 97       	sbiw	r26, 0x09	; 9
 9d0:	88 23       	and	r24, r24
 9d2:	31 f0       	breq	.+12     	; 0x9e0 <puts+0x44>
 9d4:	09 95       	icall
 9d6:	89 2b       	or	r24, r25
 9d8:	79 f3       	breq	.-34     	; 0x9b8 <puts+0x1c>
 9da:	df ef       	ldi	r29, 0xFF	; 255
 9dc:	cf ef       	ldi	r28, 0xFF	; 255
 9de:	ec cf       	rjmp	.-40     	; 0x9b8 <puts+0x1c>
 9e0:	8a e0       	ldi	r24, 0x0A	; 10
 9e2:	09 95       	icall
 9e4:	89 2b       	or	r24, r25
 9e6:	19 f0       	breq	.+6      	; 0x9ee <puts+0x52>
 9e8:	8f ef       	ldi	r24, 0xFF	; 255
 9ea:	9f ef       	ldi	r25, 0xFF	; 255
 9ec:	02 c0       	rjmp	.+4      	; 0x9f2 <puts+0x56>
 9ee:	8d 2f       	mov	r24, r29
 9f0:	9c 2f       	mov	r25, r28
 9f2:	df 91       	pop	r29
 9f4:	cf 91       	pop	r28
 9f6:	1f 91       	pop	r17
 9f8:	0f 91       	pop	r16
 9fa:	08 95       	ret

000009fc <vfprintf>:
 9fc:	ab e0       	ldi	r26, 0x0B	; 11
 9fe:	b0 e0       	ldi	r27, 0x00	; 0
 a00:	e4 e0       	ldi	r30, 0x04	; 4
 a02:	f5 e0       	ldi	r31, 0x05	; 5
 a04:	0c 94 8f 07 	jmp	0xf1e	; 0xf1e <__prologue_saves__>
 a08:	6c 01       	movw	r12, r24
 a0a:	7b 01       	movw	r14, r22
 a0c:	8a 01       	movw	r16, r20
 a0e:	fc 01       	movw	r30, r24
 a10:	17 82       	std	Z+7, r1	; 0x07
 a12:	16 82       	std	Z+6, r1	; 0x06
 a14:	83 81       	ldd	r24, Z+3	; 0x03
 a16:	81 ff       	sbrs	r24, 1
 a18:	cc c1       	rjmp	.+920    	; 0xdb2 <vfprintf+0x3b6>
 a1a:	ce 01       	movw	r24, r28
 a1c:	01 96       	adiw	r24, 0x01	; 1
 a1e:	3c 01       	movw	r6, r24
 a20:	f6 01       	movw	r30, r12
 a22:	93 81       	ldd	r25, Z+3	; 0x03
 a24:	f7 01       	movw	r30, r14
 a26:	93 fd       	sbrc	r25, 3
 a28:	85 91       	lpm	r24, Z+
 a2a:	93 ff       	sbrs	r25, 3
 a2c:	81 91       	ld	r24, Z+
 a2e:	7f 01       	movw	r14, r30
 a30:	88 23       	and	r24, r24
 a32:	09 f4       	brne	.+2      	; 0xa36 <vfprintf+0x3a>
 a34:	ba c1       	rjmp	.+884    	; 0xdaa <vfprintf+0x3ae>
 a36:	85 32       	cpi	r24, 0x25	; 37
 a38:	39 f4       	brne	.+14     	; 0xa48 <vfprintf+0x4c>
 a3a:	93 fd       	sbrc	r25, 3
 a3c:	85 91       	lpm	r24, Z+
 a3e:	93 ff       	sbrs	r25, 3
 a40:	81 91       	ld	r24, Z+
 a42:	7f 01       	movw	r14, r30
 a44:	85 32       	cpi	r24, 0x25	; 37
 a46:	29 f4       	brne	.+10     	; 0xa52 <vfprintf+0x56>
 a48:	b6 01       	movw	r22, r12
 a4a:	90 e0       	ldi	r25, 0x00	; 0
 a4c:	0e 94 f5 06 	call	0xdea	; 0xdea <fputc>
 a50:	e7 cf       	rjmp	.-50     	; 0xa20 <vfprintf+0x24>
 a52:	91 2c       	mov	r9, r1
 a54:	21 2c       	mov	r2, r1
 a56:	31 2c       	mov	r3, r1
 a58:	ff e1       	ldi	r31, 0x1F	; 31
 a5a:	f3 15       	cp	r31, r3
 a5c:	d8 f0       	brcs	.+54     	; 0xa94 <vfprintf+0x98>
 a5e:	8b 32       	cpi	r24, 0x2B	; 43
 a60:	79 f0       	breq	.+30     	; 0xa80 <vfprintf+0x84>
 a62:	38 f4       	brcc	.+14     	; 0xa72 <vfprintf+0x76>
 a64:	80 32       	cpi	r24, 0x20	; 32
 a66:	79 f0       	breq	.+30     	; 0xa86 <vfprintf+0x8a>
 a68:	83 32       	cpi	r24, 0x23	; 35
 a6a:	a1 f4       	brne	.+40     	; 0xa94 <vfprintf+0x98>
 a6c:	23 2d       	mov	r18, r3
 a6e:	20 61       	ori	r18, 0x10	; 16
 a70:	1d c0       	rjmp	.+58     	; 0xaac <vfprintf+0xb0>
 a72:	8d 32       	cpi	r24, 0x2D	; 45
 a74:	61 f0       	breq	.+24     	; 0xa8e <vfprintf+0x92>
 a76:	80 33       	cpi	r24, 0x30	; 48
 a78:	69 f4       	brne	.+26     	; 0xa94 <vfprintf+0x98>
 a7a:	23 2d       	mov	r18, r3
 a7c:	21 60       	ori	r18, 0x01	; 1
 a7e:	16 c0       	rjmp	.+44     	; 0xaac <vfprintf+0xb0>
 a80:	83 2d       	mov	r24, r3
 a82:	82 60       	ori	r24, 0x02	; 2
 a84:	38 2e       	mov	r3, r24
 a86:	e3 2d       	mov	r30, r3
 a88:	e4 60       	ori	r30, 0x04	; 4
 a8a:	3e 2e       	mov	r3, r30
 a8c:	2a c0       	rjmp	.+84     	; 0xae2 <vfprintf+0xe6>
 a8e:	f3 2d       	mov	r31, r3
 a90:	f8 60       	ori	r31, 0x08	; 8
 a92:	1d c0       	rjmp	.+58     	; 0xace <vfprintf+0xd2>
 a94:	37 fc       	sbrc	r3, 7
 a96:	2d c0       	rjmp	.+90     	; 0xaf2 <vfprintf+0xf6>
 a98:	20 ed       	ldi	r18, 0xD0	; 208
 a9a:	28 0f       	add	r18, r24
 a9c:	2a 30       	cpi	r18, 0x0A	; 10
 a9e:	40 f0       	brcs	.+16     	; 0xab0 <vfprintf+0xb4>
 aa0:	8e 32       	cpi	r24, 0x2E	; 46
 aa2:	b9 f4       	brne	.+46     	; 0xad2 <vfprintf+0xd6>
 aa4:	36 fc       	sbrc	r3, 6
 aa6:	81 c1       	rjmp	.+770    	; 0xdaa <vfprintf+0x3ae>
 aa8:	23 2d       	mov	r18, r3
 aaa:	20 64       	ori	r18, 0x40	; 64
 aac:	32 2e       	mov	r3, r18
 aae:	19 c0       	rjmp	.+50     	; 0xae2 <vfprintf+0xe6>
 ab0:	36 fe       	sbrs	r3, 6
 ab2:	06 c0       	rjmp	.+12     	; 0xac0 <vfprintf+0xc4>
 ab4:	8a e0       	ldi	r24, 0x0A	; 10
 ab6:	98 9e       	mul	r9, r24
 ab8:	20 0d       	add	r18, r0
 aba:	11 24       	eor	r1, r1
 abc:	92 2e       	mov	r9, r18
 abe:	11 c0       	rjmp	.+34     	; 0xae2 <vfprintf+0xe6>
 ac0:	ea e0       	ldi	r30, 0x0A	; 10
 ac2:	2e 9e       	mul	r2, r30
 ac4:	20 0d       	add	r18, r0
 ac6:	11 24       	eor	r1, r1
 ac8:	22 2e       	mov	r2, r18
 aca:	f3 2d       	mov	r31, r3
 acc:	f0 62       	ori	r31, 0x20	; 32
 ace:	3f 2e       	mov	r3, r31
 ad0:	08 c0       	rjmp	.+16     	; 0xae2 <vfprintf+0xe6>
 ad2:	8c 36       	cpi	r24, 0x6C	; 108
 ad4:	21 f4       	brne	.+8      	; 0xade <vfprintf+0xe2>
 ad6:	83 2d       	mov	r24, r3
 ad8:	80 68       	ori	r24, 0x80	; 128
 ada:	38 2e       	mov	r3, r24
 adc:	02 c0       	rjmp	.+4      	; 0xae2 <vfprintf+0xe6>
 ade:	88 36       	cpi	r24, 0x68	; 104
 ae0:	41 f4       	brne	.+16     	; 0xaf2 <vfprintf+0xf6>
 ae2:	f7 01       	movw	r30, r14
 ae4:	93 fd       	sbrc	r25, 3
 ae6:	85 91       	lpm	r24, Z+
 ae8:	93 ff       	sbrs	r25, 3
 aea:	81 91       	ld	r24, Z+
 aec:	7f 01       	movw	r14, r30
 aee:	81 11       	cpse	r24, r1
 af0:	b3 cf       	rjmp	.-154    	; 0xa58 <vfprintf+0x5c>
 af2:	98 2f       	mov	r25, r24
 af4:	9f 7d       	andi	r25, 0xDF	; 223
 af6:	95 54       	subi	r25, 0x45	; 69
 af8:	93 30       	cpi	r25, 0x03	; 3
 afa:	28 f4       	brcc	.+10     	; 0xb06 <vfprintf+0x10a>
 afc:	0c 5f       	subi	r16, 0xFC	; 252
 afe:	1f 4f       	sbci	r17, 0xFF	; 255
 b00:	9f e3       	ldi	r25, 0x3F	; 63
 b02:	99 83       	std	Y+1, r25	; 0x01
 b04:	0d c0       	rjmp	.+26     	; 0xb20 <vfprintf+0x124>
 b06:	83 36       	cpi	r24, 0x63	; 99
 b08:	31 f0       	breq	.+12     	; 0xb16 <vfprintf+0x11a>
 b0a:	83 37       	cpi	r24, 0x73	; 115
 b0c:	71 f0       	breq	.+28     	; 0xb2a <vfprintf+0x12e>
 b0e:	83 35       	cpi	r24, 0x53	; 83
 b10:	09 f0       	breq	.+2      	; 0xb14 <vfprintf+0x118>
 b12:	59 c0       	rjmp	.+178    	; 0xbc6 <vfprintf+0x1ca>
 b14:	21 c0       	rjmp	.+66     	; 0xb58 <vfprintf+0x15c>
 b16:	f8 01       	movw	r30, r16
 b18:	80 81       	ld	r24, Z
 b1a:	89 83       	std	Y+1, r24	; 0x01
 b1c:	0e 5f       	subi	r16, 0xFE	; 254
 b1e:	1f 4f       	sbci	r17, 0xFF	; 255
 b20:	88 24       	eor	r8, r8
 b22:	83 94       	inc	r8
 b24:	91 2c       	mov	r9, r1
 b26:	53 01       	movw	r10, r6
 b28:	13 c0       	rjmp	.+38     	; 0xb50 <vfprintf+0x154>
 b2a:	28 01       	movw	r4, r16
 b2c:	f2 e0       	ldi	r31, 0x02	; 2
 b2e:	4f 0e       	add	r4, r31
 b30:	51 1c       	adc	r5, r1
 b32:	f8 01       	movw	r30, r16
 b34:	a0 80       	ld	r10, Z
 b36:	b1 80       	ldd	r11, Z+1	; 0x01
 b38:	36 fe       	sbrs	r3, 6
 b3a:	03 c0       	rjmp	.+6      	; 0xb42 <vfprintf+0x146>
 b3c:	69 2d       	mov	r22, r9
 b3e:	70 e0       	ldi	r23, 0x00	; 0
 b40:	02 c0       	rjmp	.+4      	; 0xb46 <vfprintf+0x14a>
 b42:	6f ef       	ldi	r22, 0xFF	; 255
 b44:	7f ef       	ldi	r23, 0xFF	; 255
 b46:	c5 01       	movw	r24, r10
 b48:	0e 94 ea 06 	call	0xdd4	; 0xdd4 <strnlen>
 b4c:	4c 01       	movw	r8, r24
 b4e:	82 01       	movw	r16, r4
 b50:	f3 2d       	mov	r31, r3
 b52:	ff 77       	andi	r31, 0x7F	; 127
 b54:	3f 2e       	mov	r3, r31
 b56:	16 c0       	rjmp	.+44     	; 0xb84 <vfprintf+0x188>
 b58:	28 01       	movw	r4, r16
 b5a:	22 e0       	ldi	r18, 0x02	; 2
 b5c:	42 0e       	add	r4, r18
 b5e:	51 1c       	adc	r5, r1
 b60:	f8 01       	movw	r30, r16
 b62:	a0 80       	ld	r10, Z
 b64:	b1 80       	ldd	r11, Z+1	; 0x01
 b66:	36 fe       	sbrs	r3, 6
 b68:	03 c0       	rjmp	.+6      	; 0xb70 <vfprintf+0x174>
 b6a:	69 2d       	mov	r22, r9
 b6c:	70 e0       	ldi	r23, 0x00	; 0
 b6e:	02 c0       	rjmp	.+4      	; 0xb74 <vfprintf+0x178>
 b70:	6f ef       	ldi	r22, 0xFF	; 255
 b72:	7f ef       	ldi	r23, 0xFF	; 255
 b74:	c5 01       	movw	r24, r10
 b76:	0e 94 df 06 	call	0xdbe	; 0xdbe <strnlen_P>
 b7a:	4c 01       	movw	r8, r24
 b7c:	f3 2d       	mov	r31, r3
 b7e:	f0 68       	ori	r31, 0x80	; 128
 b80:	3f 2e       	mov	r3, r31
 b82:	82 01       	movw	r16, r4
 b84:	33 fc       	sbrc	r3, 3
 b86:	1b c0       	rjmp	.+54     	; 0xbbe <vfprintf+0x1c2>
 b88:	82 2d       	mov	r24, r2
 b8a:	90 e0       	ldi	r25, 0x00	; 0
 b8c:	88 16       	cp	r8, r24
 b8e:	99 06       	cpc	r9, r25
 b90:	b0 f4       	brcc	.+44     	; 0xbbe <vfprintf+0x1c2>
 b92:	b6 01       	movw	r22, r12
 b94:	80 e2       	ldi	r24, 0x20	; 32
 b96:	90 e0       	ldi	r25, 0x00	; 0
 b98:	0e 94 f5 06 	call	0xdea	; 0xdea <fputc>
 b9c:	2a 94       	dec	r2
 b9e:	f4 cf       	rjmp	.-24     	; 0xb88 <vfprintf+0x18c>
 ba0:	f5 01       	movw	r30, r10
 ba2:	37 fc       	sbrc	r3, 7
 ba4:	85 91       	lpm	r24, Z+
 ba6:	37 fe       	sbrs	r3, 7
 ba8:	81 91       	ld	r24, Z+
 baa:	5f 01       	movw	r10, r30
 bac:	b6 01       	movw	r22, r12
 bae:	90 e0       	ldi	r25, 0x00	; 0
 bb0:	0e 94 f5 06 	call	0xdea	; 0xdea <fputc>
 bb4:	21 10       	cpse	r2, r1
 bb6:	2a 94       	dec	r2
 bb8:	21 e0       	ldi	r18, 0x01	; 1
 bba:	82 1a       	sub	r8, r18
 bbc:	91 08       	sbc	r9, r1
 bbe:	81 14       	cp	r8, r1
 bc0:	91 04       	cpc	r9, r1
 bc2:	71 f7       	brne	.-36     	; 0xba0 <vfprintf+0x1a4>
 bc4:	e8 c0       	rjmp	.+464    	; 0xd96 <vfprintf+0x39a>
 bc6:	84 36       	cpi	r24, 0x64	; 100
 bc8:	11 f0       	breq	.+4      	; 0xbce <vfprintf+0x1d2>
 bca:	89 36       	cpi	r24, 0x69	; 105
 bcc:	41 f5       	brne	.+80     	; 0xc1e <vfprintf+0x222>
 bce:	f8 01       	movw	r30, r16
 bd0:	37 fe       	sbrs	r3, 7
 bd2:	07 c0       	rjmp	.+14     	; 0xbe2 <vfprintf+0x1e6>
 bd4:	60 81       	ld	r22, Z
 bd6:	71 81       	ldd	r23, Z+1	; 0x01
 bd8:	82 81       	ldd	r24, Z+2	; 0x02
 bda:	93 81       	ldd	r25, Z+3	; 0x03
 bdc:	0c 5f       	subi	r16, 0xFC	; 252
 bde:	1f 4f       	sbci	r17, 0xFF	; 255
 be0:	08 c0       	rjmp	.+16     	; 0xbf2 <vfprintf+0x1f6>
 be2:	60 81       	ld	r22, Z
 be4:	71 81       	ldd	r23, Z+1	; 0x01
 be6:	07 2e       	mov	r0, r23
 be8:	00 0c       	add	r0, r0
 bea:	88 0b       	sbc	r24, r24
 bec:	99 0b       	sbc	r25, r25
 bee:	0e 5f       	subi	r16, 0xFE	; 254
 bf0:	1f 4f       	sbci	r17, 0xFF	; 255
 bf2:	f3 2d       	mov	r31, r3
 bf4:	ff 76       	andi	r31, 0x6F	; 111
 bf6:	3f 2e       	mov	r3, r31
 bf8:	97 ff       	sbrs	r25, 7
 bfa:	09 c0       	rjmp	.+18     	; 0xc0e <vfprintf+0x212>
 bfc:	90 95       	com	r25
 bfe:	80 95       	com	r24
 c00:	70 95       	com	r23
 c02:	61 95       	neg	r22
 c04:	7f 4f       	sbci	r23, 0xFF	; 255
 c06:	8f 4f       	sbci	r24, 0xFF	; 255
 c08:	9f 4f       	sbci	r25, 0xFF	; 255
 c0a:	f0 68       	ori	r31, 0x80	; 128
 c0c:	3f 2e       	mov	r3, r31
 c0e:	2a e0       	ldi	r18, 0x0A	; 10
 c10:	30 e0       	ldi	r19, 0x00	; 0
 c12:	a3 01       	movw	r20, r6
 c14:	0e 94 31 07 	call	0xe62	; 0xe62 <__ultoa_invert>
 c18:	88 2e       	mov	r8, r24
 c1a:	86 18       	sub	r8, r6
 c1c:	45 c0       	rjmp	.+138    	; 0xca8 <vfprintf+0x2ac>
 c1e:	85 37       	cpi	r24, 0x75	; 117
 c20:	31 f4       	brne	.+12     	; 0xc2e <vfprintf+0x232>
 c22:	23 2d       	mov	r18, r3
 c24:	2f 7e       	andi	r18, 0xEF	; 239
 c26:	b2 2e       	mov	r11, r18
 c28:	2a e0       	ldi	r18, 0x0A	; 10
 c2a:	30 e0       	ldi	r19, 0x00	; 0
 c2c:	25 c0       	rjmp	.+74     	; 0xc78 <vfprintf+0x27c>
 c2e:	93 2d       	mov	r25, r3
 c30:	99 7f       	andi	r25, 0xF9	; 249
 c32:	b9 2e       	mov	r11, r25
 c34:	8f 36       	cpi	r24, 0x6F	; 111
 c36:	c1 f0       	breq	.+48     	; 0xc68 <vfprintf+0x26c>
 c38:	18 f4       	brcc	.+6      	; 0xc40 <vfprintf+0x244>
 c3a:	88 35       	cpi	r24, 0x58	; 88
 c3c:	79 f0       	breq	.+30     	; 0xc5c <vfprintf+0x260>
 c3e:	b5 c0       	rjmp	.+362    	; 0xdaa <vfprintf+0x3ae>
 c40:	80 37       	cpi	r24, 0x70	; 112
 c42:	19 f0       	breq	.+6      	; 0xc4a <vfprintf+0x24e>
 c44:	88 37       	cpi	r24, 0x78	; 120
 c46:	21 f0       	breq	.+8      	; 0xc50 <vfprintf+0x254>
 c48:	b0 c0       	rjmp	.+352    	; 0xdaa <vfprintf+0x3ae>
 c4a:	e9 2f       	mov	r30, r25
 c4c:	e0 61       	ori	r30, 0x10	; 16
 c4e:	be 2e       	mov	r11, r30
 c50:	b4 fe       	sbrs	r11, 4
 c52:	0d c0       	rjmp	.+26     	; 0xc6e <vfprintf+0x272>
 c54:	fb 2d       	mov	r31, r11
 c56:	f4 60       	ori	r31, 0x04	; 4
 c58:	bf 2e       	mov	r11, r31
 c5a:	09 c0       	rjmp	.+18     	; 0xc6e <vfprintf+0x272>
 c5c:	34 fe       	sbrs	r3, 4
 c5e:	0a c0       	rjmp	.+20     	; 0xc74 <vfprintf+0x278>
 c60:	29 2f       	mov	r18, r25
 c62:	26 60       	ori	r18, 0x06	; 6
 c64:	b2 2e       	mov	r11, r18
 c66:	06 c0       	rjmp	.+12     	; 0xc74 <vfprintf+0x278>
 c68:	28 e0       	ldi	r18, 0x08	; 8
 c6a:	30 e0       	ldi	r19, 0x00	; 0
 c6c:	05 c0       	rjmp	.+10     	; 0xc78 <vfprintf+0x27c>
 c6e:	20 e1       	ldi	r18, 0x10	; 16
 c70:	30 e0       	ldi	r19, 0x00	; 0
 c72:	02 c0       	rjmp	.+4      	; 0xc78 <vfprintf+0x27c>
 c74:	20 e1       	ldi	r18, 0x10	; 16
 c76:	32 e0       	ldi	r19, 0x02	; 2
 c78:	f8 01       	movw	r30, r16
 c7a:	b7 fe       	sbrs	r11, 7
 c7c:	07 c0       	rjmp	.+14     	; 0xc8c <vfprintf+0x290>
 c7e:	60 81       	ld	r22, Z
 c80:	71 81       	ldd	r23, Z+1	; 0x01
 c82:	82 81       	ldd	r24, Z+2	; 0x02
 c84:	93 81       	ldd	r25, Z+3	; 0x03
 c86:	0c 5f       	subi	r16, 0xFC	; 252
 c88:	1f 4f       	sbci	r17, 0xFF	; 255
 c8a:	06 c0       	rjmp	.+12     	; 0xc98 <vfprintf+0x29c>
 c8c:	60 81       	ld	r22, Z
 c8e:	71 81       	ldd	r23, Z+1	; 0x01
 c90:	80 e0       	ldi	r24, 0x00	; 0
 c92:	90 e0       	ldi	r25, 0x00	; 0
 c94:	0e 5f       	subi	r16, 0xFE	; 254
 c96:	1f 4f       	sbci	r17, 0xFF	; 255
 c98:	a3 01       	movw	r20, r6
 c9a:	0e 94 31 07 	call	0xe62	; 0xe62 <__ultoa_invert>
 c9e:	88 2e       	mov	r8, r24
 ca0:	86 18       	sub	r8, r6
 ca2:	fb 2d       	mov	r31, r11
 ca4:	ff 77       	andi	r31, 0x7F	; 127
 ca6:	3f 2e       	mov	r3, r31
 ca8:	36 fe       	sbrs	r3, 6
 caa:	0d c0       	rjmp	.+26     	; 0xcc6 <vfprintf+0x2ca>
 cac:	23 2d       	mov	r18, r3
 cae:	2e 7f       	andi	r18, 0xFE	; 254
 cb0:	a2 2e       	mov	r10, r18
 cb2:	89 14       	cp	r8, r9
 cb4:	58 f4       	brcc	.+22     	; 0xccc <vfprintf+0x2d0>
 cb6:	34 fe       	sbrs	r3, 4
 cb8:	0b c0       	rjmp	.+22     	; 0xcd0 <vfprintf+0x2d4>
 cba:	32 fc       	sbrc	r3, 2
 cbc:	09 c0       	rjmp	.+18     	; 0xcd0 <vfprintf+0x2d4>
 cbe:	83 2d       	mov	r24, r3
 cc0:	8e 7e       	andi	r24, 0xEE	; 238
 cc2:	a8 2e       	mov	r10, r24
 cc4:	05 c0       	rjmp	.+10     	; 0xcd0 <vfprintf+0x2d4>
 cc6:	b8 2c       	mov	r11, r8
 cc8:	a3 2c       	mov	r10, r3
 cca:	03 c0       	rjmp	.+6      	; 0xcd2 <vfprintf+0x2d6>
 ccc:	b8 2c       	mov	r11, r8
 cce:	01 c0       	rjmp	.+2      	; 0xcd2 <vfprintf+0x2d6>
 cd0:	b9 2c       	mov	r11, r9
 cd2:	a4 fe       	sbrs	r10, 4
 cd4:	0f c0       	rjmp	.+30     	; 0xcf4 <vfprintf+0x2f8>
 cd6:	fe 01       	movw	r30, r28
 cd8:	e8 0d       	add	r30, r8
 cda:	f1 1d       	adc	r31, r1
 cdc:	80 81       	ld	r24, Z
 cde:	80 33       	cpi	r24, 0x30	; 48
 ce0:	21 f4       	brne	.+8      	; 0xcea <vfprintf+0x2ee>
 ce2:	9a 2d       	mov	r25, r10
 ce4:	99 7e       	andi	r25, 0xE9	; 233
 ce6:	a9 2e       	mov	r10, r25
 ce8:	09 c0       	rjmp	.+18     	; 0xcfc <vfprintf+0x300>
 cea:	a2 fe       	sbrs	r10, 2
 cec:	06 c0       	rjmp	.+12     	; 0xcfa <vfprintf+0x2fe>
 cee:	b3 94       	inc	r11
 cf0:	b3 94       	inc	r11
 cf2:	04 c0       	rjmp	.+8      	; 0xcfc <vfprintf+0x300>
 cf4:	8a 2d       	mov	r24, r10
 cf6:	86 78       	andi	r24, 0x86	; 134
 cf8:	09 f0       	breq	.+2      	; 0xcfc <vfprintf+0x300>
 cfa:	b3 94       	inc	r11
 cfc:	a3 fc       	sbrc	r10, 3
 cfe:	11 c0       	rjmp	.+34     	; 0xd22 <vfprintf+0x326>
 d00:	a0 fe       	sbrs	r10, 0
 d02:	06 c0       	rjmp	.+12     	; 0xd10 <vfprintf+0x314>
 d04:	b2 14       	cp	r11, r2
 d06:	88 f4       	brcc	.+34     	; 0xd2a <vfprintf+0x32e>
 d08:	28 0c       	add	r2, r8
 d0a:	92 2c       	mov	r9, r2
 d0c:	9b 18       	sub	r9, r11
 d0e:	0e c0       	rjmp	.+28     	; 0xd2c <vfprintf+0x330>
 d10:	b2 14       	cp	r11, r2
 d12:	60 f4       	brcc	.+24     	; 0xd2c <vfprintf+0x330>
 d14:	b6 01       	movw	r22, r12
 d16:	80 e2       	ldi	r24, 0x20	; 32
 d18:	90 e0       	ldi	r25, 0x00	; 0
 d1a:	0e 94 f5 06 	call	0xdea	; 0xdea <fputc>
 d1e:	b3 94       	inc	r11
 d20:	f7 cf       	rjmp	.-18     	; 0xd10 <vfprintf+0x314>
 d22:	b2 14       	cp	r11, r2
 d24:	18 f4       	brcc	.+6      	; 0xd2c <vfprintf+0x330>
 d26:	2b 18       	sub	r2, r11
 d28:	02 c0       	rjmp	.+4      	; 0xd2e <vfprintf+0x332>
 d2a:	98 2c       	mov	r9, r8
 d2c:	21 2c       	mov	r2, r1
 d2e:	a4 fe       	sbrs	r10, 4
 d30:	10 c0       	rjmp	.+32     	; 0xd52 <vfprintf+0x356>
 d32:	b6 01       	movw	r22, r12
 d34:	80 e3       	ldi	r24, 0x30	; 48
 d36:	90 e0       	ldi	r25, 0x00	; 0
 d38:	0e 94 f5 06 	call	0xdea	; 0xdea <fputc>
 d3c:	a2 fe       	sbrs	r10, 2
 d3e:	17 c0       	rjmp	.+46     	; 0xd6e <vfprintf+0x372>
 d40:	a1 fc       	sbrc	r10, 1
 d42:	03 c0       	rjmp	.+6      	; 0xd4a <vfprintf+0x34e>
 d44:	88 e7       	ldi	r24, 0x78	; 120
 d46:	90 e0       	ldi	r25, 0x00	; 0
 d48:	02 c0       	rjmp	.+4      	; 0xd4e <vfprintf+0x352>
 d4a:	88 e5       	ldi	r24, 0x58	; 88
 d4c:	90 e0       	ldi	r25, 0x00	; 0
 d4e:	b6 01       	movw	r22, r12
 d50:	0c c0       	rjmp	.+24     	; 0xd6a <vfprintf+0x36e>
 d52:	8a 2d       	mov	r24, r10
 d54:	86 78       	andi	r24, 0x86	; 134
 d56:	59 f0       	breq	.+22     	; 0xd6e <vfprintf+0x372>
 d58:	a1 fe       	sbrs	r10, 1
 d5a:	02 c0       	rjmp	.+4      	; 0xd60 <vfprintf+0x364>
 d5c:	8b e2       	ldi	r24, 0x2B	; 43
 d5e:	01 c0       	rjmp	.+2      	; 0xd62 <vfprintf+0x366>
 d60:	80 e2       	ldi	r24, 0x20	; 32
 d62:	a7 fc       	sbrc	r10, 7
 d64:	8d e2       	ldi	r24, 0x2D	; 45
 d66:	b6 01       	movw	r22, r12
 d68:	90 e0       	ldi	r25, 0x00	; 0
 d6a:	0e 94 f5 06 	call	0xdea	; 0xdea <fputc>
 d6e:	89 14       	cp	r8, r9
 d70:	38 f4       	brcc	.+14     	; 0xd80 <vfprintf+0x384>
 d72:	b6 01       	movw	r22, r12
 d74:	80 e3       	ldi	r24, 0x30	; 48
 d76:	90 e0       	ldi	r25, 0x00	; 0
 d78:	0e 94 f5 06 	call	0xdea	; 0xdea <fputc>
 d7c:	9a 94       	dec	r9
 d7e:	f7 cf       	rjmp	.-18     	; 0xd6e <vfprintf+0x372>
 d80:	8a 94       	dec	r8
 d82:	f3 01       	movw	r30, r6
 d84:	e8 0d       	add	r30, r8
 d86:	f1 1d       	adc	r31, r1
 d88:	80 81       	ld	r24, Z
 d8a:	b6 01       	movw	r22, r12
 d8c:	90 e0       	ldi	r25, 0x00	; 0
 d8e:	0e 94 f5 06 	call	0xdea	; 0xdea <fputc>
 d92:	81 10       	cpse	r8, r1
 d94:	f5 cf       	rjmp	.-22     	; 0xd80 <vfprintf+0x384>
 d96:	22 20       	and	r2, r2
 d98:	09 f4       	brne	.+2      	; 0xd9c <vfprintf+0x3a0>
 d9a:	42 ce       	rjmp	.-892    	; 0xa20 <vfprintf+0x24>
 d9c:	b6 01       	movw	r22, r12
 d9e:	80 e2       	ldi	r24, 0x20	; 32
 da0:	90 e0       	ldi	r25, 0x00	; 0
 da2:	0e 94 f5 06 	call	0xdea	; 0xdea <fputc>
 da6:	2a 94       	dec	r2
 da8:	f6 cf       	rjmp	.-20     	; 0xd96 <vfprintf+0x39a>
 daa:	f6 01       	movw	r30, r12
 dac:	86 81       	ldd	r24, Z+6	; 0x06
 dae:	97 81       	ldd	r25, Z+7	; 0x07
 db0:	02 c0       	rjmp	.+4      	; 0xdb6 <vfprintf+0x3ba>
 db2:	8f ef       	ldi	r24, 0xFF	; 255
 db4:	9f ef       	ldi	r25, 0xFF	; 255
 db6:	2b 96       	adiw	r28, 0x0b	; 11
 db8:	e2 e1       	ldi	r30, 0x12	; 18
 dba:	0c 94 ab 07 	jmp	0xf56	; 0xf56 <__epilogue_restores__>

00000dbe <strnlen_P>:
 dbe:	fc 01       	movw	r30, r24
 dc0:	05 90       	lpm	r0, Z+
 dc2:	61 50       	subi	r22, 0x01	; 1
 dc4:	70 40       	sbci	r23, 0x00	; 0
 dc6:	01 10       	cpse	r0, r1
 dc8:	d8 f7       	brcc	.-10     	; 0xdc0 <strnlen_P+0x2>
 dca:	80 95       	com	r24
 dcc:	90 95       	com	r25
 dce:	8e 0f       	add	r24, r30
 dd0:	9f 1f       	adc	r25, r31
 dd2:	08 95       	ret

00000dd4 <strnlen>:
 dd4:	fc 01       	movw	r30, r24
 dd6:	61 50       	subi	r22, 0x01	; 1
 dd8:	70 40       	sbci	r23, 0x00	; 0
 dda:	01 90       	ld	r0, Z+
 ddc:	01 10       	cpse	r0, r1
 dde:	d8 f7       	brcc	.-10     	; 0xdd6 <strnlen+0x2>
 de0:	80 95       	com	r24
 de2:	90 95       	com	r25
 de4:	8e 0f       	add	r24, r30
 de6:	9f 1f       	adc	r25, r31
 de8:	08 95       	ret

00000dea <fputc>:
 dea:	0f 93       	push	r16
 dec:	1f 93       	push	r17
 dee:	cf 93       	push	r28
 df0:	df 93       	push	r29
 df2:	fb 01       	movw	r30, r22
 df4:	23 81       	ldd	r18, Z+3	; 0x03
 df6:	21 fd       	sbrc	r18, 1
 df8:	03 c0       	rjmp	.+6      	; 0xe00 <fputc+0x16>
 dfa:	8f ef       	ldi	r24, 0xFF	; 255
 dfc:	9f ef       	ldi	r25, 0xFF	; 255
 dfe:	2c c0       	rjmp	.+88     	; 0xe58 <fputc+0x6e>
 e00:	22 ff       	sbrs	r18, 2
 e02:	16 c0       	rjmp	.+44     	; 0xe30 <fputc+0x46>
 e04:	46 81       	ldd	r20, Z+6	; 0x06
 e06:	57 81       	ldd	r21, Z+7	; 0x07
 e08:	24 81       	ldd	r18, Z+4	; 0x04
 e0a:	35 81       	ldd	r19, Z+5	; 0x05
 e0c:	42 17       	cp	r20, r18
 e0e:	53 07       	cpc	r21, r19
 e10:	44 f4       	brge	.+16     	; 0xe22 <fputc+0x38>
 e12:	a0 81       	ld	r26, Z
 e14:	b1 81       	ldd	r27, Z+1	; 0x01
 e16:	9d 01       	movw	r18, r26
 e18:	2f 5f       	subi	r18, 0xFF	; 255
 e1a:	3f 4f       	sbci	r19, 0xFF	; 255
 e1c:	31 83       	std	Z+1, r19	; 0x01
 e1e:	20 83       	st	Z, r18
 e20:	8c 93       	st	X, r24
 e22:	26 81       	ldd	r18, Z+6	; 0x06
 e24:	37 81       	ldd	r19, Z+7	; 0x07
 e26:	2f 5f       	subi	r18, 0xFF	; 255
 e28:	3f 4f       	sbci	r19, 0xFF	; 255
 e2a:	37 83       	std	Z+7, r19	; 0x07
 e2c:	26 83       	std	Z+6, r18	; 0x06
 e2e:	14 c0       	rjmp	.+40     	; 0xe58 <fputc+0x6e>
 e30:	8b 01       	movw	r16, r22
 e32:	ec 01       	movw	r28, r24
 e34:	fb 01       	movw	r30, r22
 e36:	00 84       	ldd	r0, Z+8	; 0x08
 e38:	f1 85       	ldd	r31, Z+9	; 0x09
 e3a:	e0 2d       	mov	r30, r0
 e3c:	09 95       	icall
 e3e:	89 2b       	or	r24, r25
 e40:	e1 f6       	brne	.-72     	; 0xdfa <fputc+0x10>
 e42:	d8 01       	movw	r26, r16
 e44:	16 96       	adiw	r26, 0x06	; 6
 e46:	8d 91       	ld	r24, X+
 e48:	9c 91       	ld	r25, X
 e4a:	17 97       	sbiw	r26, 0x07	; 7
 e4c:	01 96       	adiw	r24, 0x01	; 1
 e4e:	17 96       	adiw	r26, 0x07	; 7
 e50:	9c 93       	st	X, r25
 e52:	8e 93       	st	-X, r24
 e54:	16 97       	sbiw	r26, 0x06	; 6
 e56:	ce 01       	movw	r24, r28
 e58:	df 91       	pop	r29
 e5a:	cf 91       	pop	r28
 e5c:	1f 91       	pop	r17
 e5e:	0f 91       	pop	r16
 e60:	08 95       	ret

00000e62 <__ultoa_invert>:
 e62:	fa 01       	movw	r30, r20
 e64:	aa 27       	eor	r26, r26
 e66:	28 30       	cpi	r18, 0x08	; 8
 e68:	51 f1       	breq	.+84     	; 0xebe <__ultoa_invert+0x5c>
 e6a:	20 31       	cpi	r18, 0x10	; 16
 e6c:	81 f1       	breq	.+96     	; 0xece <__ultoa_invert+0x6c>
 e6e:	e8 94       	clt
 e70:	6f 93       	push	r22
 e72:	6e 7f       	andi	r22, 0xFE	; 254
 e74:	6e 5f       	subi	r22, 0xFE	; 254
 e76:	7f 4f       	sbci	r23, 0xFF	; 255
 e78:	8f 4f       	sbci	r24, 0xFF	; 255
 e7a:	9f 4f       	sbci	r25, 0xFF	; 255
 e7c:	af 4f       	sbci	r26, 0xFF	; 255
 e7e:	b1 e0       	ldi	r27, 0x01	; 1
 e80:	3e d0       	rcall	.+124    	; 0xefe <__ultoa_invert+0x9c>
 e82:	b4 e0       	ldi	r27, 0x04	; 4
 e84:	3c d0       	rcall	.+120    	; 0xefe <__ultoa_invert+0x9c>
 e86:	67 0f       	add	r22, r23
 e88:	78 1f       	adc	r23, r24
 e8a:	89 1f       	adc	r24, r25
 e8c:	9a 1f       	adc	r25, r26
 e8e:	a1 1d       	adc	r26, r1
 e90:	68 0f       	add	r22, r24
 e92:	79 1f       	adc	r23, r25
 e94:	8a 1f       	adc	r24, r26
 e96:	91 1d       	adc	r25, r1
 e98:	a1 1d       	adc	r26, r1
 e9a:	6a 0f       	add	r22, r26
 e9c:	71 1d       	adc	r23, r1
 e9e:	81 1d       	adc	r24, r1
 ea0:	91 1d       	adc	r25, r1
 ea2:	a1 1d       	adc	r26, r1
 ea4:	20 d0       	rcall	.+64     	; 0xee6 <__ultoa_invert+0x84>
 ea6:	09 f4       	brne	.+2      	; 0xeaa <__ultoa_invert+0x48>
 ea8:	68 94       	set
 eaa:	3f 91       	pop	r19
 eac:	2a e0       	ldi	r18, 0x0A	; 10
 eae:	26 9f       	mul	r18, r22
 eb0:	11 24       	eor	r1, r1
 eb2:	30 19       	sub	r19, r0
 eb4:	30 5d       	subi	r19, 0xD0	; 208
 eb6:	31 93       	st	Z+, r19
 eb8:	de f6       	brtc	.-74     	; 0xe70 <__ultoa_invert+0xe>
 eba:	cf 01       	movw	r24, r30
 ebc:	08 95       	ret
 ebe:	46 2f       	mov	r20, r22
 ec0:	47 70       	andi	r20, 0x07	; 7
 ec2:	40 5d       	subi	r20, 0xD0	; 208
 ec4:	41 93       	st	Z+, r20
 ec6:	b3 e0       	ldi	r27, 0x03	; 3
 ec8:	0f d0       	rcall	.+30     	; 0xee8 <__ultoa_invert+0x86>
 eca:	c9 f7       	brne	.-14     	; 0xebe <__ultoa_invert+0x5c>
 ecc:	f6 cf       	rjmp	.-20     	; 0xeba <__ultoa_invert+0x58>
 ece:	46 2f       	mov	r20, r22
 ed0:	4f 70       	andi	r20, 0x0F	; 15
 ed2:	40 5d       	subi	r20, 0xD0	; 208
 ed4:	4a 33       	cpi	r20, 0x3A	; 58
 ed6:	18 f0       	brcs	.+6      	; 0xede <__ultoa_invert+0x7c>
 ed8:	49 5d       	subi	r20, 0xD9	; 217
 eda:	31 fd       	sbrc	r19, 1
 edc:	40 52       	subi	r20, 0x20	; 32
 ede:	41 93       	st	Z+, r20
 ee0:	02 d0       	rcall	.+4      	; 0xee6 <__ultoa_invert+0x84>
 ee2:	a9 f7       	brne	.-22     	; 0xece <__ultoa_invert+0x6c>
 ee4:	ea cf       	rjmp	.-44     	; 0xeba <__ultoa_invert+0x58>
 ee6:	b4 e0       	ldi	r27, 0x04	; 4
 ee8:	a6 95       	lsr	r26
 eea:	97 95       	ror	r25
 eec:	87 95       	ror	r24
 eee:	77 95       	ror	r23
 ef0:	67 95       	ror	r22
 ef2:	ba 95       	dec	r27
 ef4:	c9 f7       	brne	.-14     	; 0xee8 <__ultoa_invert+0x86>
 ef6:	00 97       	sbiw	r24, 0x00	; 0
 ef8:	61 05       	cpc	r22, r1
 efa:	71 05       	cpc	r23, r1
 efc:	08 95       	ret
 efe:	9b 01       	movw	r18, r22
 f00:	ac 01       	movw	r20, r24
 f02:	0a 2e       	mov	r0, r26
 f04:	06 94       	lsr	r0
 f06:	57 95       	ror	r21
 f08:	47 95       	ror	r20
 f0a:	37 95       	ror	r19
 f0c:	27 95       	ror	r18
 f0e:	ba 95       	dec	r27
 f10:	c9 f7       	brne	.-14     	; 0xf04 <__ultoa_invert+0xa2>
 f12:	62 0f       	add	r22, r18
 f14:	73 1f       	adc	r23, r19
 f16:	84 1f       	adc	r24, r20
 f18:	95 1f       	adc	r25, r21
 f1a:	a0 1d       	adc	r26, r0
 f1c:	08 95       	ret

00000f1e <__prologue_saves__>:
 f1e:	2f 92       	push	r2
 f20:	3f 92       	push	r3
 f22:	4f 92       	push	r4
 f24:	5f 92       	push	r5
 f26:	6f 92       	push	r6
 f28:	7f 92       	push	r7
 f2a:	8f 92       	push	r8
 f2c:	9f 92       	push	r9
 f2e:	af 92       	push	r10
 f30:	bf 92       	push	r11
 f32:	cf 92       	push	r12
 f34:	df 92       	push	r13
 f36:	ef 92       	push	r14
 f38:	ff 92       	push	r15
 f3a:	0f 93       	push	r16
 f3c:	1f 93       	push	r17
 f3e:	cf 93       	push	r28
 f40:	df 93       	push	r29
 f42:	cd b7       	in	r28, 0x3d	; 61
 f44:	de b7       	in	r29, 0x3e	; 62
 f46:	ca 1b       	sub	r28, r26
 f48:	db 0b       	sbc	r29, r27
 f4a:	0f b6       	in	r0, 0x3f	; 63
 f4c:	f8 94       	cli
 f4e:	de bf       	out	0x3e, r29	; 62
 f50:	0f be       	out	0x3f, r0	; 63
 f52:	cd bf       	out	0x3d, r28	; 61
 f54:	09 94       	ijmp

00000f56 <__epilogue_restores__>:
 f56:	2a 88       	ldd	r2, Y+18	; 0x12
 f58:	39 88       	ldd	r3, Y+17	; 0x11
 f5a:	48 88       	ldd	r4, Y+16	; 0x10
 f5c:	5f 84       	ldd	r5, Y+15	; 0x0f
 f5e:	6e 84       	ldd	r6, Y+14	; 0x0e
 f60:	7d 84       	ldd	r7, Y+13	; 0x0d
 f62:	8c 84       	ldd	r8, Y+12	; 0x0c
 f64:	9b 84       	ldd	r9, Y+11	; 0x0b
 f66:	aa 84       	ldd	r10, Y+10	; 0x0a
 f68:	b9 84       	ldd	r11, Y+9	; 0x09
 f6a:	c8 84       	ldd	r12, Y+8	; 0x08
 f6c:	df 80       	ldd	r13, Y+7	; 0x07
 f6e:	ee 80       	ldd	r14, Y+6	; 0x06
 f70:	fd 80       	ldd	r15, Y+5	; 0x05
 f72:	0c 81       	ldd	r16, Y+4	; 0x04
 f74:	1b 81       	ldd	r17, Y+3	; 0x03
 f76:	aa 81       	ldd	r26, Y+2	; 0x02
 f78:	b9 81       	ldd	r27, Y+1	; 0x01
 f7a:	ce 0f       	add	r28, r30
 f7c:	d1 1d       	adc	r29, r1
 f7e:	0f b6       	in	r0, 0x3f	; 63
 f80:	f8 94       	cli
 f82:	de bf       	out	0x3e, r29	; 62
 f84:	0f be       	out	0x3f, r0	; 63
 f86:	cd bf       	out	0x3d, r28	; 61
 f88:	ed 01       	movw	r28, r26
 f8a:	08 95       	ret

00000f8c <_exit>:
 f8c:	f8 94       	cli

00000f8e <__stop_program>:
 f8e:	ff cf       	rjmp	.-2      	; 0xf8e <__stop_program>
