
Senior Design Sensors.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000042e  00800100  00003e78  00003f0c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003e78  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000007a  0080052e  0080052e  0000433a  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000433a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00004398  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000400  00000000  00000000  000043d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000036ac  00000000  00000000  000047d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000011b8  00000000  00000000  00007e84  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002c1b  00000000  00000000  0000903c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000f58  00000000  00000000  0000bc58  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001674  00000000  00000000  0000cbb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000020fa  00000000  00000000  0000e224  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000003c8  00000000  00000000  0001031e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 db 00 	jmp	0x1b6	; 0x1b6 <__ctors_end>
       4:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
       8:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
       c:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
      10:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
      14:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
      18:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
      1c:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
      20:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
      24:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
      28:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
      2c:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
      30:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
      34:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
      38:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
      3c:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
      40:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
      44:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
      48:	0c 94 d2 08 	jmp	0x11a4	; 0x11a4 <__vector_18>
      4c:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
      50:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
      54:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
      58:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
      5c:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
      60:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
      64:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
      68:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
      6c:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
      70:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
      74:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
      78:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
      7c:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
      80:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
      84:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
      88:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
      8c:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
      90:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
      94:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
      98:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
      9c:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
      a0:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
      a4:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
      a8:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
      ac:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
      b0:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>

000000b4 <__trampolines_end>:
      b4:	6e 61       	ori	r22, 0x1E	; 30
      b6:	6e 00       	.word	0x006e	; ????

000000b8 <__c.2332>:
      b8:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
      c8:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
      d8:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
      e8:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
      f8:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     108:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     118:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     128:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     138:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     148:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     158:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     168:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     178:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     188:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     198:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     1a8:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

000001b6 <__ctors_end>:
     1b6:	11 24       	eor	r1, r1
     1b8:	1f be       	out	0x3f, r1	; 63
     1ba:	cf ef       	ldi	r28, 0xFF	; 255
     1bc:	d8 e0       	ldi	r29, 0x08	; 8
     1be:	de bf       	out	0x3e, r29	; 62
     1c0:	cd bf       	out	0x3d, r28	; 61

000001c2 <__do_copy_data>:
     1c2:	15 e0       	ldi	r17, 0x05	; 5
     1c4:	a0 e0       	ldi	r26, 0x00	; 0
     1c6:	b1 e0       	ldi	r27, 0x01	; 1
     1c8:	e8 e7       	ldi	r30, 0x78	; 120
     1ca:	fe e3       	ldi	r31, 0x3E	; 62
     1cc:	02 c0       	rjmp	.+4      	; 0x1d2 <__do_copy_data+0x10>
     1ce:	05 90       	lpm	r0, Z+
     1d0:	0d 92       	st	X+, r0
     1d2:	ae 32       	cpi	r26, 0x2E	; 46
     1d4:	b1 07       	cpc	r27, r17
     1d6:	d9 f7       	brne	.-10     	; 0x1ce <__do_copy_data+0xc>

000001d8 <__do_clear_bss>:
     1d8:	25 e0       	ldi	r18, 0x05	; 5
     1da:	ae e2       	ldi	r26, 0x2E	; 46
     1dc:	b5 e0       	ldi	r27, 0x05	; 5
     1de:	01 c0       	rjmp	.+2      	; 0x1e2 <.do_clear_bss_start>

000001e0 <.do_clear_bss_loop>:
     1e0:	1d 92       	st	X+, r1

000001e2 <.do_clear_bss_start>:
     1e2:	a8 3a       	cpi	r26, 0xA8	; 168
     1e4:	b2 07       	cpc	r27, r18
     1e6:	e1 f7       	brne	.-8      	; 0x1e0 <.do_clear_bss_loop>
     1e8:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <main>
     1ec:	0c 94 3a 1f 	jmp	0x3e74	; 0x3e74 <_exit>

000001f0 <__bad_interrupt>:
     1f0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001f4 <main>:
	uint64_t serial_as_int = 0;
	sensirion_common_to_integer((uint8_t *)serial_raw, (uint8_t *)&serial_as_int,
								LONG_INTEGER, 6);
	// printf("0x%" PRIx64 "\n", serial_as_int);
	printf("0x%llx\n", serial_as_int);
}
     1f4:	cf 93       	push	r28
     1f6:	df 93       	push	r29
     1f8:	cd b7       	in	r28, 0x3d	; 61
     1fa:	de b7       	in	r29, 0x3e	; 62
     1fc:	c9 54       	subi	r28, 0x49	; 73
     1fe:	d3 40       	sbci	r29, 0x03	; 3
     200:	0f b6       	in	r0, 0x3f	; 63
     202:	f8 94       	cli
     204:	de bf       	out	0x3e, r29	; 62
     206:	0f be       	out	0x3f, r0	; 63
     208:	cd bf       	out	0x3d, r28	; 61
     20a:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <uart0_init>
     20e:	0e 94 68 06 	call	0xcd0	; 0xcd0 <init_printf>
     212:	0e 94 76 06 	call	0xcec	; 0xcec <uart1_init>
     216:	78 94       	sei
     218:	0e 94 6b 0e 	call	0x1cd6	; 0x1cd6 <sensirion_i2c_init>
     21c:	0e 94 1a 07 	call	0xe34	; 0xe34 <sps30_init>
     220:	1e 82       	std	Y+6, r1	; 0x06
     222:	1d 82       	std	Y+5, r1	; 0x05
     224:	82 e6       	ldi	r24, 0x62	; 98
     226:	0e 94 6f 14 	call	0x28de	; 0x28de <scd4x_init>
     22a:	8e e0       	ldi	r24, 0x0E	; 14
     22c:	91 e0       	ldi	r25, 0x01	; 1
     22e:	0e 94 8a 1e 	call	0x3d14	; 0x3d14 <puts>
     232:	80 e0       	ldi	r24, 0x00	; 0
     234:	90 e8       	ldi	r25, 0x80	; 128
     236:	ab e3       	ldi	r26, 0x3B	; 59
     238:	b5 e4       	ldi	r27, 0x45	; 69
     23a:	8d 8f       	std	Y+29, r24	; 0x1d
     23c:	9e 8f       	std	Y+30, r25	; 0x1e
     23e:	af 8f       	std	Y+31, r26	; 0x1f
     240:	b8 a3       	std	Y+32, r27	; 0x20
     242:	20 e0       	ldi	r18, 0x00	; 0
     244:	30 e0       	ldi	r19, 0x00	; 0
     246:	4a e7       	ldi	r20, 0x7A	; 122
     248:	55 e4       	ldi	r21, 0x45	; 69
     24a:	6d 8d       	ldd	r22, Y+29	; 0x1d
     24c:	7e 8d       	ldd	r23, Y+30	; 0x1e
     24e:	8f 8d       	ldd	r24, Y+31	; 0x1f
     250:	98 a1       	ldd	r25, Y+32	; 0x20
     252:	0e 94 01 19 	call	0x3202	; 0x3202 <__mulsf3>
     256:	dc 01       	movw	r26, r24
     258:	cb 01       	movw	r24, r22
     25a:	89 a3       	std	Y+33, r24	; 0x21
     25c:	9a a3       	std	Y+34, r25	; 0x22
     25e:	ab a3       	std	Y+35, r26	; 0x23
     260:	bc a3       	std	Y+36, r27	; 0x24
     262:	20 e0       	ldi	r18, 0x00	; 0
     264:	30 e0       	ldi	r19, 0x00	; 0
     266:	40 e8       	ldi	r20, 0x80	; 128
     268:	5f e3       	ldi	r21, 0x3F	; 63
     26a:	69 a1       	ldd	r22, Y+33	; 0x21
     26c:	7a a1       	ldd	r23, Y+34	; 0x22
     26e:	8b a1       	ldd	r24, Y+35	; 0x23
     270:	9c a1       	ldd	r25, Y+36	; 0x24
     272:	0e 94 9d 17 	call	0x2f3a	; 0x2f3a <__cmpsf2>
     276:	88 23       	and	r24, r24
     278:	2c f4       	brge	.+10     	; 0x284 <main+0x90>
     27a:	81 e0       	ldi	r24, 0x01	; 1
     27c:	90 e0       	ldi	r25, 0x00	; 0
     27e:	9e a3       	std	Y+38, r25	; 0x26
     280:	8d a3       	std	Y+37, r24	; 0x25
     282:	3f c0       	rjmp	.+126    	; 0x302 <main+0x10e>
     284:	20 e0       	ldi	r18, 0x00	; 0
     286:	3f ef       	ldi	r19, 0xFF	; 255
     288:	4f e7       	ldi	r20, 0x7F	; 127
     28a:	57 e4       	ldi	r21, 0x47	; 71
     28c:	69 a1       	ldd	r22, Y+33	; 0x21
     28e:	7a a1       	ldd	r23, Y+34	; 0x22
     290:	8b a1       	ldd	r24, Y+35	; 0x23
     292:	9c a1       	ldd	r25, Y+36	; 0x24
     294:	0e 94 fc 18 	call	0x31f8	; 0x31f8 <__gesf2>
     298:	18 16       	cp	r1, r24
     29a:	4c f5       	brge	.+82     	; 0x2ee <main+0xfa>
     29c:	20 e0       	ldi	r18, 0x00	; 0
     29e:	30 e0       	ldi	r19, 0x00	; 0
     2a0:	40 e2       	ldi	r20, 0x20	; 32
     2a2:	51 e4       	ldi	r21, 0x41	; 65
     2a4:	6d 8d       	ldd	r22, Y+29	; 0x1d
     2a6:	7e 8d       	ldd	r23, Y+30	; 0x1e
     2a8:	8f 8d       	ldd	r24, Y+31	; 0x1f
     2aa:	98 a1       	ldd	r25, Y+32	; 0x20
     2ac:	0e 94 01 19 	call	0x3202	; 0x3202 <__mulsf3>
     2b0:	dc 01       	movw	r26, r24
     2b2:	cb 01       	movw	r24, r22
     2b4:	bc 01       	movw	r22, r24
     2b6:	cd 01       	movw	r24, r26
     2b8:	0e 94 1b 18 	call	0x3036	; 0x3036 <__fixunssfsi>
     2bc:	dc 01       	movw	r26, r24
     2be:	cb 01       	movw	r24, r22
     2c0:	9e a3       	std	Y+38, r25	; 0x26
     2c2:	8d a3       	std	Y+37, r24	; 0x25
     2c4:	0f c0       	rjmp	.+30     	; 0x2e4 <main+0xf0>
     2c6:	80 e9       	ldi	r24, 0x90	; 144
     2c8:	91 e0       	ldi	r25, 0x01	; 1
     2ca:	98 a7       	std	Y+40, r25	; 0x28
     2cc:	8f a3       	std	Y+39, r24	; 0x27
     2ce:	8f a1       	ldd	r24, Y+39	; 0x27
     2d0:	98 a5       	ldd	r25, Y+40	; 0x28
     2d2:	01 97       	sbiw	r24, 0x01	; 1
     2d4:	f1 f7       	brne	.-4      	; 0x2d2 <main+0xde>
     2d6:	98 a7       	std	Y+40, r25	; 0x28
     2d8:	8f a3       	std	Y+39, r24	; 0x27
     2da:	8d a1       	ldd	r24, Y+37	; 0x25
     2dc:	9e a1       	ldd	r25, Y+38	; 0x26
     2de:	01 97       	sbiw	r24, 0x01	; 1
     2e0:	9e a3       	std	Y+38, r25	; 0x26
     2e2:	8d a3       	std	Y+37, r24	; 0x25
     2e4:	8d a1       	ldd	r24, Y+37	; 0x25
     2e6:	9e a1       	ldd	r25, Y+38	; 0x26
     2e8:	89 2b       	or	r24, r25
     2ea:	69 f7       	brne	.-38     	; 0x2c6 <main+0xd2>
     2ec:	14 c0       	rjmp	.+40     	; 0x316 <main+0x122>
     2ee:	69 a1       	ldd	r22, Y+33	; 0x21
     2f0:	7a a1       	ldd	r23, Y+34	; 0x22
     2f2:	8b a1       	ldd	r24, Y+35	; 0x23
     2f4:	9c a1       	ldd	r25, Y+36	; 0x24
     2f6:	0e 94 1b 18 	call	0x3036	; 0x3036 <__fixunssfsi>
     2fa:	dc 01       	movw	r26, r24
     2fc:	cb 01       	movw	r24, r22
     2fe:	9e a3       	std	Y+38, r25	; 0x26
     300:	8d a3       	std	Y+37, r24	; 0x25
     302:	8d a1       	ldd	r24, Y+37	; 0x25
     304:	9e a1       	ldd	r25, Y+38	; 0x26
     306:	9a a7       	std	Y+42, r25	; 0x2a
     308:	89 a7       	std	Y+41, r24	; 0x29
     30a:	89 a5       	ldd	r24, Y+41	; 0x29
     30c:	9a a5       	ldd	r25, Y+42	; 0x2a
     30e:	01 97       	sbiw	r24, 0x01	; 1
     310:	f1 f7       	brne	.-4      	; 0x30e <main+0x11a>
     312:	9a a7       	std	Y+42, r25	; 0x2a
     314:	89 a7       	std	Y+41, r24	; 0x29
     316:	1a 82       	std	Y+2, r1	; 0x02
     318:	19 82       	std	Y+1, r1	; 0x01
     31a:	1c 82       	std	Y+4, r1	; 0x04
     31c:	1b 82       	std	Y+3, r1	; 0x03
     31e:	3b c4       	rjmp	.+2166   	; 0xb96 <__stack+0x297>
     320:	8b 81       	ldd	r24, Y+3	; 0x03
     322:	9c 81       	ldd	r25, Y+4	; 0x04
     324:	86 5c       	subi	r24, 0xC6	; 198
     326:	9a 4f       	sbci	r25, 0xFA	; 250
     328:	fc 01       	movw	r30, r24
     32a:	80 81       	ld	r24, Z
     32c:	80 34       	cpi	r24, 0x40	; 64
     32e:	09 f0       	breq	.+2      	; 0x332 <main+0x13e>
     330:	1e c4       	rjmp	.+2108   	; 0xb6e <__stack+0x26f>
     332:	88 e2       	ldi	r24, 0x28	; 40
     334:	91 e0       	ldi	r25, 0x01	; 1
     336:	0e 94 8a 1e 	call	0x3d14	; 0x3d14 <puts>
     33a:	0e 94 ad 07 	call	0xf5a	; 0xf5a <ADC_init>
     33e:	0e 94 e6 07 	call	0xfcc	; 0xfcc <ADC_Read>
     342:	9c 87       	std	Y+12, r25	; 0x0c
     344:	8b 87       	std	Y+11, r24	; 0x0b
     346:	8c 85       	ldd	r24, Y+12	; 0x0c
     348:	8f 93       	push	r24
     34a:	8b 85       	ldd	r24, Y+11	; 0x0b
     34c:	8f 93       	push	r24
     34e:	89 e3       	ldi	r24, 0x39	; 57
     350:	91 e0       	ldi	r25, 0x01	; 1
     352:	89 2f       	mov	r24, r25
     354:	8f 93       	push	r24
     356:	89 e3       	ldi	r24, 0x39	; 57
     358:	91 e0       	ldi	r25, 0x01	; 1
     35a:	8f 93       	push	r24
     35c:	0e 94 6d 1e 	call	0x3cda	; 0x3cda <printf>
     360:	0f 90       	pop	r0
     362:	0f 90       	pop	r0
     364:	0f 90       	pop	r0
     366:	0f 90       	pop	r0
     368:	8b 85       	ldd	r24, Y+11	; 0x0b
     36a:	9c 85       	ldd	r25, Y+12	; 0x0c
     36c:	cc 01       	movw	r24, r24
     36e:	a0 e0       	ldi	r26, 0x00	; 0
     370:	b0 e0       	ldi	r27, 0x00	; 0
     372:	bc 01       	movw	r22, r24
     374:	cd 01       	movw	r24, r26
     376:	0e 94 4a 18 	call	0x3094	; 0x3094 <__floatunsisf>
     37a:	dc 01       	movw	r26, r24
     37c:	cb 01       	movw	r24, r22
     37e:	20 e0       	ldi	r18, 0x00	; 0
     380:	30 ec       	ldi	r19, 0xC0	; 192
     382:	4f e7       	ldi	r20, 0x7F	; 127
     384:	54 e4       	ldi	r21, 0x44	; 68
     386:	bc 01       	movw	r22, r24
     388:	cd 01       	movw	r24, r26
     38a:	0e 94 a2 17 	call	0x2f44	; 0x2f44 <__divsf3>
     38e:	dc 01       	movw	r26, r24
     390:	cb 01       	movw	r24, r22
     392:	20 e0       	ldi	r18, 0x00	; 0
     394:	30 e0       	ldi	r19, 0x00	; 0
     396:	40 ea       	ldi	r20, 0xA0	; 160
     398:	50 e4       	ldi	r21, 0x40	; 64
     39a:	bc 01       	movw	r22, r24
     39c:	cd 01       	movw	r24, r26
     39e:	0e 94 01 19 	call	0x3202	; 0x3202 <__mulsf3>
     3a2:	dc 01       	movw	r26, r24
     3a4:	cb 01       	movw	r24, r22
     3a6:	8d 87       	std	Y+13, r24	; 0x0d
     3a8:	9e 87       	std	Y+14, r25	; 0x0e
     3aa:	af 87       	std	Y+15, r26	; 0x0f
     3ac:	b8 8b       	std	Y+16, r27	; 0x10
     3ae:	8b 85       	ldd	r24, Y+11	; 0x0b
     3b0:	9c 85       	ldd	r25, Y+12	; 0x0c
     3b2:	0e 94 23 08 	call	0x1046	; 0x1046 <convert_ADC_to_pressure>
     3b6:	dc 01       	movw	r26, r24
     3b8:	cb 01       	movw	r24, r22
     3ba:	89 8b       	std	Y+17, r24	; 0x11
     3bc:	9a 8b       	std	Y+18, r25	; 0x12
     3be:	ab 8b       	std	Y+19, r26	; 0x13
     3c0:	bc 8b       	std	Y+20, r27	; 0x14
     3c2:	88 89       	ldd	r24, Y+16	; 0x10
     3c4:	8f 93       	push	r24
     3c6:	8f 85       	ldd	r24, Y+15	; 0x0f
     3c8:	8f 93       	push	r24
     3ca:	8e 85       	ldd	r24, Y+14	; 0x0e
     3cc:	8f 93       	push	r24
     3ce:	8d 85       	ldd	r24, Y+13	; 0x0d
     3d0:	8f 93       	push	r24
     3d2:	82 e4       	ldi	r24, 0x42	; 66
     3d4:	91 e0       	ldi	r25, 0x01	; 1
     3d6:	89 2f       	mov	r24, r25
     3d8:	8f 93       	push	r24
     3da:	82 e4       	ldi	r24, 0x42	; 66
     3dc:	91 e0       	ldi	r25, 0x01	; 1
     3de:	8f 93       	push	r24
     3e0:	0e 94 6d 1e 	call	0x3cda	; 0x3cda <printf>
     3e4:	0f 90       	pop	r0
     3e6:	0f 90       	pop	r0
     3e8:	0f 90       	pop	r0
     3ea:	0f 90       	pop	r0
     3ec:	0f 90       	pop	r0
     3ee:	0f 90       	pop	r0
     3f0:	8c 89       	ldd	r24, Y+20	; 0x14
     3f2:	8f 93       	push	r24
     3f4:	8b 89       	ldd	r24, Y+19	; 0x13
     3f6:	8f 93       	push	r24
     3f8:	8a 89       	ldd	r24, Y+18	; 0x12
     3fa:	8f 93       	push	r24
     3fc:	89 89       	ldd	r24, Y+17	; 0x11
     3fe:	8f 93       	push	r24
     400:	81 e5       	ldi	r24, 0x51	; 81
     402:	91 e0       	ldi	r25, 0x01	; 1
     404:	89 2f       	mov	r24, r25
     406:	8f 93       	push	r24
     408:	81 e5       	ldi	r24, 0x51	; 81
     40a:	91 e0       	ldi	r25, 0x01	; 1
     40c:	8f 93       	push	r24
     40e:	ce 01       	movw	r24, r28
     410:	86 5b       	subi	r24, 0xB6	; 182
     412:	9d 4f       	sbci	r25, 0xFD	; 253
     414:	29 2f       	mov	r18, r25
     416:	2f 93       	push	r18
     418:	8f 93       	push	r24
     41a:	0e 94 ba 1e 	call	0x3d74	; 0x3d74 <sprintf>
     41e:	8d b7       	in	r24, 0x3d	; 61
     420:	9e b7       	in	r25, 0x3e	; 62
     422:	08 96       	adiw	r24, 0x08	; 8
     424:	0f b6       	in	r0, 0x3f	; 63
     426:	f8 94       	cli
     428:	de bf       	out	0x3e, r29	; 62
     42a:	0f be       	out	0x3f, r0	; 63
     42c:	cd bf       	out	0x3d, r28	; 61
     42e:	ce 01       	movw	r24, r28
     430:	86 5b       	subi	r24, 0xB6	; 182
     432:	9d 4f       	sbci	r25, 0xFD	; 253
     434:	0e 94 99 06 	call	0xd32	; 0xd32 <HM10_transmit>
     438:	0e 94 fa 16 	call	0x2df4	; 0x2df4 <scd4x_wake_up>
     43c:	9e 83       	std	Y+6, r25	; 0x06
     43e:	8d 83       	std	Y+5, r24	; 0x05
     440:	8d 81       	ldd	r24, Y+5	; 0x05
     442:	9e 81       	ldd	r25, Y+6	; 0x06
     444:	89 2b       	or	r24, r25
     446:	89 f0       	breq	.+34     	; 0x46a <__LOCK_REGION_LENGTH__+0x6a>
     448:	8e 81       	ldd	r24, Y+6	; 0x06
     44a:	8f 93       	push	r24
     44c:	8d 81       	ldd	r24, Y+5	; 0x05
     44e:	8f 93       	push	r24
     450:	8b e5       	ldi	r24, 0x5B	; 91
     452:	91 e0       	ldi	r25, 0x01	; 1
     454:	89 2f       	mov	r24, r25
     456:	8f 93       	push	r24
     458:	8b e5       	ldi	r24, 0x5B	; 91
     45a:	91 e0       	ldi	r25, 0x01	; 1
     45c:	8f 93       	push	r24
     45e:	0e 94 6d 1e 	call	0x3cda	; 0x3cda <printf>
     462:	0f 90       	pop	r0
     464:	0f 90       	pop	r0
     466:	0f 90       	pop	r0
     468:	0f 90       	pop	r0
     46a:	0e 94 cc 15 	call	0x2b98	; 0x2b98 <scd4x_stop_periodic_measurement>
     46e:	9e 83       	std	Y+6, r25	; 0x06
     470:	8d 83       	std	Y+5, r24	; 0x05
     472:	8d 81       	ldd	r24, Y+5	; 0x05
     474:	9e 81       	ldd	r25, Y+6	; 0x06
     476:	89 2b       	or	r24, r25
     478:	89 f0       	breq	.+34     	; 0x49c <__LOCK_REGION_LENGTH__+0x9c>
     47a:	8e 81       	ldd	r24, Y+6	; 0x06
     47c:	8f 93       	push	r24
     47e:	8d 81       	ldd	r24, Y+5	; 0x05
     480:	8f 93       	push	r24
     482:	8a e7       	ldi	r24, 0x7A	; 122
     484:	91 e0       	ldi	r25, 0x01	; 1
     486:	89 2f       	mov	r24, r25
     488:	8f 93       	push	r24
     48a:	8a e7       	ldi	r24, 0x7A	; 122
     48c:	91 e0       	ldi	r25, 0x01	; 1
     48e:	8f 93       	push	r24
     490:	0e 94 6d 1e 	call	0x3cda	; 0x3cda <printf>
     494:	0f 90       	pop	r0
     496:	0f 90       	pop	r0
     498:	0f 90       	pop	r0
     49a:	0f 90       	pop	r0
     49c:	0e 94 bb 16 	call	0x2d76	; 0x2d76 <scd4x_reinit>
     4a0:	9e 83       	std	Y+6, r25	; 0x06
     4a2:	8d 83       	std	Y+5, r24	; 0x05
     4a4:	8d 81       	ldd	r24, Y+5	; 0x05
     4a6:	9e 81       	ldd	r25, Y+6	; 0x06
     4a8:	89 2b       	or	r24, r25
     4aa:	89 f0       	breq	.+34     	; 0x4ce <__LOCK_REGION_LENGTH__+0xce>
     4ac:	8e 81       	ldd	r24, Y+6	; 0x06
     4ae:	8f 93       	push	r24
     4b0:	8d 81       	ldd	r24, Y+5	; 0x05
     4b2:	8f 93       	push	r24
     4b4:	8b ea       	ldi	r24, 0xAB	; 171
     4b6:	91 e0       	ldi	r25, 0x01	; 1
     4b8:	89 2f       	mov	r24, r25
     4ba:	8f 93       	push	r24
     4bc:	8b ea       	ldi	r24, 0xAB	; 171
     4be:	91 e0       	ldi	r25, 0x01	; 1
     4c0:	8f 93       	push	r24
     4c2:	0e 94 6d 1e 	call	0x3cda	; 0x3cda <printf>
     4c6:	0f 90       	pop	r0
     4c8:	0f 90       	pop	r0
     4ca:	0f 90       	pop	r0
     4cc:	0f 90       	pop	r0
     4ce:	86 e8       	ldi	r24, 0x86	; 134
     4d0:	90 e0       	ldi	r25, 0x00	; 0
     4d2:	0e 94 0b 16 	call	0x2c16	; 0x2c16 <scd4x_set_sensor_altitude>
     4d6:	9e 83       	std	Y+6, r25	; 0x06
     4d8:	8d 83       	std	Y+5, r24	; 0x05
     4da:	8d 81       	ldd	r24, Y+5	; 0x05
     4dc:	9e 81       	ldd	r25, Y+6	; 0x06
     4de:	89 2b       	or	r24, r25
     4e0:	89 f0       	breq	.+34     	; 0x504 <__LOCK_REGION_LENGTH__+0x104>
     4e2:	8e 81       	ldd	r24, Y+6	; 0x06
     4e4:	8f 93       	push	r24
     4e6:	8d 81       	ldd	r24, Y+5	; 0x05
     4e8:	8f 93       	push	r24
     4ea:	89 ec       	ldi	r24, 0xC9	; 201
     4ec:	91 e0       	ldi	r25, 0x01	; 1
     4ee:	89 2f       	mov	r24, r25
     4f0:	8f 93       	push	r24
     4f2:	89 ec       	ldi	r24, 0xC9	; 201
     4f4:	91 e0       	ldi	r25, 0x01	; 1
     4f6:	8f 93       	push	r24
     4f8:	0e 94 6d 1e 	call	0x3cda	; 0x3cda <printf>
     4fc:	0f 90       	pop	r0
     4fe:	0f 90       	pop	r0
     500:	0f 90       	pop	r0
     502:	0f 90       	pop	r0
     504:	0e 94 ad 14 	call	0x295a	; 0x295a <scd4x_start_periodic_measurement>
     508:	9e 83       	std	Y+6, r25	; 0x06
     50a:	8d 83       	std	Y+5, r24	; 0x05
     50c:	8d 81       	ldd	r24, Y+5	; 0x05
     50e:	9e 81       	ldd	r25, Y+6	; 0x06
     510:	89 2b       	or	r24, r25
     512:	a1 f0       	breq	.+40     	; 0x53c <__LOCK_REGION_LENGTH__+0x13c>
     514:	8e 81       	ldd	r24, Y+6	; 0x06
     516:	8f 93       	push	r24
     518:	8d 81       	ldd	r24, Y+5	; 0x05
     51a:	8f 93       	push	r24
     51c:	84 ef       	ldi	r24, 0xF4	; 244
     51e:	91 e0       	ldi	r25, 0x01	; 1
     520:	89 2f       	mov	r24, r25
     522:	8f 93       	push	r24
     524:	84 ef       	ldi	r24, 0xF4	; 244
     526:	91 e0       	ldi	r25, 0x01	; 1
     528:	8f 93       	push	r24
     52a:	0e 94 6d 1e 	call	0x3cda	; 0x3cda <printf>
     52e:	0f 90       	pop	r0
     530:	0f 90       	pop	r0
     532:	0f 90       	pop	r0
     534:	0f 90       	pop	r0
     536:	8d 81       	ldd	r24, Y+5	; 0x05
     538:	9e 81       	ldd	r25, Y+6	; 0x06
     53a:	34 c3       	rjmp	.+1640   	; 0xba4 <__stack+0x2a5>
     53c:	1f ae       	std	Y+63, r1	; 0x3f
     53e:	ce 01       	movw	r24, r28
     540:	80 5c       	subi	r24, 0xC0	; 192
     542:	9f 4f       	sbci	r25, 0xFF	; 255
     544:	fc 01       	movw	r30, r24
     546:	11 82       	std	Z+1, r1	; 0x01
     548:	10 82       	st	Z, r1
     54a:	ce 01       	movw	r24, r28
     54c:	8e 5b       	subi	r24, 0xBE	; 190
     54e:	9f 4f       	sbci	r25, 0xFF	; 255
     550:	fc 01       	movw	r30, r24
     552:	10 82       	st	Z, r1
     554:	11 82       	std	Z+1, r1	; 0x01
     556:	12 82       	std	Z+2, r1	; 0x02
     558:	13 82       	std	Z+3, r1	; 0x03
     55a:	ce 01       	movw	r24, r28
     55c:	8a 5b       	subi	r24, 0xBA	; 186
     55e:	9f 4f       	sbci	r25, 0xFF	; 255
     560:	fc 01       	movw	r30, r24
     562:	10 82       	st	Z, r1
     564:	11 82       	std	Z+1, r1	; 0x01
     566:	12 82       	std	Z+2, r1	; 0x02
     568:	13 82       	std	Z+3, r1	; 0x03
     56a:	1e 8a       	std	Y+22, r1	; 0x16
     56c:	1d 8a       	std	Y+21, r1	; 0x15
     56e:	80 e0       	ldi	r24, 0x00	; 0
     570:	90 e4       	ldi	r25, 0x40	; 64
     572:	ac e9       	ldi	r26, 0x9C	; 156
     574:	b5 e4       	ldi	r27, 0x45	; 69
     576:	8f 83       	std	Y+7, r24	; 0x07
     578:	98 87       	std	Y+8, r25	; 0x08
     57a:	a9 87       	std	Y+9, r26	; 0x09
     57c:	ba 87       	std	Y+10, r27	; 0x0a
     57e:	20 e0       	ldi	r18, 0x00	; 0
     580:	30 e0       	ldi	r19, 0x00	; 0
     582:	4a e7       	ldi	r20, 0x7A	; 122
     584:	55 e4       	ldi	r21, 0x45	; 69
     586:	6f 81       	ldd	r22, Y+7	; 0x07
     588:	78 85       	ldd	r23, Y+8	; 0x08
     58a:	89 85       	ldd	r24, Y+9	; 0x09
     58c:	9a 85       	ldd	r25, Y+10	; 0x0a
     58e:	0e 94 01 19 	call	0x3202	; 0x3202 <__mulsf3>
     592:	dc 01       	movw	r26, r24
     594:	cb 01       	movw	r24, r22
     596:	8b a7       	std	Y+43, r24	; 0x2b
     598:	9c a7       	std	Y+44, r25	; 0x2c
     59a:	ad a7       	std	Y+45, r26	; 0x2d
     59c:	be a7       	std	Y+46, r27	; 0x2e
     59e:	20 e0       	ldi	r18, 0x00	; 0
     5a0:	30 e0       	ldi	r19, 0x00	; 0
     5a2:	40 e8       	ldi	r20, 0x80	; 128
     5a4:	5f e3       	ldi	r21, 0x3F	; 63
     5a6:	6b a5       	ldd	r22, Y+43	; 0x2b
     5a8:	7c a5       	ldd	r23, Y+44	; 0x2c
     5aa:	8d a5       	ldd	r24, Y+45	; 0x2d
     5ac:	9e a5       	ldd	r25, Y+46	; 0x2e
     5ae:	0e 94 9d 17 	call	0x2f3a	; 0x2f3a <__cmpsf2>
     5b2:	88 23       	and	r24, r24
     5b4:	2c f4       	brge	.+10     	; 0x5c0 <__LOCK_REGION_LENGTH__+0x1c0>
     5b6:	81 e0       	ldi	r24, 0x01	; 1
     5b8:	90 e0       	ldi	r25, 0x00	; 0
     5ba:	98 ab       	std	Y+48, r25	; 0x30
     5bc:	8f a7       	std	Y+47, r24	; 0x2f
     5be:	3f c0       	rjmp	.+126    	; 0x63e <__LOCK_REGION_LENGTH__+0x23e>
     5c0:	20 e0       	ldi	r18, 0x00	; 0
     5c2:	3f ef       	ldi	r19, 0xFF	; 255
     5c4:	4f e7       	ldi	r20, 0x7F	; 127
     5c6:	57 e4       	ldi	r21, 0x47	; 71
     5c8:	6b a5       	ldd	r22, Y+43	; 0x2b
     5ca:	7c a5       	ldd	r23, Y+44	; 0x2c
     5cc:	8d a5       	ldd	r24, Y+45	; 0x2d
     5ce:	9e a5       	ldd	r25, Y+46	; 0x2e
     5d0:	0e 94 fc 18 	call	0x31f8	; 0x31f8 <__gesf2>
     5d4:	18 16       	cp	r1, r24
     5d6:	4c f5       	brge	.+82     	; 0x62a <__LOCK_REGION_LENGTH__+0x22a>
     5d8:	20 e0       	ldi	r18, 0x00	; 0
     5da:	30 e0       	ldi	r19, 0x00	; 0
     5dc:	40 e2       	ldi	r20, 0x20	; 32
     5de:	51 e4       	ldi	r21, 0x41	; 65
     5e0:	6f 81       	ldd	r22, Y+7	; 0x07
     5e2:	78 85       	ldd	r23, Y+8	; 0x08
     5e4:	89 85       	ldd	r24, Y+9	; 0x09
     5e6:	9a 85       	ldd	r25, Y+10	; 0x0a
     5e8:	0e 94 01 19 	call	0x3202	; 0x3202 <__mulsf3>
     5ec:	dc 01       	movw	r26, r24
     5ee:	cb 01       	movw	r24, r22
     5f0:	bc 01       	movw	r22, r24
     5f2:	cd 01       	movw	r24, r26
     5f4:	0e 94 1b 18 	call	0x3036	; 0x3036 <__fixunssfsi>
     5f8:	dc 01       	movw	r26, r24
     5fa:	cb 01       	movw	r24, r22
     5fc:	98 ab       	std	Y+48, r25	; 0x30
     5fe:	8f a7       	std	Y+47, r24	; 0x2f
     600:	0f c0       	rjmp	.+30     	; 0x620 <__LOCK_REGION_LENGTH__+0x220>
     602:	80 e9       	ldi	r24, 0x90	; 144
     604:	91 e0       	ldi	r25, 0x01	; 1
     606:	9a ab       	std	Y+50, r25	; 0x32
     608:	89 ab       	std	Y+49, r24	; 0x31
     60a:	89 a9       	ldd	r24, Y+49	; 0x31
     60c:	9a a9       	ldd	r25, Y+50	; 0x32
     60e:	01 97       	sbiw	r24, 0x01	; 1
     610:	f1 f7       	brne	.-4      	; 0x60e <__LOCK_REGION_LENGTH__+0x20e>
     612:	9a ab       	std	Y+50, r25	; 0x32
     614:	89 ab       	std	Y+49, r24	; 0x31
     616:	8f a5       	ldd	r24, Y+47	; 0x2f
     618:	98 a9       	ldd	r25, Y+48	; 0x30
     61a:	01 97       	sbiw	r24, 0x01	; 1
     61c:	98 ab       	std	Y+48, r25	; 0x30
     61e:	8f a7       	std	Y+47, r24	; 0x2f
     620:	8f a5       	ldd	r24, Y+47	; 0x2f
     622:	98 a9       	ldd	r25, Y+48	; 0x30
     624:	89 2b       	or	r24, r25
     626:	69 f7       	brne	.-38     	; 0x602 <__LOCK_REGION_LENGTH__+0x202>
     628:	14 c0       	rjmp	.+40     	; 0x652 <__LOCK_REGION_LENGTH__+0x252>
     62a:	6b a5       	ldd	r22, Y+43	; 0x2b
     62c:	7c a5       	ldd	r23, Y+44	; 0x2c
     62e:	8d a5       	ldd	r24, Y+45	; 0x2d
     630:	9e a5       	ldd	r25, Y+46	; 0x2e
     632:	0e 94 1b 18 	call	0x3036	; 0x3036 <__fixunssfsi>
     636:	dc 01       	movw	r26, r24
     638:	cb 01       	movw	r24, r22
     63a:	98 ab       	std	Y+48, r25	; 0x30
     63c:	8f a7       	std	Y+47, r24	; 0x2f
     63e:	8f a5       	ldd	r24, Y+47	; 0x2f
     640:	98 a9       	ldd	r25, Y+48	; 0x30
     642:	9c ab       	std	Y+52, r25	; 0x34
     644:	8b ab       	std	Y+51, r24	; 0x33
     646:	8b a9       	ldd	r24, Y+51	; 0x33
     648:	9c a9       	ldd	r25, Y+52	; 0x34
     64a:	01 97       	sbiw	r24, 0x01	; 1
     64c:	f1 f7       	brne	.-4      	; 0x64a <__LOCK_REGION_LENGTH__+0x24a>
     64e:	9c ab       	std	Y+52, r25	; 0x34
     650:	8b ab       	std	Y+51, r24	; 0x33
     652:	ce 01       	movw	r24, r28
     654:	cf 96       	adiw	r24, 0x3f	; 63
     656:	0e 94 7d 14 	call	0x28fa	; 0x28fa <scd4x_get_data_ready_status>
     65a:	9e 83       	std	Y+6, r25	; 0x06
     65c:	8d 83       	std	Y+5, r24	; 0x05
     65e:	8d 81       	ldd	r24, Y+5	; 0x05
     660:	9e 81       	ldd	r25, Y+6	; 0x06
     662:	89 2b       	or	r24, r25
     664:	71 f1       	breq	.+92     	; 0x6c2 <__LOCK_REGION_LENGTH__+0x2c2>
     666:	8e 81       	ldd	r24, Y+6	; 0x06
     668:	8f 93       	push	r24
     66a:	8d 81       	ldd	r24, Y+5	; 0x05
     66c:	8f 93       	push	r24
     66e:	8f e1       	ldi	r24, 0x1F	; 31
     670:	92 e0       	ldi	r25, 0x02	; 2
     672:	89 2f       	mov	r24, r25
     674:	8f 93       	push	r24
     676:	8f e1       	ldi	r24, 0x1F	; 31
     678:	92 e0       	ldi	r25, 0x02	; 2
     67a:	8f 93       	push	r24
     67c:	0e 94 6d 1e 	call	0x3cda	; 0x3cda <printf>
     680:	0f 90       	pop	r0
     682:	0f 90       	pop	r0
     684:	0f 90       	pop	r0
     686:	0f 90       	pop	r0
     688:	81 c2       	rjmp	.+1282   	; 0xb8c <__stack+0x28d>
     68a:	ce 01       	movw	r24, r28
     68c:	cf 96       	adiw	r24, 0x3f	; 63
     68e:	0e 94 7d 14 	call	0x28fa	; 0x28fa <scd4x_get_data_ready_status>
     692:	9e 83       	std	Y+6, r25	; 0x06
     694:	8d 83       	std	Y+5, r24	; 0x05
     696:	8d 81       	ldd	r24, Y+5	; 0x05
     698:	9e 81       	ldd	r25, Y+6	; 0x06
     69a:	89 2b       	or	r24, r25
     69c:	91 f0       	breq	.+36     	; 0x6c2 <__LOCK_REGION_LENGTH__+0x2c2>
     69e:	8e 81       	ldd	r24, Y+6	; 0x06
     6a0:	8f 93       	push	r24
     6a2:	8d 81       	ldd	r24, Y+5	; 0x05
     6a4:	8f 93       	push	r24
     6a6:	8f e1       	ldi	r24, 0x1F	; 31
     6a8:	92 e0       	ldi	r25, 0x02	; 2
     6aa:	89 2f       	mov	r24, r25
     6ac:	8f 93       	push	r24
     6ae:	8f e1       	ldi	r24, 0x1F	; 31
     6b0:	92 e0       	ldi	r25, 0x02	; 2
     6b2:	8f 93       	push	r24
     6b4:	0e 94 6d 1e 	call	0x3cda	; 0x3cda <printf>
     6b8:	0f 90       	pop	r0
     6ba:	0f 90       	pop	r0
     6bc:	0f 90       	pop	r0
     6be:	0f 90       	pop	r0
     6c0:	00 00       	nop
     6c2:	9f ad       	ldd	r25, Y+63	; 0x3f
     6c4:	81 e0       	ldi	r24, 0x01	; 1
     6c6:	89 27       	eor	r24, r25
     6c8:	88 23       	and	r24, r24
     6ca:	f9 f6       	brne	.-66     	; 0x68a <__LOCK_REGION_LENGTH__+0x28a>
     6cc:	ae 01       	movw	r20, r28
     6ce:	4a 5b       	subi	r20, 0xBA	; 186
     6d0:	5f 4f       	sbci	r21, 0xFF	; 255
     6d2:	9e 01       	movw	r18, r28
     6d4:	2e 5b       	subi	r18, 0xBE	; 190
     6d6:	3f 4f       	sbci	r19, 0xFF	; 255
     6d8:	ce 01       	movw	r24, r28
     6da:	80 5c       	subi	r24, 0xC0	; 192
     6dc:	9f 4f       	sbci	r25, 0xFF	; 255
     6de:	b9 01       	movw	r22, r18
     6e0:	0e 94 61 15 	call	0x2ac2	; 0x2ac2 <scd4x_read_measurement>
     6e4:	9e 83       	std	Y+6, r25	; 0x06
     6e6:	8d 83       	std	Y+5, r24	; 0x05
     6e8:	8d 81       	ldd	r24, Y+5	; 0x05
     6ea:	9e 81       	ldd	r25, Y+6	; 0x06
     6ec:	89 2b       	or	r24, r25
     6ee:	99 f0       	breq	.+38     	; 0x716 <__LOCK_REGION_LENGTH__+0x316>
     6f0:	8e 81       	ldd	r24, Y+6	; 0x06
     6f2:	8f 93       	push	r24
     6f4:	8d 81       	ldd	r24, Y+5	; 0x05
     6f6:	8f 93       	push	r24
     6f8:	8c e4       	ldi	r24, 0x4C	; 76
     6fa:	92 e0       	ldi	r25, 0x02	; 2
     6fc:	89 2f       	mov	r24, r25
     6fe:	8f 93       	push	r24
     700:	8c e4       	ldi	r24, 0x4C	; 76
     702:	92 e0       	ldi	r25, 0x02	; 2
     704:	8f 93       	push	r24
     706:	0e 94 6d 1e 	call	0x3cda	; 0x3cda <printf>
     70a:	0f 90       	pop	r0
     70c:	0f 90       	pop	r0
     70e:	0f 90       	pop	r0
     710:	0f 90       	pop	r0
     712:	00 00       	nop
     714:	3b c2       	rjmp	.+1142   	; 0xb8c <__stack+0x28d>
     716:	ce 01       	movw	r24, r28
     718:	8e 5b       	subi	r24, 0xBE	; 190
     71a:	9f 4f       	sbci	r25, 0xFF	; 255
     71c:	fc 01       	movw	r30, r24
     71e:	80 81       	ld	r24, Z
     720:	91 81       	ldd	r25, Z+1	; 0x01
     722:	a2 81       	ldd	r26, Z+2	; 0x02
     724:	b3 81       	ldd	r27, Z+3	; 0x03
     726:	bc 01       	movw	r22, r24
     728:	cd 01       	movw	r24, r26
     72a:	0e 94 4c 18 	call	0x3098	; 0x3098 <__floatsisf>
     72e:	dc 01       	movw	r26, r24
     730:	cb 01       	movw	r24, r22
     732:	20 e0       	ldi	r18, 0x00	; 0
     734:	30 e0       	ldi	r19, 0x00	; 0
     736:	4a e7       	ldi	r20, 0x7A	; 122
     738:	54 e4       	ldi	r21, 0x44	; 68
     73a:	bc 01       	movw	r22, r24
     73c:	cd 01       	movw	r24, r26
     73e:	0e 94 a2 17 	call	0x2f44	; 0x2f44 <__divsf3>
     742:	dc 01       	movw	r26, r24
     744:	cb 01       	movw	r24, r22
     746:	bc 01       	movw	r22, r24
     748:	cd 01       	movw	r24, r26
     74a:	0e 94 14 18 	call	0x3028	; 0x3028 <__fixsfsi>
     74e:	dc 01       	movw	r26, r24
     750:	cb 01       	movw	r24, r22
     752:	9e 01       	movw	r18, r28
     754:	2e 5b       	subi	r18, 0xBE	; 190
     756:	3f 4f       	sbci	r19, 0xFF	; 255
     758:	f9 01       	movw	r30, r18
     75a:	80 83       	st	Z, r24
     75c:	91 83       	std	Z+1, r25	; 0x01
     75e:	a2 83       	std	Z+2, r26	; 0x02
     760:	b3 83       	std	Z+3, r27	; 0x03
     762:	ce 01       	movw	r24, r28
     764:	8a 5b       	subi	r24, 0xBA	; 186
     766:	9f 4f       	sbci	r25, 0xFF	; 255
     768:	fc 01       	movw	r30, r24
     76a:	80 81       	ld	r24, Z
     76c:	91 81       	ldd	r25, Z+1	; 0x01
     76e:	a2 81       	ldd	r26, Z+2	; 0x02
     770:	b3 81       	ldd	r27, Z+3	; 0x03
     772:	20 e0       	ldi	r18, 0x00	; 0
     774:	30 e0       	ldi	r19, 0x00	; 0
     776:	4a e7       	ldi	r20, 0x7A	; 122
     778:	54 e4       	ldi	r21, 0x44	; 68
     77a:	bc 01       	movw	r22, r24
     77c:	cd 01       	movw	r24, r26
     77e:	0e 94 a2 17 	call	0x2f44	; 0x2f44 <__divsf3>
     782:	dc 01       	movw	r26, r24
     784:	cb 01       	movw	r24, r22
     786:	9e 01       	movw	r18, r28
     788:	2a 5b       	subi	r18, 0xBA	; 186
     78a:	3f 4f       	sbci	r19, 0xFF	; 255
     78c:	f9 01       	movw	r30, r18
     78e:	80 83       	st	Z, r24
     790:	91 83       	std	Z+1, r25	; 0x01
     792:	a2 83       	std	Z+2, r26	; 0x02
     794:	b3 83       	std	Z+3, r27	; 0x03
     796:	ce 01       	movw	r24, r28
     798:	80 5c       	subi	r24, 0xC0	; 192
     79a:	9f 4f       	sbci	r25, 0xFF	; 255
     79c:	fc 01       	movw	r30, r24
     79e:	80 81       	ld	r24, Z
     7a0:	91 81       	ldd	r25, Z+1	; 0x01
     7a2:	29 2f       	mov	r18, r25
     7a4:	2f 93       	push	r18
     7a6:	8f 93       	push	r24
     7a8:	84 e7       	ldi	r24, 0x74	; 116
     7aa:	92 e0       	ldi	r25, 0x02	; 2
     7ac:	89 2f       	mov	r24, r25
     7ae:	8f 93       	push	r24
     7b0:	84 e7       	ldi	r24, 0x74	; 116
     7b2:	92 e0       	ldi	r25, 0x02	; 2
     7b4:	8f 93       	push	r24
     7b6:	ce 01       	movw	r24, r28
     7b8:	86 5b       	subi	r24, 0xB6	; 182
     7ba:	9e 4f       	sbci	r25, 0xFE	; 254
     7bc:	29 2f       	mov	r18, r25
     7be:	2f 93       	push	r18
     7c0:	8f 93       	push	r24
     7c2:	0e 94 ba 1e 	call	0x3d74	; 0x3d74 <sprintf>
     7c6:	0f 90       	pop	r0
     7c8:	0f 90       	pop	r0
     7ca:	0f 90       	pop	r0
     7cc:	0f 90       	pop	r0
     7ce:	0f 90       	pop	r0
     7d0:	0f 90       	pop	r0
     7d2:	ce 01       	movw	r24, r28
     7d4:	86 5b       	subi	r24, 0xB6	; 182
     7d6:	9e 4f       	sbci	r25, 0xFE	; 254
     7d8:	0e 94 99 06 	call	0xd32	; 0xd32 <HM10_transmit>
     7dc:	ce 01       	movw	r24, r28
     7de:	8e 5b       	subi	r24, 0xBE	; 190
     7e0:	9f 4f       	sbci	r25, 0xFF	; 255
     7e2:	fc 01       	movw	r30, r24
     7e4:	80 81       	ld	r24, Z
     7e6:	91 81       	ldd	r25, Z+1	; 0x01
     7e8:	a2 81       	ldd	r26, Z+2	; 0x02
     7ea:	b3 81       	ldd	r27, Z+3	; 0x03
     7ec:	2b 2f       	mov	r18, r27
     7ee:	2f 93       	push	r18
     7f0:	2a 2f       	mov	r18, r26
     7f2:	2f 93       	push	r18
     7f4:	29 2f       	mov	r18, r25
     7f6:	2f 93       	push	r18
     7f8:	8f 93       	push	r24
     7fa:	82 e8       	ldi	r24, 0x82	; 130
     7fc:	92 e0       	ldi	r25, 0x02	; 2
     7fe:	89 2f       	mov	r24, r25
     800:	8f 93       	push	r24
     802:	82 e8       	ldi	r24, 0x82	; 130
     804:	92 e0       	ldi	r25, 0x02	; 2
     806:	8f 93       	push	r24
     808:	ce 01       	movw	r24, r28
     80a:	86 5b       	subi	r24, 0xB6	; 182
     80c:	9e 4f       	sbci	r25, 0xFE	; 254
     80e:	29 2f       	mov	r18, r25
     810:	2f 93       	push	r18
     812:	8f 93       	push	r24
     814:	0e 94 ba 1e 	call	0x3d74	; 0x3d74 <sprintf>
     818:	8d b7       	in	r24, 0x3d	; 61
     81a:	9e b7       	in	r25, 0x3e	; 62
     81c:	08 96       	adiw	r24, 0x08	; 8
     81e:	0f b6       	in	r0, 0x3f	; 63
     820:	f8 94       	cli
     822:	de bf       	out	0x3e, r29	; 62
     824:	0f be       	out	0x3f, r0	; 63
     826:	cd bf       	out	0x3d, r28	; 61
     828:	ce 01       	movw	r24, r28
     82a:	86 5b       	subi	r24, 0xB6	; 182
     82c:	9e 4f       	sbci	r25, 0xFE	; 254
     82e:	0e 94 99 06 	call	0xd32	; 0xd32 <HM10_transmit>
     832:	ce 01       	movw	r24, r28
     834:	8a 5b       	subi	r24, 0xBA	; 186
     836:	9f 4f       	sbci	r25, 0xFF	; 255
     838:	fc 01       	movw	r30, r24
     83a:	80 81       	ld	r24, Z
     83c:	91 81       	ldd	r25, Z+1	; 0x01
     83e:	a2 81       	ldd	r26, Z+2	; 0x02
     840:	b3 81       	ldd	r27, Z+3	; 0x03
     842:	2b 2f       	mov	r18, r27
     844:	2f 93       	push	r18
     846:	2a 2f       	mov	r18, r26
     848:	2f 93       	push	r18
     84a:	29 2f       	mov	r18, r25
     84c:	2f 93       	push	r18
     84e:	8f 93       	push	r24
     850:	8f e8       	ldi	r24, 0x8F	; 143
     852:	92 e0       	ldi	r25, 0x02	; 2
     854:	89 2f       	mov	r24, r25
     856:	8f 93       	push	r24
     858:	8f e8       	ldi	r24, 0x8F	; 143
     85a:	92 e0       	ldi	r25, 0x02	; 2
     85c:	8f 93       	push	r24
     85e:	ce 01       	movw	r24, r28
     860:	86 5b       	subi	r24, 0xB6	; 182
     862:	9e 4f       	sbci	r25, 0xFE	; 254
     864:	29 2f       	mov	r18, r25
     866:	2f 93       	push	r18
     868:	8f 93       	push	r24
     86a:	0e 94 ba 1e 	call	0x3d74	; 0x3d74 <sprintf>
     86e:	8d b7       	in	r24, 0x3d	; 61
     870:	9e b7       	in	r25, 0x3e	; 62
     872:	08 96       	adiw	r24, 0x08	; 8
     874:	0f b6       	in	r0, 0x3f	; 63
     876:	f8 94       	cli
     878:	de bf       	out	0x3e, r29	; 62
     87a:	0f be       	out	0x3f, r0	; 63
     87c:	cd bf       	out	0x3d, r28	; 61
     87e:	ce 01       	movw	r24, r28
     880:	86 5b       	subi	r24, 0xB6	; 182
     882:	9e 4f       	sbci	r25, 0xFE	; 254
     884:	0e 94 99 06 	call	0xd32	; 0xd32 <HM10_transmit>
     888:	0e 94 cf 06 	call	0xd9e	; 0xd9e <HM10_clear_response_buffer>
     88c:	80 e0       	ldi	r24, 0x00	; 0
     88e:	90 e8       	ldi	r25, 0x80	; 128
     890:	ab e3       	ldi	r26, 0x3B	; 59
     892:	b5 e4       	ldi	r27, 0x45	; 69
     894:	8f 8b       	std	Y+23, r24	; 0x17
     896:	98 8f       	std	Y+24, r25	; 0x18
     898:	a9 8f       	std	Y+25, r26	; 0x19
     89a:	ba 8f       	std	Y+26, r27	; 0x1a
     89c:	20 e0       	ldi	r18, 0x00	; 0
     89e:	30 e0       	ldi	r19, 0x00	; 0
     8a0:	4a e7       	ldi	r20, 0x7A	; 122
     8a2:	55 e4       	ldi	r21, 0x45	; 69
     8a4:	6f 89       	ldd	r22, Y+23	; 0x17
     8a6:	78 8d       	ldd	r23, Y+24	; 0x18
     8a8:	89 8d       	ldd	r24, Y+25	; 0x19
     8aa:	9a 8d       	ldd	r25, Y+26	; 0x1a
     8ac:	0e 94 01 19 	call	0x3202	; 0x3202 <__mulsf3>
     8b0:	dc 01       	movw	r26, r24
     8b2:	cb 01       	movw	r24, r22
     8b4:	8d ab       	std	Y+53, r24	; 0x35
     8b6:	9e ab       	std	Y+54, r25	; 0x36
     8b8:	af ab       	std	Y+55, r26	; 0x37
     8ba:	b8 af       	std	Y+56, r27	; 0x38
     8bc:	20 e0       	ldi	r18, 0x00	; 0
     8be:	30 e0       	ldi	r19, 0x00	; 0
     8c0:	40 e8       	ldi	r20, 0x80	; 128
     8c2:	5f e3       	ldi	r21, 0x3F	; 63
     8c4:	6d a9       	ldd	r22, Y+53	; 0x35
     8c6:	7e a9       	ldd	r23, Y+54	; 0x36
     8c8:	8f a9       	ldd	r24, Y+55	; 0x37
     8ca:	98 ad       	ldd	r25, Y+56	; 0x38
     8cc:	0e 94 9d 17 	call	0x2f3a	; 0x2f3a <__cmpsf2>
     8d0:	88 23       	and	r24, r24
     8d2:	2c f4       	brge	.+10     	; 0x8de <__LOCK_REGION_LENGTH__+0x4de>
     8d4:	81 e0       	ldi	r24, 0x01	; 1
     8d6:	90 e0       	ldi	r25, 0x00	; 0
     8d8:	9a af       	std	Y+58, r25	; 0x3a
     8da:	89 af       	std	Y+57, r24	; 0x39
     8dc:	3f c0       	rjmp	.+126    	; 0x95c <__stack+0x5d>
     8de:	20 e0       	ldi	r18, 0x00	; 0
     8e0:	3f ef       	ldi	r19, 0xFF	; 255
     8e2:	4f e7       	ldi	r20, 0x7F	; 127
     8e4:	57 e4       	ldi	r21, 0x47	; 71
     8e6:	6d a9       	ldd	r22, Y+53	; 0x35
     8e8:	7e a9       	ldd	r23, Y+54	; 0x36
     8ea:	8f a9       	ldd	r24, Y+55	; 0x37
     8ec:	98 ad       	ldd	r25, Y+56	; 0x38
     8ee:	0e 94 fc 18 	call	0x31f8	; 0x31f8 <__gesf2>
     8f2:	18 16       	cp	r1, r24
     8f4:	4c f5       	brge	.+82     	; 0x948 <__stack+0x49>
     8f6:	20 e0       	ldi	r18, 0x00	; 0
     8f8:	30 e0       	ldi	r19, 0x00	; 0
     8fa:	40 e2       	ldi	r20, 0x20	; 32
     8fc:	51 e4       	ldi	r21, 0x41	; 65
     8fe:	6f 89       	ldd	r22, Y+23	; 0x17
     900:	78 8d       	ldd	r23, Y+24	; 0x18
     902:	89 8d       	ldd	r24, Y+25	; 0x19
     904:	9a 8d       	ldd	r25, Y+26	; 0x1a
     906:	0e 94 01 19 	call	0x3202	; 0x3202 <__mulsf3>
     90a:	dc 01       	movw	r26, r24
     90c:	cb 01       	movw	r24, r22
     90e:	bc 01       	movw	r22, r24
     910:	cd 01       	movw	r24, r26
     912:	0e 94 1b 18 	call	0x3036	; 0x3036 <__fixunssfsi>
     916:	dc 01       	movw	r26, r24
     918:	cb 01       	movw	r24, r22
     91a:	9a af       	std	Y+58, r25	; 0x3a
     91c:	89 af       	std	Y+57, r24	; 0x39
     91e:	0f c0       	rjmp	.+30     	; 0x93e <__stack+0x3f>
     920:	80 e9       	ldi	r24, 0x90	; 144
     922:	91 e0       	ldi	r25, 0x01	; 1
     924:	9c af       	std	Y+60, r25	; 0x3c
     926:	8b af       	std	Y+59, r24	; 0x3b
     928:	8b ad       	ldd	r24, Y+59	; 0x3b
     92a:	9c ad       	ldd	r25, Y+60	; 0x3c
     92c:	01 97       	sbiw	r24, 0x01	; 1
     92e:	f1 f7       	brne	.-4      	; 0x92c <__stack+0x2d>
     930:	9c af       	std	Y+60, r25	; 0x3c
     932:	8b af       	std	Y+59, r24	; 0x3b
     934:	89 ad       	ldd	r24, Y+57	; 0x39
     936:	9a ad       	ldd	r25, Y+58	; 0x3a
     938:	01 97       	sbiw	r24, 0x01	; 1
     93a:	9a af       	std	Y+58, r25	; 0x3a
     93c:	89 af       	std	Y+57, r24	; 0x39
     93e:	89 ad       	ldd	r24, Y+57	; 0x39
     940:	9a ad       	ldd	r25, Y+58	; 0x3a
     942:	89 2b       	or	r24, r25
     944:	69 f7       	brne	.-38     	; 0x920 <__stack+0x21>
     946:	14 c0       	rjmp	.+40     	; 0x970 <__stack+0x71>
     948:	6d a9       	ldd	r22, Y+53	; 0x35
     94a:	7e a9       	ldd	r23, Y+54	; 0x36
     94c:	8f a9       	ldd	r24, Y+55	; 0x37
     94e:	98 ad       	ldd	r25, Y+56	; 0x38
     950:	0e 94 1b 18 	call	0x3036	; 0x3036 <__fixunssfsi>
     954:	dc 01       	movw	r26, r24
     956:	cb 01       	movw	r24, r22
     958:	9a af       	std	Y+58, r25	; 0x3a
     95a:	89 af       	std	Y+57, r24	; 0x39
     95c:	89 ad       	ldd	r24, Y+57	; 0x39
     95e:	9a ad       	ldd	r25, Y+58	; 0x3a
     960:	9e af       	std	Y+62, r25	; 0x3e
     962:	8d af       	std	Y+61, r24	; 0x3d
     964:	8d ad       	ldd	r24, Y+61	; 0x3d
     966:	9e ad       	ldd	r25, Y+62	; 0x3e
     968:	01 97       	sbiw	r24, 0x01	; 1
     96a:	f1 f7       	brne	.-4      	; 0x968 <__stack+0x69>
     96c:	9e af       	std	Y+62, r25	; 0x3e
     96e:	8d af       	std	Y+61, r24	; 0x3d
     970:	1a 82       	std	Y+2, r1	; 0x02
     972:	19 82       	std	Y+1, r1	; 0x01
     974:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <sps30_start_measurement>
     978:	9c 8f       	std	Y+28, r25	; 0x1c
     97a:	8b 8f       	std	Y+27, r24	; 0x1b
     97c:	8b 8d       	ldd	r24, Y+27	; 0x1b
     97e:	9c 8d       	ldd	r25, Y+28	; 0x1c
     980:	99 23       	and	r25, r25
     982:	24 f4       	brge	.+8      	; 0x98c <__stack+0x8d>
     984:	83 ea       	ldi	r24, 0xA3	; 163
     986:	92 e0       	ldi	r25, 0x02	; 2
     988:	0e 94 8a 1e 	call	0x3d14	; 0x3d14 <puts>
     98c:	8e eb       	ldi	r24, 0xBE	; 190
     98e:	92 e0       	ldi	r25, 0x02	; 2
     990:	0e 94 8a 1e 	call	0x3d14	; 0x3d14 <puts>
     994:	60 e4       	ldi	r22, 0x40	; 64
     996:	72 e4       	ldi	r23, 0x42	; 66
     998:	8f e0       	ldi	r24, 0x0F	; 15
     99a:	90 e0       	ldi	r25, 0x00	; 0
     99c:	0e 94 d8 0e 	call	0x1db0	; 0x1db0 <sensirion_sleep_usec>
     9a0:	8a e7       	ldi	r24, 0x7A	; 122
     9a2:	95 e0       	ldi	r25, 0x05	; 5
     9a4:	0e 94 85 0d 	call	0x1b0a	; 0x1b0a <sps30_read_measurement>
     9a8:	9c 8f       	std	Y+28, r25	; 0x1c
     9aa:	8b 8f       	std	Y+27, r24	; 0x1b
     9ac:	8b 8d       	ldd	r24, Y+27	; 0x1b
     9ae:	9c 8d       	ldd	r25, Y+28	; 0x1c
     9b0:	99 23       	and	r25, r25
     9b2:	2c f4       	brge	.+10     	; 0x9be <__stack+0xbf>
     9b4:	8e ec       	ldi	r24, 0xCE	; 206
     9b6:	92 e0       	ldi	r25, 0x02	; 2
     9b8:	0e 94 8a 1e 	call	0x3d14	; 0x3d14 <puts>
     9bc:	e7 c0       	rjmp	.+462    	; 0xb8c <__stack+0x28d>
     9be:	80 91 7e 05 	lds	r24, 0x057E	; 0x80057e <m+0x4>
     9c2:	90 91 7f 05 	lds	r25, 0x057F	; 0x80057f <m+0x5>
     9c6:	a0 91 80 05 	lds	r26, 0x0580	; 0x800580 <m+0x6>
     9ca:	b0 91 81 05 	lds	r27, 0x0581	; 0x800581 <m+0x7>
     9ce:	2b 2f       	mov	r18, r27
     9d0:	2f 93       	push	r18
     9d2:	2a 2f       	mov	r18, r26
     9d4:	2f 93       	push	r18
     9d6:	29 2f       	mov	r18, r25
     9d8:	2f 93       	push	r18
     9da:	8f 93       	push	r24
     9dc:	88 ee       	ldi	r24, 0xE8	; 232
     9de:	92 e0       	ldi	r25, 0x02	; 2
     9e0:	89 2f       	mov	r24, r25
     9e2:	8f 93       	push	r24
     9e4:	88 ee       	ldi	r24, 0xE8	; 232
     9e6:	92 e0       	ldi	r25, 0x02	; 2
     9e8:	8f 93       	push	r24
     9ea:	ce 01       	movw	r24, r28
     9ec:	86 5b       	subi	r24, 0xB6	; 182
     9ee:	9f 4f       	sbci	r25, 0xFF	; 255
     9f0:	29 2f       	mov	r18, r25
     9f2:	2f 93       	push	r18
     9f4:	8f 93       	push	r24
     9f6:	0e 94 ba 1e 	call	0x3d74	; 0x3d74 <sprintf>
     9fa:	ed b7       	in	r30, 0x3d	; 61
     9fc:	fe b7       	in	r31, 0x3e	; 62
     9fe:	38 96       	adiw	r30, 0x08	; 8
     a00:	0f b6       	in	r0, 0x3f	; 63
     a02:	f8 94       	cli
     a04:	de bf       	out	0x3e, r29	; 62
     a06:	0f be       	out	0x3f, r0	; 63
     a08:	cd bf       	out	0x3d, r28	; 61
     a0a:	ce 01       	movw	r24, r28
     a0c:	86 5b       	subi	r24, 0xB6	; 182
     a0e:	9f 4f       	sbci	r25, 0xFF	; 255
     a10:	0e 94 99 06 	call	0xd32	; 0xd32 <HM10_transmit>
     a14:	80 91 86 05 	lds	r24, 0x0586	; 0x800586 <m+0xc>
     a18:	90 91 87 05 	lds	r25, 0x0587	; 0x800587 <m+0xd>
     a1c:	a0 91 88 05 	lds	r26, 0x0588	; 0x800588 <m+0xe>
     a20:	b0 91 89 05 	lds	r27, 0x0589	; 0x800589 <m+0xf>
     a24:	2b 2f       	mov	r18, r27
     a26:	2f 93       	push	r18
     a28:	2a 2f       	mov	r18, r26
     a2a:	2f 93       	push	r18
     a2c:	29 2f       	mov	r18, r25
     a2e:	2f 93       	push	r18
     a30:	8f 93       	push	r24
     a32:	84 ef       	ldi	r24, 0xF4	; 244
     a34:	92 e0       	ldi	r25, 0x02	; 2
     a36:	89 2f       	mov	r24, r25
     a38:	8f 93       	push	r24
     a3a:	84 ef       	ldi	r24, 0xF4	; 244
     a3c:	92 e0       	ldi	r25, 0x02	; 2
     a3e:	8f 93       	push	r24
     a40:	ce 01       	movw	r24, r28
     a42:	86 5b       	subi	r24, 0xB6	; 182
     a44:	9f 4f       	sbci	r25, 0xFF	; 255
     a46:	29 2f       	mov	r18, r25
     a48:	2f 93       	push	r18
     a4a:	8f 93       	push	r24
     a4c:	0e 94 ba 1e 	call	0x3d74	; 0x3d74 <sprintf>
     a50:	8d b7       	in	r24, 0x3d	; 61
     a52:	9e b7       	in	r25, 0x3e	; 62
     a54:	08 96       	adiw	r24, 0x08	; 8
     a56:	0f b6       	in	r0, 0x3f	; 63
     a58:	f8 94       	cli
     a5a:	de bf       	out	0x3e, r29	; 62
     a5c:	0f be       	out	0x3f, r0	; 63
     a5e:	cd bf       	out	0x3d, r28	; 61
     a60:	ce 01       	movw	r24, r28
     a62:	86 5b       	subi	r24, 0xB6	; 182
     a64:	9f 4f       	sbci	r25, 0xFF	; 255
     a66:	0e 94 99 06 	call	0xd32	; 0xd32 <HM10_transmit>
     a6a:	80 91 92 05 	lds	r24, 0x0592	; 0x800592 <m+0x18>
     a6e:	90 91 93 05 	lds	r25, 0x0593	; 0x800593 <m+0x19>
     a72:	a0 91 94 05 	lds	r26, 0x0594	; 0x800594 <m+0x1a>
     a76:	b0 91 95 05 	lds	r27, 0x0595	; 0x800595 <m+0x1b>
     a7a:	2b 2f       	mov	r18, r27
     a7c:	2f 93       	push	r18
     a7e:	2a 2f       	mov	r18, r26
     a80:	2f 93       	push	r18
     a82:	29 2f       	mov	r18, r25
     a84:	2f 93       	push	r18
     a86:	8f 93       	push	r24
     a88:	81 e0       	ldi	r24, 0x01	; 1
     a8a:	93 e0       	ldi	r25, 0x03	; 3
     a8c:	89 2f       	mov	r24, r25
     a8e:	8f 93       	push	r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	93 e0       	ldi	r25, 0x03	; 3
     a94:	8f 93       	push	r24
     a96:	ce 01       	movw	r24, r28
     a98:	86 5b       	subi	r24, 0xB6	; 182
     a9a:	9f 4f       	sbci	r25, 0xFF	; 255
     a9c:	29 2f       	mov	r18, r25
     a9e:	2f 93       	push	r18
     aa0:	8f 93       	push	r24
     aa2:	0e 94 ba 1e 	call	0x3d74	; 0x3d74 <sprintf>
     aa6:	ed b7       	in	r30, 0x3d	; 61
     aa8:	fe b7       	in	r31, 0x3e	; 62
     aaa:	38 96       	adiw	r30, 0x08	; 8
     aac:	0f b6       	in	r0, 0x3f	; 63
     aae:	f8 94       	cli
     ab0:	de bf       	out	0x3e, r29	; 62
     ab2:	0f be       	out	0x3f, r0	; 63
     ab4:	cd bf       	out	0x3d, r28	; 61
     ab6:	ce 01       	movw	r24, r28
     ab8:	86 5b       	subi	r24, 0xB6	; 182
     aba:	9f 4f       	sbci	r25, 0xFF	; 255
     abc:	0e 94 99 06 	call	0xd32	; 0xd32 <HM10_transmit>
     ac0:	80 91 9a 05 	lds	r24, 0x059A	; 0x80059a <m+0x20>
     ac4:	90 91 9b 05 	lds	r25, 0x059B	; 0x80059b <m+0x21>
     ac8:	a0 91 9c 05 	lds	r26, 0x059C	; 0x80059c <m+0x22>
     acc:	b0 91 9d 05 	lds	r27, 0x059D	; 0x80059d <m+0x23>
     ad0:	2b 2f       	mov	r18, r27
     ad2:	2f 93       	push	r18
     ad4:	2a 2f       	mov	r18, r26
     ad6:	2f 93       	push	r18
     ad8:	29 2f       	mov	r18, r25
     ada:	2f 93       	push	r18
     adc:	8f 93       	push	r24
     ade:	8d e0       	ldi	r24, 0x0D	; 13
     ae0:	93 e0       	ldi	r25, 0x03	; 3
     ae2:	89 2f       	mov	r24, r25
     ae4:	8f 93       	push	r24
     ae6:	8d e0       	ldi	r24, 0x0D	; 13
     ae8:	93 e0       	ldi	r25, 0x03	; 3
     aea:	8f 93       	push	r24
     aec:	ce 01       	movw	r24, r28
     aee:	86 5b       	subi	r24, 0xB6	; 182
     af0:	9f 4f       	sbci	r25, 0xFF	; 255
     af2:	29 2f       	mov	r18, r25
     af4:	2f 93       	push	r18
     af6:	8f 93       	push	r24
     af8:	0e 94 ba 1e 	call	0x3d74	; 0x3d74 <sprintf>
     afc:	8d b7       	in	r24, 0x3d	; 61
     afe:	9e b7       	in	r25, 0x3e	; 62
     b00:	08 96       	adiw	r24, 0x08	; 8
     b02:	0f b6       	in	r0, 0x3f	; 63
     b04:	f8 94       	cli
     b06:	de bf       	out	0x3e, r29	; 62
     b08:	0f be       	out	0x3f, r0	; 63
     b0a:	cd bf       	out	0x3d, r28	; 61
     b0c:	ce 01       	movw	r24, r28
     b0e:	86 5b       	subi	r24, 0xB6	; 182
     b10:	9f 4f       	sbci	r25, 0xFF	; 255
     b12:	0e 94 99 06 	call	0xd32	; 0xd32 <HM10_transmit>
     b16:	80 91 9e 05 	lds	r24, 0x059E	; 0x80059e <m+0x24>
     b1a:	90 91 9f 05 	lds	r25, 0x059F	; 0x80059f <m+0x25>
     b1e:	a0 91 a0 05 	lds	r26, 0x05A0	; 0x8005a0 <m+0x26>
     b22:	b0 91 a1 05 	lds	r27, 0x05A1	; 0x8005a1 <m+0x27>
     b26:	2b 2f       	mov	r18, r27
     b28:	2f 93       	push	r18
     b2a:	2a 2f       	mov	r18, r26
     b2c:	2f 93       	push	r18
     b2e:	29 2f       	mov	r18, r25
     b30:	2f 93       	push	r18
     b32:	8f 93       	push	r24
     b34:	8a e1       	ldi	r24, 0x1A	; 26
     b36:	93 e0       	ldi	r25, 0x03	; 3
     b38:	89 2f       	mov	r24, r25
     b3a:	8f 93       	push	r24
     b3c:	8a e1       	ldi	r24, 0x1A	; 26
     b3e:	93 e0       	ldi	r25, 0x03	; 3
     b40:	8f 93       	push	r24
     b42:	ce 01       	movw	r24, r28
     b44:	86 5b       	subi	r24, 0xB6	; 182
     b46:	9f 4f       	sbci	r25, 0xFF	; 255
     b48:	29 2f       	mov	r18, r25
     b4a:	2f 93       	push	r18
     b4c:	8f 93       	push	r24
     b4e:	0e 94 ba 1e 	call	0x3d74	; 0x3d74 <sprintf>
     b52:	ed b7       	in	r30, 0x3d	; 61
     b54:	fe b7       	in	r31, 0x3e	; 62
     b56:	38 96       	adiw	r30, 0x08	; 8
     b58:	0f b6       	in	r0, 0x3f	; 63
     b5a:	f8 94       	cli
     b5c:	de bf       	out	0x3e, r29	; 62
     b5e:	0f be       	out	0x3f, r0	; 63
     b60:	cd bf       	out	0x3d, r28	; 61
     b62:	ce 01       	movw	r24, r28
     b64:	86 5b       	subi	r24, 0xB6	; 182
     b66:	9f 4f       	sbci	r25, 0xFF	; 255
     b68:	0e 94 99 06 	call	0xd32	; 0xd32 <HM10_transmit>
     b6c:	0f c0       	rjmp	.+30     	; 0xb8c <__stack+0x28d>
     b6e:	89 81       	ldd	r24, Y+1	; 0x01
     b70:	9a 81       	ldd	r25, Y+2	; 0x02
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	59 f0       	breq	.+22     	; 0xb8c <__stack+0x28d>
     b76:	0e 94 d5 07 	call	0xfaa	; 0xfaa <ADC_disable>
     b7a:	86 e3       	ldi	r24, 0x36	; 54
     b7c:	93 e0       	ldi	r25, 0x03	; 3
     b7e:	0e 94 8a 1e 	call	0x3d14	; 0x3d14 <puts>
     b82:	89 81       	ldd	r24, Y+1	; 0x01
     b84:	9a 81       	ldd	r25, Y+2	; 0x02
     b86:	01 96       	adiw	r24, 0x01	; 1
     b88:	9a 83       	std	Y+2, r25	; 0x02
     b8a:	89 83       	std	Y+1, r24	; 0x01
     b8c:	8b 81       	ldd	r24, Y+3	; 0x03
     b8e:	9c 81       	ldd	r25, Y+4	; 0x04
     b90:	01 96       	adiw	r24, 0x01	; 1
     b92:	9c 83       	std	Y+4, r25	; 0x04
     b94:	8b 83       	std	Y+3, r24	; 0x03
     b96:	8b 81       	ldd	r24, Y+3	; 0x03
     b98:	9c 81       	ldd	r25, Y+4	; 0x04
     b9a:	80 34       	cpi	r24, 0x40	; 64
     b9c:	91 05       	cpc	r25, r1
     b9e:	08 f4       	brcc	.+2      	; 0xba2 <__stack+0x2a3>
     ba0:	bf cb       	rjmp	.-2178   	; 0x320 <main+0x12c>
     ba2:	bb cb       	rjmp	.-2186   	; 0x31a <main+0x126>
     ba4:	c7 5b       	subi	r28, 0xB7	; 183
     ba6:	dc 4f       	sbci	r29, 0xFC	; 252
     ba8:	0f b6       	in	r0, 0x3f	; 63
     baa:	f8 94       	cli
     bac:	de bf       	out	0x3e, r29	; 62
     bae:	0f be       	out	0x3f, r0	; 63
     bb0:	cd bf       	out	0x3d, r28	; 61
     bb2:	df 91       	pop	r29
     bb4:	cf 91       	pop	r28
     bb6:	08 95       	ret

00000bb8 <uart0_init>:
     bb8:	cf 93       	push	r28
     bba:	df 93       	push	r29
     bbc:	cd b7       	in	r28, 0x3d	; 61
     bbe:	de b7       	in	r29, 0x3e	; 62
     bc0:	8c e4       	ldi	r24, 0x4C	; 76
     bc2:	90 e0       	ldi	r25, 0x00	; 0
     bc4:	2c e4       	ldi	r18, 0x4C	; 76
     bc6:	30 e0       	ldi	r19, 0x00	; 0
     bc8:	f9 01       	movw	r30, r18
     bca:	20 81       	ld	r18, Z
     bcc:	2f 7b       	andi	r18, 0xBF	; 191
     bce:	fc 01       	movw	r30, r24
     bd0:	20 83       	st	Z, r18
     bd2:	84 e6       	ldi	r24, 0x64	; 100
     bd4:	90 e0       	ldi	r25, 0x00	; 0
     bd6:	24 e6       	ldi	r18, 0x64	; 100
     bd8:	30 e0       	ldi	r19, 0x00	; 0
     bda:	f9 01       	movw	r30, r18
     bdc:	20 81       	ld	r18, Z
     bde:	2d 7f       	andi	r18, 0xFD	; 253
     be0:	fc 01       	movw	r30, r24
     be2:	20 83       	st	Z, r18
     be4:	8a e2       	ldi	r24, 0x2A	; 42
     be6:	90 e0       	ldi	r25, 0x00	; 0
     be8:	2a e2       	ldi	r18, 0x2A	; 42
     bea:	30 e0       	ldi	r19, 0x00	; 0
     bec:	f9 01       	movw	r30, r18
     bee:	20 81       	ld	r18, Z
     bf0:	22 60       	ori	r18, 0x02	; 2
     bf2:	fc 01       	movw	r30, r24
     bf4:	20 83       	st	Z, r18
     bf6:	8a e2       	ldi	r24, 0x2A	; 42
     bf8:	90 e0       	ldi	r25, 0x00	; 0
     bfa:	2a e2       	ldi	r18, 0x2A	; 42
     bfc:	30 e0       	ldi	r19, 0x00	; 0
     bfe:	f9 01       	movw	r30, r18
     c00:	20 81       	ld	r18, Z
     c02:	2e 7f       	andi	r18, 0xFE	; 254
     c04:	fc 01       	movw	r30, r24
     c06:	20 83       	st	Z, r18
     c08:	85 ec       	ldi	r24, 0xC5	; 197
     c0a:	90 e0       	ldi	r25, 0x00	; 0
     c0c:	fc 01       	movw	r30, r24
     c0e:	10 82       	st	Z, r1
     c10:	84 ec       	ldi	r24, 0xC4	; 196
     c12:	90 e0       	ldi	r25, 0x00	; 0
     c14:	27 e6       	ldi	r18, 0x67	; 103
     c16:	fc 01       	movw	r30, r24
     c18:	20 83       	st	Z, r18
     c1a:	81 ec       	ldi	r24, 0xC1	; 193
     c1c:	90 e0       	ldi	r25, 0x00	; 0
     c1e:	21 ec       	ldi	r18, 0xC1	; 193
     c20:	30 e0       	ldi	r19, 0x00	; 0
     c22:	f9 01       	movw	r30, r18
     c24:	20 81       	ld	r18, Z
     c26:	28 69       	ori	r18, 0x98	; 152
     c28:	fc 01       	movw	r30, r24
     c2a:	20 83       	st	Z, r18
     c2c:	82 ec       	ldi	r24, 0xC2	; 194
     c2e:	90 e0       	ldi	r25, 0x00	; 0
     c30:	22 ec       	ldi	r18, 0xC2	; 194
     c32:	30 e0       	ldi	r19, 0x00	; 0
     c34:	f9 01       	movw	r30, r18
     c36:	20 81       	ld	r18, Z
     c38:	26 60       	ori	r18, 0x06	; 6
     c3a:	fc 01       	movw	r30, r24
     c3c:	20 83       	st	Z, r18
     c3e:	82 ec       	ldi	r24, 0xC2	; 194
     c40:	90 e0       	ldi	r25, 0x00	; 0
     c42:	22 ec       	ldi	r18, 0xC2	; 194
     c44:	30 e0       	ldi	r19, 0x00	; 0
     c46:	f9 01       	movw	r30, r18
     c48:	20 81       	ld	r18, Z
     c4a:	2f 73       	andi	r18, 0x3F	; 63
     c4c:	fc 01       	movw	r30, r24
     c4e:	20 83       	st	Z, r18
     c50:	00 00       	nop
     c52:	df 91       	pop	r29
     c54:	cf 91       	pop	r28
     c56:	08 95       	ret

00000c58 <uart0_transmit>:
     c58:	cf 93       	push	r28
     c5a:	df 93       	push	r29
     c5c:	1f 92       	push	r1
     c5e:	cd b7       	in	r28, 0x3d	; 61
     c60:	de b7       	in	r29, 0x3e	; 62
     c62:	89 83       	std	Y+1, r24	; 0x01
     c64:	00 00       	nop
     c66:	80 ec       	ldi	r24, 0xC0	; 192
     c68:	90 e0       	ldi	r25, 0x00	; 0
     c6a:	fc 01       	movw	r30, r24
     c6c:	80 81       	ld	r24, Z
     c6e:	88 2f       	mov	r24, r24
     c70:	90 e0       	ldi	r25, 0x00	; 0
     c72:	80 72       	andi	r24, 0x20	; 32
     c74:	99 27       	eor	r25, r25
     c76:	89 2b       	or	r24, r25
     c78:	b1 f3       	breq	.-20     	; 0xc66 <uart0_transmit+0xe>
     c7a:	86 ec       	ldi	r24, 0xC6	; 198
     c7c:	90 e0       	ldi	r25, 0x00	; 0
     c7e:	29 81       	ldd	r18, Y+1	; 0x01
     c80:	fc 01       	movw	r30, r24
     c82:	20 83       	st	Z, r18
     c84:	00 00       	nop
     c86:	0f 90       	pop	r0
     c88:	df 91       	pop	r29
     c8a:	cf 91       	pop	r28
     c8c:	08 95       	ret

00000c8e <uart1_putchar>:
     c8e:	cf 93       	push	r28
     c90:	df 93       	push	r29
     c92:	00 d0       	rcall	.+0      	; 0xc94 <uart1_putchar+0x6>
     c94:	1f 92       	push	r1
     c96:	cd b7       	in	r28, 0x3d	; 61
     c98:	de b7       	in	r29, 0x3e	; 62
     c9a:	89 83       	std	Y+1, r24	; 0x01
     c9c:	7b 83       	std	Y+3, r23	; 0x03
     c9e:	6a 83       	std	Y+2, r22	; 0x02
     ca0:	00 00       	nop
     ca2:	88 ec       	ldi	r24, 0xC8	; 200
     ca4:	90 e0       	ldi	r25, 0x00	; 0
     ca6:	fc 01       	movw	r30, r24
     ca8:	80 81       	ld	r24, Z
     caa:	88 2f       	mov	r24, r24
     cac:	90 e0       	ldi	r25, 0x00	; 0
     cae:	80 72       	andi	r24, 0x20	; 32
     cb0:	99 27       	eor	r25, r25
     cb2:	89 2b       	or	r24, r25
     cb4:	b1 f3       	breq	.-20     	; 0xca2 <uart1_putchar+0x14>
     cb6:	8e ec       	ldi	r24, 0xCE	; 206
     cb8:	90 e0       	ldi	r25, 0x00	; 0
     cba:	29 81       	ldd	r18, Y+1	; 0x01
     cbc:	fc 01       	movw	r30, r24
     cbe:	20 83       	st	Z, r18
     cc0:	80 e0       	ldi	r24, 0x00	; 0
     cc2:	90 e0       	ldi	r25, 0x00	; 0
     cc4:	0f 90       	pop	r0
     cc6:	0f 90       	pop	r0
     cc8:	0f 90       	pop	r0
     cca:	df 91       	pop	r29
     ccc:	cf 91       	pop	r28
     cce:	08 95       	ret

00000cd0 <init_printf>:
     cd0:	cf 93       	push	r28
     cd2:	df 93       	push	r29
     cd4:	cd b7       	in	r28, 0x3d	; 61
     cd6:	de b7       	in	r29, 0x3e	; 62
     cd8:	80 e0       	ldi	r24, 0x00	; 0
     cda:	91 e0       	ldi	r25, 0x01	; 1
     cdc:	90 93 a5 05 	sts	0x05A5, r25	; 0x8005a5 <__iob+0x3>
     ce0:	80 93 a4 05 	sts	0x05A4, r24	; 0x8005a4 <__iob+0x2>
     ce4:	00 00       	nop
     ce6:	df 91       	pop	r29
     ce8:	cf 91       	pop	r28
     cea:	08 95       	ret

00000cec <uart1_init>:
     cec:	cf 93       	push	r28
     cee:	df 93       	push	r29
     cf0:	cd b7       	in	r28, 0x3d	; 61
     cf2:	de b7       	in	r29, 0x3e	; 62
     cf4:	8d ec       	ldi	r24, 0xCD	; 205
     cf6:	90 e0       	ldi	r25, 0x00	; 0
     cf8:	fc 01       	movw	r30, r24
     cfa:	10 82       	st	Z, r1
     cfc:	8c ec       	ldi	r24, 0xCC	; 204
     cfe:	90 e0       	ldi	r25, 0x00	; 0
     d00:	27 e6       	ldi	r18, 0x67	; 103
     d02:	fc 01       	movw	r30, r24
     d04:	20 83       	st	Z, r18
     d06:	89 ec       	ldi	r24, 0xC9	; 201
     d08:	90 e0       	ldi	r25, 0x00	; 0
     d0a:	29 ec       	ldi	r18, 0xC9	; 201
     d0c:	30 e0       	ldi	r19, 0x00	; 0
     d0e:	f9 01       	movw	r30, r18
     d10:	20 81       	ld	r18, Z
     d12:	28 61       	ori	r18, 0x18	; 24
     d14:	fc 01       	movw	r30, r24
     d16:	20 83       	st	Z, r18
     d18:	8a ec       	ldi	r24, 0xCA	; 202
     d1a:	90 e0       	ldi	r25, 0x00	; 0
     d1c:	2a ec       	ldi	r18, 0xCA	; 202
     d1e:	30 e0       	ldi	r19, 0x00	; 0
     d20:	f9 01       	movw	r30, r18
     d22:	20 81       	ld	r18, Z
     d24:	26 60       	ori	r18, 0x06	; 6
     d26:	fc 01       	movw	r30, r24
     d28:	20 83       	st	Z, r18
     d2a:	00 00       	nop
     d2c:	df 91       	pop	r29
     d2e:	cf 91       	pop	r28
     d30:	08 95       	ret

00000d32 <HM10_transmit>:
     d32:	cf 93       	push	r28
     d34:	df 93       	push	r29
     d36:	00 d0       	rcall	.+0      	; 0xd38 <HM10_transmit+0x6>
     d38:	cd b7       	in	r28, 0x3d	; 61
     d3a:	de b7       	in	r29, 0x3e	; 62
     d3c:	9a 83       	std	Y+2, r25	; 0x02
     d3e:	89 83       	std	Y+1, r24	; 0x01
     d40:	83 e4       	ldi	r24, 0x43	; 67
     d42:	93 e0       	ldi	r25, 0x03	; 3
     d44:	89 2f       	mov	r24, r25
     d46:	8f 93       	push	r24
     d48:	83 e4       	ldi	r24, 0x43	; 67
     d4a:	93 e0       	ldi	r25, 0x03	; 3
     d4c:	8f 93       	push	r24
     d4e:	0e 94 6d 1e 	call	0x3cda	; 0x3cda <printf>
     d52:	0f 90       	pop	r0
     d54:	0f 90       	pop	r0
     d56:	13 c0       	rjmp	.+38     	; 0xd7e <HM10_transmit+0x4c>
     d58:	89 81       	ldd	r24, Y+1	; 0x01
     d5a:	9a 81       	ldd	r25, Y+2	; 0x02
     d5c:	fc 01       	movw	r30, r24
     d5e:	80 81       	ld	r24, Z
     d60:	88 2f       	mov	r24, r24
     d62:	90 e0       	ldi	r25, 0x00	; 0
     d64:	0e 94 83 1e 	call	0x3d06	; 0x3d06 <putchar>
     d68:	89 81       	ldd	r24, Y+1	; 0x01
     d6a:	9a 81       	ldd	r25, Y+2	; 0x02
     d6c:	9c 01       	movw	r18, r24
     d6e:	2f 5f       	subi	r18, 0xFF	; 255
     d70:	3f 4f       	sbci	r19, 0xFF	; 255
     d72:	3a 83       	std	Y+2, r19	; 0x02
     d74:	29 83       	std	Y+1, r18	; 0x01
     d76:	fc 01       	movw	r30, r24
     d78:	80 81       	ld	r24, Z
     d7a:	0e 94 2c 06 	call	0xc58	; 0xc58 <uart0_transmit>
     d7e:	89 81       	ldd	r24, Y+1	; 0x01
     d80:	9a 81       	ldd	r25, Y+2	; 0x02
     d82:	fc 01       	movw	r30, r24
     d84:	80 81       	ld	r24, Z
     d86:	88 23       	and	r24, r24
     d88:	39 f7       	brne	.-50     	; 0xd58 <HM10_transmit+0x26>
     d8a:	89 e4       	ldi	r24, 0x49	; 73
     d8c:	93 e0       	ldi	r25, 0x03	; 3
     d8e:	0e 94 8a 1e 	call	0x3d14	; 0x3d14 <puts>
     d92:	00 00       	nop
     d94:	0f 90       	pop	r0
     d96:	0f 90       	pop	r0
     d98:	df 91       	pop	r29
     d9a:	cf 91       	pop	r28
     d9c:	08 95       	ret

00000d9e <HM10_clear_response_buffer>:
     d9e:	cf 93       	push	r28
     da0:	df 93       	push	r29
     da2:	cd b7       	in	r28, 0x3d	; 61
     da4:	de b7       	in	r29, 0x3e	; 62
     da6:	40 e4       	ldi	r20, 0x40	; 64
     da8:	50 e0       	ldi	r21, 0x00	; 0
     daa:	60 e0       	ldi	r22, 0x00	; 0
     dac:	70 e0       	ldi	r23, 0x00	; 0
     dae:	8a e3       	ldi	r24, 0x3A	; 58
     db0:	95 e0       	ldi	r25, 0x05	; 5
     db2:	0e 94 1f 1e 	call	0x3c3e	; 0x3c3e <memset>
     db6:	10 92 2e 05 	sts	0x052E, r1	; 0x80052e <__data_end>
     dba:	00 00       	nop
     dbc:	df 91       	pop	r29
     dbe:	cf 91       	pop	r28
     dc0:	08 95       	ret

00000dc2 <HM10_print_response_buffer>:
     dc2:	cf 93       	push	r28
     dc4:	df 93       	push	r29
     dc6:	00 d0       	rcall	.+0      	; 0xdc8 <HM10_print_response_buffer+0x6>
     dc8:	cd b7       	in	r28, 0x3d	; 61
     dca:	de b7       	in	r29, 0x3e	; 62
     dcc:	82 e5       	ldi	r24, 0x52	; 82
     dce:	93 e0       	ldi	r25, 0x03	; 3
     dd0:	89 2f       	mov	r24, r25
     dd2:	8f 93       	push	r24
     dd4:	82 e5       	ldi	r24, 0x52	; 82
     dd6:	93 e0       	ldi	r25, 0x03	; 3
     dd8:	8f 93       	push	r24
     dda:	0e 94 6d 1e 	call	0x3cda	; 0x3cda <printf>
     dde:	0f 90       	pop	r0
     de0:	0f 90       	pop	r0
     de2:	1a 82       	std	Y+2, r1	; 0x02
     de4:	19 82       	std	Y+1, r1	; 0x01
     de6:	17 c0       	rjmp	.+46     	; 0xe16 <HM10_print_response_buffer+0x54>
     de8:	89 81       	ldd	r24, Y+1	; 0x01
     dea:	9a 81       	ldd	r25, Y+2	; 0x02
     dec:	86 5c       	subi	r24, 0xC6	; 198
     dee:	9a 4f       	sbci	r25, 0xFA	; 250
     df0:	fc 01       	movw	r30, r24
     df2:	80 81       	ld	r24, Z
     df4:	88 23       	and	r24, r24
     df6:	51 f0       	breq	.+20     	; 0xe0c <HM10_print_response_buffer+0x4a>
     df8:	89 81       	ldd	r24, Y+1	; 0x01
     dfa:	9a 81       	ldd	r25, Y+2	; 0x02
     dfc:	86 5c       	subi	r24, 0xC6	; 198
     dfe:	9a 4f       	sbci	r25, 0xFA	; 250
     e00:	fc 01       	movw	r30, r24
     e02:	80 81       	ld	r24, Z
     e04:	88 2f       	mov	r24, r24
     e06:	90 e0       	ldi	r25, 0x00	; 0
     e08:	0e 94 83 1e 	call	0x3d06	; 0x3d06 <putchar>
     e0c:	89 81       	ldd	r24, Y+1	; 0x01
     e0e:	9a 81       	ldd	r25, Y+2	; 0x02
     e10:	01 96       	adiw	r24, 0x01	; 1
     e12:	9a 83       	std	Y+2, r25	; 0x02
     e14:	89 83       	std	Y+1, r24	; 0x01
     e16:	89 81       	ldd	r24, Y+1	; 0x01
     e18:	9a 81       	ldd	r25, Y+2	; 0x02
     e1a:	80 34       	cpi	r24, 0x40	; 64
     e1c:	91 05       	cpc	r25, r1
     e1e:	20 f3       	brcs	.-56     	; 0xde8 <HM10_print_response_buffer+0x26>
     e20:	82 e6       	ldi	r24, 0x62	; 98
     e22:	93 e0       	ldi	r25, 0x03	; 3
     e24:	0e 94 8a 1e 	call	0x3d14	; 0x3d14 <puts>
     e28:	00 00       	nop
     e2a:	0f 90       	pop	r0
     e2c:	0f 90       	pop	r0
     e2e:	df 91       	pop	r29
     e30:	cf 91       	pop	r28
     e32:	08 95       	ret

00000e34 <sps30_init>:
     e34:	cf 93       	push	r28
     e36:	df 93       	push	r29
     e38:	cd b7       	in	r28, 0x3d	; 61
     e3a:	de b7       	in	r29, 0x3e	; 62
     e3c:	a4 97       	sbiw	r28, 0x24	; 36
     e3e:	0f b6       	in	r0, 0x3f	; 63
     e40:	f8 94       	cli
     e42:	de bf       	out	0x3e, r29	; 62
     e44:	0f be       	out	0x3f, r0	; 63
     e46:	cd bf       	out	0x3d, r28	; 61
     e48:	81 e9       	ldi	r24, 0x91	; 145
     e4a:	93 e0       	ldi	r25, 0x03	; 3
     e4c:	0e 94 8a 1e 	call	0x3d14	; 0x3d14 <puts>
     e50:	0a c0       	rjmp	.+20     	; 0xe66 <sps30_init+0x32>
     e52:	89 ea       	ldi	r24, 0xA9	; 169
     e54:	93 e0       	ldi	r25, 0x03	; 3
     e56:	0e 94 8a 1e 	call	0x3d14	; 0x3d14 <puts>
     e5a:	60 e4       	ldi	r22, 0x40	; 64
     e5c:	72 e4       	ldi	r23, 0x42	; 66
     e5e:	8f e0       	ldi	r24, 0x0F	; 15
     e60:	90 e0       	ldi	r25, 0x00	; 0
     e62:	0e 94 d8 0e 	call	0x1db0	; 0x1db0 <sensirion_sleep_usec>
     e66:	0e 94 e4 0c 	call	0x19c8	; 0x19c8 <sps30_probe>
     e6a:	89 2b       	or	r24, r25
     e6c:	91 f7       	brne	.-28     	; 0xe52 <sps30_init+0x1e>
     e6e:	83 ec       	ldi	r24, 0xC3	; 195
     e70:	93 e0       	ldi	r25, 0x03	; 3
     e72:	0e 94 8a 1e 	call	0x3d14	; 0x3d14 <puts>
     e76:	9e 01       	movw	r18, r28
     e78:	2c 5f       	subi	r18, 0xFC	; 252
     e7a:	3f 4f       	sbci	r19, 0xFF	; 255
     e7c:	ce 01       	movw	r24, r28
     e7e:	03 96       	adiw	r24, 0x03	; 3
     e80:	b9 01       	movw	r22, r18
     e82:	0e 94 fd 0c 	call	0x19fa	; 0x19fa <sps30_read_firmware_version>
     e86:	9a 83       	std	Y+2, r25	; 0x02
     e88:	89 83       	std	Y+1, r24	; 0x01
     e8a:	89 81       	ldd	r24, Y+1	; 0x01
     e8c:	9a 81       	ldd	r25, Y+2	; 0x02
     e8e:	89 2b       	or	r24, r25
     e90:	29 f0       	breq	.+10     	; 0xe9c <sps30_init+0x68>
     e92:	81 ee       	ldi	r24, 0xE1	; 225
     e94:	93 e0       	ldi	r25, 0x03	; 3
     e96:	0e 94 8a 1e 	call	0x3d14	; 0x3d14 <puts>
     e9a:	1b c0       	rjmp	.+54     	; 0xed2 <sps30_init+0x9e>
     e9c:	8c 81       	ldd	r24, Y+4	; 0x04
     e9e:	28 2f       	mov	r18, r24
     ea0:	30 e0       	ldi	r19, 0x00	; 0
     ea2:	8b 81       	ldd	r24, Y+3	; 0x03
     ea4:	88 2f       	mov	r24, r24
     ea6:	90 e0       	ldi	r25, 0x00	; 0
     ea8:	43 2f       	mov	r20, r19
     eaa:	4f 93       	push	r20
     eac:	2f 93       	push	r18
     eae:	29 2f       	mov	r18, r25
     eb0:	2f 93       	push	r18
     eb2:	8f 93       	push	r24
     eb4:	80 e0       	ldi	r24, 0x00	; 0
     eb6:	94 e0       	ldi	r25, 0x04	; 4
     eb8:	89 2f       	mov	r24, r25
     eba:	8f 93       	push	r24
     ebc:	80 e0       	ldi	r24, 0x00	; 0
     ebe:	94 e0       	ldi	r25, 0x04	; 4
     ec0:	8f 93       	push	r24
     ec2:	0e 94 6d 1e 	call	0x3cda	; 0x3cda <printf>
     ec6:	0f 90       	pop	r0
     ec8:	0f 90       	pop	r0
     eca:	0f 90       	pop	r0
     ecc:	0f 90       	pop	r0
     ece:	0f 90       	pop	r0
     ed0:	0f 90       	pop	r0
     ed2:	ce 01       	movw	r24, r28
     ed4:	05 96       	adiw	r24, 0x05	; 5
     ed6:	0e 94 32 0d 	call	0x1a64	; 0x1a64 <sps30_get_serial>
     eda:	9a 83       	std	Y+2, r25	; 0x02
     edc:	89 83       	std	Y+1, r24	; 0x01
     ede:	89 81       	ldd	r24, Y+1	; 0x01
     ee0:	9a 81       	ldd	r25, Y+2	; 0x02
     ee2:	89 2b       	or	r24, r25
     ee4:	29 f0       	breq	.+10     	; 0xef0 <sps30_init+0xbc>
     ee6:	8b e0       	ldi	r24, 0x0B	; 11
     ee8:	94 e0       	ldi	r25, 0x04	; 4
     eea:	0e 94 8a 1e 	call	0x3d14	; 0x3d14 <puts>
     eee:	12 c0       	rjmp	.+36     	; 0xf14 <sps30_init+0xe0>
     ef0:	ce 01       	movw	r24, r28
     ef2:	05 96       	adiw	r24, 0x05	; 5
     ef4:	29 2f       	mov	r18, r25
     ef6:	2f 93       	push	r18
     ef8:	8f 93       	push	r24
     efa:	87 e2       	ldi	r24, 0x27	; 39
     efc:	94 e0       	ldi	r25, 0x04	; 4
     efe:	89 2f       	mov	r24, r25
     f00:	8f 93       	push	r24
     f02:	87 e2       	ldi	r24, 0x27	; 39
     f04:	94 e0       	ldi	r25, 0x04	; 4
     f06:	8f 93       	push	r24
     f08:	0e 94 6d 1e 	call	0x3cda	; 0x3cda <printf>
     f0c:	0f 90       	pop	r0
     f0e:	0f 90       	pop	r0
     f10:	0f 90       	pop	r0
     f12:	0f 90       	pop	r0
     f14:	42 e0       	ldi	r20, 0x02	; 2
     f16:	50 e0       	ldi	r21, 0x00	; 0
     f18:	67 e0       	ldi	r22, 0x07	; 7
     f1a:	76 e5       	ldi	r23, 0x56	; 86
     f1c:	89 e6       	ldi	r24, 0x69	; 105
     f1e:	0e 94 af 0e 	call	0x1d5e	; 0x1d5e <sensirion_i2c_write>
     f22:	08 2e       	mov	r0, r24
     f24:	00 0c       	add	r0, r0
     f26:	99 0b       	sbc	r25, r25
     f28:	9a 83       	std	Y+2, r25	; 0x02
     f2a:	89 83       	std	Y+1, r24	; 0x01
     f2c:	89 81       	ldd	r24, Y+1	; 0x01
     f2e:	9a 81       	ldd	r25, Y+2	; 0x02
     f30:	89 2b       	or	r24, r25
     f32:	29 f0       	breq	.+10     	; 0xf3e <sps30_init+0x10a>
     f34:	8a e3       	ldi	r24, 0x3A	; 58
     f36:	94 e0       	ldi	r25, 0x04	; 4
     f38:	0e 94 8a 1e 	call	0x3d14	; 0x3d14 <puts>
     f3c:	04 c0       	rjmp	.+8      	; 0xf46 <sps30_init+0x112>
     f3e:	88 e5       	ldi	r24, 0x58	; 88
     f40:	94 e0       	ldi	r25, 0x04	; 4
     f42:	0e 94 8a 1e 	call	0x3d14	; 0x3d14 <puts>
     f46:	00 00       	nop
     f48:	a4 96       	adiw	r28, 0x24	; 36
     f4a:	0f b6       	in	r0, 0x3f	; 63
     f4c:	f8 94       	cli
     f4e:	de bf       	out	0x3e, r29	; 62
     f50:	0f be       	out	0x3f, r0	; 63
     f52:	cd bf       	out	0x3d, r28	; 61
     f54:	df 91       	pop	r29
     f56:	cf 91       	pop	r28
     f58:	08 95       	ret

00000f5a <ADC_init>:
     f5a:	cf 93       	push	r28
     f5c:	df 93       	push	r29
     f5e:	cd b7       	in	r28, 0x3d	; 61
     f60:	de b7       	in	r29, 0x3e	; 62
     f62:	8a e7       	ldi	r24, 0x7A	; 122
     f64:	90 e0       	ldi	r25, 0x00	; 0
     f66:	2a e7       	ldi	r18, 0x7A	; 122
     f68:	30 e0       	ldi	r19, 0x00	; 0
     f6a:	f9 01       	movw	r30, r18
     f6c:	20 81       	ld	r18, Z
     f6e:	20 68       	ori	r18, 0x80	; 128
     f70:	fc 01       	movw	r30, r24
     f72:	20 83       	st	Z, r18
     f74:	8c e7       	ldi	r24, 0x7C	; 124
     f76:	90 e0       	ldi	r25, 0x00	; 0
     f78:	23 e4       	ldi	r18, 0x43	; 67
     f7a:	fc 01       	movw	r30, r24
     f7c:	20 83       	st	Z, r18
     f7e:	8a e7       	ldi	r24, 0x7A	; 122
     f80:	90 e0       	ldi	r25, 0x00	; 0
     f82:	2a e7       	ldi	r18, 0x7A	; 122
     f84:	30 e0       	ldi	r19, 0x00	; 0
     f86:	f9 01       	movw	r30, r18
     f88:	20 81       	ld	r18, Z
     f8a:	27 60       	ori	r18, 0x07	; 7
     f8c:	fc 01       	movw	r30, r24
     f8e:	20 83       	st	Z, r18
     f90:	87 e2       	ldi	r24, 0x27	; 39
     f92:	90 e0       	ldi	r25, 0x00	; 0
     f94:	27 e2       	ldi	r18, 0x27	; 39
     f96:	30 e0       	ldi	r19, 0x00	; 0
     f98:	f9 01       	movw	r30, r18
     f9a:	20 81       	ld	r18, Z
     f9c:	27 7f       	andi	r18, 0xF7	; 247
     f9e:	fc 01       	movw	r30, r24
     fa0:	20 83       	st	Z, r18
     fa2:	00 00       	nop
     fa4:	df 91       	pop	r29
     fa6:	cf 91       	pop	r28
     fa8:	08 95       	ret

00000faa <ADC_disable>:
     faa:	cf 93       	push	r28
     fac:	df 93       	push	r29
     fae:	cd b7       	in	r28, 0x3d	; 61
     fb0:	de b7       	in	r29, 0x3e	; 62
     fb2:	8a e7       	ldi	r24, 0x7A	; 122
     fb4:	90 e0       	ldi	r25, 0x00	; 0
     fb6:	2a e7       	ldi	r18, 0x7A	; 122
     fb8:	30 e0       	ldi	r19, 0x00	; 0
     fba:	f9 01       	movw	r30, r18
     fbc:	20 81       	ld	r18, Z
     fbe:	2f 77       	andi	r18, 0x7F	; 127
     fc0:	fc 01       	movw	r30, r24
     fc2:	20 83       	st	Z, r18
     fc4:	00 00       	nop
     fc6:	df 91       	pop	r29
     fc8:	cf 91       	pop	r28
     fca:	08 95       	ret

00000fcc <ADC_Read>:
     fcc:	cf 93       	push	r28
     fce:	df 93       	push	r29
     fd0:	00 d0       	rcall	.+0      	; 0xfd2 <ADC_Read+0x6>
     fd2:	cd b7       	in	r28, 0x3d	; 61
     fd4:	de b7       	in	r29, 0x3e	; 62
     fd6:	1a 82       	std	Y+2, r1	; 0x02
     fd8:	19 82       	std	Y+1, r1	; 0x01
     fda:	8a e7       	ldi	r24, 0x7A	; 122
     fdc:	90 e0       	ldi	r25, 0x00	; 0
     fde:	2a e7       	ldi	r18, 0x7A	; 122
     fe0:	30 e0       	ldi	r19, 0x00	; 0
     fe2:	f9 01       	movw	r30, r18
     fe4:	20 81       	ld	r18, Z
     fe6:	20 64       	ori	r18, 0x40	; 64
     fe8:	fc 01       	movw	r30, r24
     fea:	20 83       	st	Z, r18
     fec:	00 00       	nop
     fee:	8a e7       	ldi	r24, 0x7A	; 122
     ff0:	90 e0       	ldi	r25, 0x00	; 0
     ff2:	fc 01       	movw	r30, r24
     ff4:	80 81       	ld	r24, Z
     ff6:	88 2f       	mov	r24, r24
     ff8:	90 e0       	ldi	r25, 0x00	; 0
     ffa:	80 74       	andi	r24, 0x40	; 64
     ffc:	99 27       	eor	r25, r25
     ffe:	89 2b       	or	r24, r25
    1000:	b1 f7       	brne	.-20     	; 0xfee <ADC_Read+0x22>
    1002:	88 e7       	ldi	r24, 0x78	; 120
    1004:	90 e0       	ldi	r25, 0x00	; 0
    1006:	fc 01       	movw	r30, r24
    1008:	80 81       	ld	r24, Z
    100a:	88 2f       	mov	r24, r24
    100c:	90 e0       	ldi	r25, 0x00	; 0
    100e:	29 81       	ldd	r18, Y+1	; 0x01
    1010:	3a 81       	ldd	r19, Y+2	; 0x02
    1012:	82 2b       	or	r24, r18
    1014:	93 2b       	or	r25, r19
    1016:	9a 83       	std	Y+2, r25	; 0x02
    1018:	89 83       	std	Y+1, r24	; 0x01
    101a:	89 e7       	ldi	r24, 0x79	; 121
    101c:	90 e0       	ldi	r25, 0x00	; 0
    101e:	fc 01       	movw	r30, r24
    1020:	80 81       	ld	r24, Z
    1022:	88 2f       	mov	r24, r24
    1024:	90 e0       	ldi	r25, 0x00	; 0
    1026:	98 2f       	mov	r25, r24
    1028:	88 27       	eor	r24, r24
    102a:	9c 01       	movw	r18, r24
    102c:	89 81       	ldd	r24, Y+1	; 0x01
    102e:	9a 81       	ldd	r25, Y+2	; 0x02
    1030:	82 2b       	or	r24, r18
    1032:	93 2b       	or	r25, r19
    1034:	9a 83       	std	Y+2, r25	; 0x02
    1036:	89 83       	std	Y+1, r24	; 0x01
    1038:	89 81       	ldd	r24, Y+1	; 0x01
    103a:	9a 81       	ldd	r25, Y+2	; 0x02
    103c:	0f 90       	pop	r0
    103e:	0f 90       	pop	r0
    1040:	df 91       	pop	r29
    1042:	cf 91       	pop	r28
    1044:	08 95       	ret

00001046 <convert_ADC_to_pressure>:
    1046:	cf 93       	push	r28
    1048:	df 93       	push	r29
    104a:	cd b7       	in	r28, 0x3d	; 61
    104c:	de b7       	in	r29, 0x3e	; 62
    104e:	ca 50       	subi	r28, 0x0A	; 10
    1050:	d1 40       	sbci	r29, 0x01	; 1
    1052:	0f b6       	in	r0, 0x3f	; 63
    1054:	f8 94       	cli
    1056:	de bf       	out	0x3e, r29	; 62
    1058:	0f be       	out	0x3f, r0	; 63
    105a:	cd bf       	out	0x3d, r28	; 61
    105c:	9e 01       	movw	r18, r28
    105e:	27 5f       	subi	r18, 0xF7	; 247
    1060:	3e 4f       	sbci	r19, 0xFE	; 254
    1062:	f9 01       	movw	r30, r18
    1064:	91 83       	std	Z+1, r25	; 0x01
    1066:	80 83       	st	Z, r24
    1068:	ce 01       	movw	r24, r28
    106a:	87 5f       	subi	r24, 0xF7	; 247
    106c:	9e 4f       	sbci	r25, 0xFE	; 254
    106e:	fc 01       	movw	r30, r24
    1070:	80 81       	ld	r24, Z
    1072:	91 81       	ldd	r25, Z+1	; 0x01
    1074:	cc 01       	movw	r24, r24
    1076:	a0 e0       	ldi	r26, 0x00	; 0
    1078:	b0 e0       	ldi	r27, 0x00	; 0
    107a:	bc 01       	movw	r22, r24
    107c:	cd 01       	movw	r24, r26
    107e:	0e 94 4a 18 	call	0x3094	; 0x3094 <__floatunsisf>
    1082:	dc 01       	movw	r26, r24
    1084:	cb 01       	movw	r24, r22
    1086:	20 e0       	ldi	r18, 0x00	; 0
    1088:	30 ec       	ldi	r19, 0xC0	; 192
    108a:	4f e7       	ldi	r20, 0x7F	; 127
    108c:	54 e4       	ldi	r21, 0x44	; 68
    108e:	bc 01       	movw	r22, r24
    1090:	cd 01       	movw	r24, r26
    1092:	0e 94 a2 17 	call	0x2f44	; 0x2f44 <__divsf3>
    1096:	dc 01       	movw	r26, r24
    1098:	cb 01       	movw	r24, r22
    109a:	20 e0       	ldi	r18, 0x00	; 0
    109c:	30 e0       	ldi	r19, 0x00	; 0
    109e:	40 ea       	ldi	r20, 0xA0	; 160
    10a0:	50 e4       	ldi	r21, 0x40	; 64
    10a2:	bc 01       	movw	r22, r24
    10a4:	cd 01       	movw	r24, r26
    10a6:	0e 94 01 19 	call	0x3202	; 0x3202 <__mulsf3>
    10aa:	dc 01       	movw	r26, r24
    10ac:	cb 01       	movw	r24, r22
    10ae:	8d 83       	std	Y+5, r24	; 0x05
    10b0:	9e 83       	std	Y+6, r25	; 0x06
    10b2:	af 83       	std	Y+7, r26	; 0x07
    10b4:	b8 87       	std	Y+8, r27	; 0x08
    10b6:	20 e0       	ldi	r18, 0x00	; 0
    10b8:	30 e0       	ldi	r19, 0x00	; 0
    10ba:	40 e2       	ldi	r20, 0x20	; 32
    10bc:	50 e4       	ldi	r21, 0x40	; 64
    10be:	6d 81       	ldd	r22, Y+5	; 0x05
    10c0:	7e 81       	ldd	r23, Y+6	; 0x06
    10c2:	8f 81       	ldd	r24, Y+7	; 0x07
    10c4:	98 85       	ldd	r25, Y+8	; 0x08
    10c6:	0e 94 30 17 	call	0x2e60	; 0x2e60 <__subsf3>
    10ca:	dc 01       	movw	r26, r24
    10cc:	cb 01       	movw	r24, r22
    10ce:	2d ec       	ldi	r18, 0xCD	; 205
    10d0:	3c ec       	ldi	r19, 0xCC	; 204
    10d2:	4c e4       	ldi	r20, 0x4C	; 76
    10d4:	5d e3       	ldi	r21, 0x3D	; 61
    10d6:	bc 01       	movw	r22, r24
    10d8:	cd 01       	movw	r24, r26
    10da:	0e 94 a2 17 	call	0x2f44	; 0x2f44 <__divsf3>
    10de:	dc 01       	movw	r26, r24
    10e0:	cb 01       	movw	r24, r22
    10e2:	89 83       	std	Y+1, r24	; 0x01
    10e4:	9a 83       	std	Y+2, r25	; 0x02
    10e6:	ab 83       	std	Y+3, r26	; 0x03
    10e8:	bc 83       	std	Y+4, r27	; 0x04
    10ea:	20 e0       	ldi	r18, 0x00	; 0
    10ec:	30 e0       	ldi	r19, 0x00	; 0
    10ee:	40 e2       	ldi	r20, 0x20	; 32
    10f0:	52 ec       	ldi	r21, 0xC2	; 194
    10f2:	69 81       	ldd	r22, Y+1	; 0x01
    10f4:	7a 81       	ldd	r23, Y+2	; 0x02
    10f6:	8b 81       	ldd	r24, Y+3	; 0x03
    10f8:	9c 81       	ldd	r25, Y+4	; 0x04
    10fa:	0e 94 9d 17 	call	0x2f3a	; 0x2f3a <__cmpsf2>
    10fe:	88 23       	and	r24, r24
    1100:	bc f4       	brge	.+46     	; 0x1130 <convert_ADC_to_pressure+0xea>
    1102:	80 e0       	ldi	r24, 0x00	; 0
    1104:	90 e0       	ldi	r25, 0x00	; 0
    1106:	a0 e2       	ldi	r26, 0x20	; 32
    1108:	b2 ec       	ldi	r27, 0xC2	; 194
    110a:	89 83       	std	Y+1, r24	; 0x01
    110c:	9a 83       	std	Y+2, r25	; 0x02
    110e:	ab 83       	std	Y+3, r26	; 0x03
    1110:	bc 83       	std	Y+4, r27	; 0x04
    1112:	ce 01       	movw	r24, r28
    1114:	09 96       	adiw	r24, 0x09	; 9
    1116:	2b e1       	ldi	r18, 0x1B	; 27
    1118:	e5 e6       	ldi	r30, 0x65	; 101
    111a:	f4 e0       	ldi	r31, 0x04	; 4
    111c:	dc 01       	movw	r26, r24
    111e:	01 90       	ld	r0, Z+
    1120:	0d 92       	st	X+, r0
    1122:	2a 95       	dec	r18
    1124:	e1 f7       	brne	.-8      	; 0x111e <convert_ADC_to_pressure+0xd8>
    1126:	ce 01       	movw	r24, r28
    1128:	09 96       	adiw	r24, 0x09	; 9
    112a:	0e 94 99 06 	call	0xd32	; 0xd32 <HM10_transmit>
    112e:	22 c0       	rjmp	.+68     	; 0x1174 <convert_ADC_to_pressure+0x12e>
    1130:	20 e0       	ldi	r18, 0x00	; 0
    1132:	30 e0       	ldi	r19, 0x00	; 0
    1134:	40 e2       	ldi	r20, 0x20	; 32
    1136:	52 e4       	ldi	r21, 0x42	; 66
    1138:	69 81       	ldd	r22, Y+1	; 0x01
    113a:	7a 81       	ldd	r23, Y+2	; 0x02
    113c:	8b 81       	ldd	r24, Y+3	; 0x03
    113e:	9c 81       	ldd	r25, Y+4	; 0x04
    1140:	0e 94 fc 18 	call	0x31f8	; 0x31f8 <__gesf2>
    1144:	18 16       	cp	r1, r24
    1146:	b4 f4       	brge	.+44     	; 0x1174 <convert_ADC_to_pressure+0x12e>
    1148:	80 e0       	ldi	r24, 0x00	; 0
    114a:	90 e0       	ldi	r25, 0x00	; 0
    114c:	a0 e2       	ldi	r26, 0x20	; 32
    114e:	b2 e4       	ldi	r27, 0x42	; 66
    1150:	89 83       	std	Y+1, r24	; 0x01
    1152:	9a 83       	std	Y+2, r25	; 0x02
    1154:	ab 83       	std	Y+3, r26	; 0x03
    1156:	bc 83       	std	Y+4, r27	; 0x04
    1158:	ce 01       	movw	r24, r28
    115a:	09 96       	adiw	r24, 0x09	; 9
    115c:	2b e1       	ldi	r18, 0x1B	; 27
    115e:	e0 e8       	ldi	r30, 0x80	; 128
    1160:	f4 e0       	ldi	r31, 0x04	; 4
    1162:	dc 01       	movw	r26, r24
    1164:	01 90       	ld	r0, Z+
    1166:	0d 92       	st	X+, r0
    1168:	2a 95       	dec	r18
    116a:	e1 f7       	brne	.-8      	; 0x1164 <convert_ADC_to_pressure+0x11e>
    116c:	ce 01       	movw	r24, r28
    116e:	09 96       	adiw	r24, 0x09	; 9
    1170:	0e 94 99 06 	call	0xd32	; 0xd32 <HM10_transmit>
    1174:	ce 01       	movw	r24, r28
    1176:	09 96       	adiw	r24, 0x09	; 9
    1178:	40 e0       	ldi	r20, 0x00	; 0
    117a:	51 e0       	ldi	r21, 0x01	; 1
    117c:	60 e0       	ldi	r22, 0x00	; 0
    117e:	70 e0       	ldi	r23, 0x00	; 0
    1180:	0e 94 1f 1e 	call	0x3c3e	; 0x3c3e <memset>
    1184:	89 81       	ldd	r24, Y+1	; 0x01
    1186:	9a 81       	ldd	r25, Y+2	; 0x02
    1188:	ab 81       	ldd	r26, Y+3	; 0x03
    118a:	bc 81       	ldd	r27, Y+4	; 0x04
    118c:	bc 01       	movw	r22, r24
    118e:	cd 01       	movw	r24, r26
    1190:	c6 5f       	subi	r28, 0xF6	; 246
    1192:	de 4f       	sbci	r29, 0xFE	; 254
    1194:	0f b6       	in	r0, 0x3f	; 63
    1196:	f8 94       	cli
    1198:	de bf       	out	0x3e, r29	; 62
    119a:	0f be       	out	0x3f, r0	; 63
    119c:	cd bf       	out	0x3d, r28	; 61
    119e:	df 91       	pop	r29
    11a0:	cf 91       	pop	r28
    11a2:	08 95       	ret

000011a4 <__vector_18>:

// ISR to handle USART1 rx from HM10
ISR(USART0_RX_vect)
{
    11a4:	1f 92       	push	r1
    11a6:	0f 92       	push	r0
    11a8:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    11ac:	0f 92       	push	r0
    11ae:	11 24       	eor	r1, r1
    11b0:	2f 93       	push	r18
    11b2:	3f 93       	push	r19
    11b4:	4f 93       	push	r20
    11b6:	5f 93       	push	r21
    11b8:	6f 93       	push	r22
    11ba:	7f 93       	push	r23
    11bc:	8f 93       	push	r24
    11be:	9f 93       	push	r25
    11c0:	af 93       	push	r26
    11c2:	bf 93       	push	r27
    11c4:	ef 93       	push	r30
    11c6:	ff 93       	push	r31
    11c8:	cf 93       	push	r28
    11ca:	df 93       	push	r29
    11cc:	1f 92       	push	r1
    11ce:	cd b7       	in	r28, 0x3d	; 61
    11d0:	de b7       	in	r29, 0x3e	; 62
	volatile char received_char = UDR0;
    11d2:	86 ec       	ldi	r24, 0xC6	; 198
    11d4:	90 e0       	ldi	r25, 0x00	; 0
    11d6:	fc 01       	movw	r30, r24
    11d8:	80 81       	ld	r24, Z
    11da:	89 83       	std	Y+1, r24	; 0x01
	printf("Received: %c\n", received_char); // <- this prints the char!
    11dc:	89 81       	ldd	r24, Y+1	; 0x01
    11de:	88 2f       	mov	r24, r24
    11e0:	90 e0       	ldi	r25, 0x00	; 0
    11e2:	29 2f       	mov	r18, r25
    11e4:	2f 93       	push	r18
    11e6:	8f 93       	push	r24
    11e8:	83 ea       	ldi	r24, 0xA3	; 163
    11ea:	94 e0       	ldi	r25, 0x04	; 4
    11ec:	89 2f       	mov	r24, r25
    11ee:	8f 93       	push	r24
    11f0:	83 ea       	ldi	r24, 0xA3	; 163
    11f2:	94 e0       	ldi	r25, 0x04	; 4
    11f4:	8f 93       	push	r24
    11f6:	0e 94 6d 1e 	call	0x3cda	; 0x3cda <printf>
    11fa:	0f 90       	pop	r0
    11fc:	0f 90       	pop	r0
    11fe:	0f 90       	pop	r0
    1200:	0f 90       	pop	r0

	// Ensure buffer does not overflow
	if (HM10_response_buffer_index < HM10_response_buffer_SIZE - 1)
    1202:	80 91 2e 05 	lds	r24, 0x052E	; 0x80052e <__data_end>
    1206:	8f 33       	cpi	r24, 0x3F	; 63
    1208:	78 f4       	brcc	.+30     	; 0x1228 <__vector_18+0x84>
	{
		HM10_response_buffer[HM10_response_buffer_index] = received_char;
    120a:	80 91 2e 05 	lds	r24, 0x052E	; 0x80052e <__data_end>
    120e:	88 2f       	mov	r24, r24
    1210:	90 e0       	ldi	r25, 0x00	; 0
    1212:	29 81       	ldd	r18, Y+1	; 0x01
    1214:	86 5c       	subi	r24, 0xC6	; 198
    1216:	9a 4f       	sbci	r25, 0xFA	; 250
    1218:	fc 01       	movw	r30, r24
    121a:	20 83       	st	Z, r18
		HM10_response_buffer_index++;
    121c:	80 91 2e 05 	lds	r24, 0x052E	; 0x80052e <__data_end>
    1220:	8f 5f       	subi	r24, 0xFF	; 255
    1222:	80 93 2e 05 	sts	0x052E, r24	; 0x80052e <__data_end>
		printf("Buffer full, clearing...\n");
		printf("Buffer content before clear: ");
		HM10_print_response_buffer();
		HM10_clear_response_buffer();
	}
    1226:	13 c0       	rjmp	.+38     	; 0x124e <__vector_18+0xaa>
		HM10_response_buffer[HM10_response_buffer_index] = received_char;
		HM10_response_buffer_index++;
	}
	else
	{
		printf("Buffer full, clearing...\n");
    1228:	81 eb       	ldi	r24, 0xB1	; 177
    122a:	94 e0       	ldi	r25, 0x04	; 4
    122c:	0e 94 8a 1e 	call	0x3d14	; 0x3d14 <puts>
		printf("Buffer content before clear: ");
    1230:	8a ec       	ldi	r24, 0xCA	; 202
    1232:	94 e0       	ldi	r25, 0x04	; 4
    1234:	89 2f       	mov	r24, r25
    1236:	8f 93       	push	r24
    1238:	8a ec       	ldi	r24, 0xCA	; 202
    123a:	94 e0       	ldi	r25, 0x04	; 4
    123c:	8f 93       	push	r24
    123e:	0e 94 6d 1e 	call	0x3cda	; 0x3cda <printf>
    1242:	0f 90       	pop	r0
    1244:	0f 90       	pop	r0
		HM10_print_response_buffer();
    1246:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <HM10_print_response_buffer>
		HM10_clear_response_buffer();
    124a:	0e 94 cf 06 	call	0xd9e	; 0xd9e <HM10_clear_response_buffer>
	}
    124e:	00 00       	nop
    1250:	0f 90       	pop	r0
    1252:	df 91       	pop	r29
    1254:	cf 91       	pop	r28
    1256:	ff 91       	pop	r31
    1258:	ef 91       	pop	r30
    125a:	bf 91       	pop	r27
    125c:	af 91       	pop	r26
    125e:	9f 91       	pop	r25
    1260:	8f 91       	pop	r24
    1262:	7f 91       	pop	r23
    1264:	6f 91       	pop	r22
    1266:	5f 91       	pop	r21
    1268:	4f 91       	pop	r20
    126a:	3f 91       	pop	r19
    126c:	2f 91       	pop	r18
    126e:	0f 90       	pop	r0
    1270:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    1274:	0f 90       	pop	r0
    1276:	1f 90       	pop	r1
    1278:	18 95       	reti

0000127a <sensirion_bytes_to_uint16_t>:
}

int16_t sensirion_i2c_general_call_reset(void) {
    const uint8_t data = 0x06;
    return sensirion_i2c_write(0, &data, (uint16_t)sizeof(data));
}
    127a:	cf 93       	push	r28
    127c:	df 93       	push	r29
    127e:	00 d0       	rcall	.+0      	; 0x1280 <sensirion_bytes_to_uint16_t+0x6>
    1280:	cd b7       	in	r28, 0x3d	; 61
    1282:	de b7       	in	r29, 0x3e	; 62
    1284:	9a 83       	std	Y+2, r25	; 0x02
    1286:	89 83       	std	Y+1, r24	; 0x01
    1288:	89 81       	ldd	r24, Y+1	; 0x01
    128a:	9a 81       	ldd	r25, Y+2	; 0x02
    128c:	fc 01       	movw	r30, r24
    128e:	80 81       	ld	r24, Z
    1290:	88 2f       	mov	r24, r24
    1292:	90 e0       	ldi	r25, 0x00	; 0
    1294:	38 2f       	mov	r19, r24
    1296:	22 27       	eor	r18, r18
    1298:	89 81       	ldd	r24, Y+1	; 0x01
    129a:	9a 81       	ldd	r25, Y+2	; 0x02
    129c:	01 96       	adiw	r24, 0x01	; 1
    129e:	fc 01       	movw	r30, r24
    12a0:	80 81       	ld	r24, Z
    12a2:	88 2f       	mov	r24, r24
    12a4:	90 e0       	ldi	r25, 0x00	; 0
    12a6:	82 2b       	or	r24, r18
    12a8:	93 2b       	or	r25, r19
    12aa:	0f 90       	pop	r0
    12ac:	0f 90       	pop	r0
    12ae:	df 91       	pop	r29
    12b0:	cf 91       	pop	r28
    12b2:	08 95       	ret

000012b4 <sensirion_bytes_to_uint32_t>:
    12b4:	cf 93       	push	r28
    12b6:	df 93       	push	r29
    12b8:	00 d0       	rcall	.+0      	; 0x12ba <sensirion_bytes_to_uint32_t+0x6>
    12ba:	cd b7       	in	r28, 0x3d	; 61
    12bc:	de b7       	in	r29, 0x3e	; 62
    12be:	9a 83       	std	Y+2, r25	; 0x02
    12c0:	89 83       	std	Y+1, r24	; 0x01
    12c2:	89 81       	ldd	r24, Y+1	; 0x01
    12c4:	9a 81       	ldd	r25, Y+2	; 0x02
    12c6:	fc 01       	movw	r30, r24
    12c8:	80 81       	ld	r24, Z
    12ca:	88 2f       	mov	r24, r24
    12cc:	90 e0       	ldi	r25, 0x00	; 0
    12ce:	a0 e0       	ldi	r26, 0x00	; 0
    12d0:	b0 e0       	ldi	r27, 0x00	; 0
    12d2:	58 2f       	mov	r21, r24
    12d4:	44 27       	eor	r20, r20
    12d6:	33 27       	eor	r19, r19
    12d8:	22 27       	eor	r18, r18
    12da:	89 81       	ldd	r24, Y+1	; 0x01
    12dc:	9a 81       	ldd	r25, Y+2	; 0x02
    12de:	01 96       	adiw	r24, 0x01	; 1
    12e0:	fc 01       	movw	r30, r24
    12e2:	80 81       	ld	r24, Z
    12e4:	88 2f       	mov	r24, r24
    12e6:	90 e0       	ldi	r25, 0x00	; 0
    12e8:	a0 e0       	ldi	r26, 0x00	; 0
    12ea:	b0 e0       	ldi	r27, 0x00	; 0
    12ec:	dc 01       	movw	r26, r24
    12ee:	99 27       	eor	r25, r25
    12f0:	88 27       	eor	r24, r24
    12f2:	28 2b       	or	r18, r24
    12f4:	39 2b       	or	r19, r25
    12f6:	4a 2b       	or	r20, r26
    12f8:	5b 2b       	or	r21, r27
    12fa:	89 81       	ldd	r24, Y+1	; 0x01
    12fc:	9a 81       	ldd	r25, Y+2	; 0x02
    12fe:	02 96       	adiw	r24, 0x02	; 2
    1300:	fc 01       	movw	r30, r24
    1302:	80 81       	ld	r24, Z
    1304:	88 2f       	mov	r24, r24
    1306:	90 e0       	ldi	r25, 0x00	; 0
    1308:	a0 e0       	ldi	r26, 0x00	; 0
    130a:	b0 e0       	ldi	r27, 0x00	; 0
    130c:	ba 2f       	mov	r27, r26
    130e:	a9 2f       	mov	r26, r25
    1310:	98 2f       	mov	r25, r24
    1312:	88 27       	eor	r24, r24
    1314:	28 2b       	or	r18, r24
    1316:	39 2b       	or	r19, r25
    1318:	4a 2b       	or	r20, r26
    131a:	5b 2b       	or	r21, r27
    131c:	89 81       	ldd	r24, Y+1	; 0x01
    131e:	9a 81       	ldd	r25, Y+2	; 0x02
    1320:	03 96       	adiw	r24, 0x03	; 3
    1322:	fc 01       	movw	r30, r24
    1324:	80 81       	ld	r24, Z
    1326:	88 2f       	mov	r24, r24
    1328:	90 e0       	ldi	r25, 0x00	; 0
    132a:	a0 e0       	ldi	r26, 0x00	; 0
    132c:	b0 e0       	ldi	r27, 0x00	; 0
    132e:	82 2b       	or	r24, r18
    1330:	93 2b       	or	r25, r19
    1332:	a4 2b       	or	r26, r20
    1334:	b5 2b       	or	r27, r21
    1336:	bc 01       	movw	r22, r24
    1338:	cd 01       	movw	r24, r26
    133a:	0f 90       	pop	r0
    133c:	0f 90       	pop	r0
    133e:	df 91       	pop	r29
    1340:	cf 91       	pop	r28
    1342:	08 95       	ret

00001344 <sensirion_bytes_to_float>:
    1344:	cf 93       	push	r28
    1346:	df 93       	push	r29
    1348:	00 d0       	rcall	.+0      	; 0x134a <sensirion_bytes_to_float+0x6>
    134a:	00 d0       	rcall	.+0      	; 0x134c <sensirion_bytes_to_float+0x8>
    134c:	00 d0       	rcall	.+0      	; 0x134e <sensirion_bytes_to_float+0xa>
    134e:	cd b7       	in	r28, 0x3d	; 61
    1350:	de b7       	in	r29, 0x3e	; 62
    1352:	9e 83       	std	Y+6, r25	; 0x06
    1354:	8d 83       	std	Y+5, r24	; 0x05
    1356:	8d 81       	ldd	r24, Y+5	; 0x05
    1358:	9e 81       	ldd	r25, Y+6	; 0x06
    135a:	0e 94 5a 09 	call	0x12b4	; 0x12b4 <sensirion_bytes_to_uint32_t>
    135e:	dc 01       	movw	r26, r24
    1360:	cb 01       	movw	r24, r22
    1362:	89 83       	std	Y+1, r24	; 0x01
    1364:	9a 83       	std	Y+2, r25	; 0x02
    1366:	ab 83       	std	Y+3, r26	; 0x03
    1368:	bc 83       	std	Y+4, r27	; 0x04
    136a:	89 81       	ldd	r24, Y+1	; 0x01
    136c:	9a 81       	ldd	r25, Y+2	; 0x02
    136e:	ab 81       	ldd	r26, Y+3	; 0x03
    1370:	bc 81       	ldd	r27, Y+4	; 0x04
    1372:	bc 01       	movw	r22, r24
    1374:	cd 01       	movw	r24, r26
    1376:	26 96       	adiw	r28, 0x06	; 6
    1378:	0f b6       	in	r0, 0x3f	; 63
    137a:	f8 94       	cli
    137c:	de bf       	out	0x3e, r29	; 62
    137e:	0f be       	out	0x3f, r0	; 63
    1380:	cd bf       	out	0x3d, r28	; 61
    1382:	df 91       	pop	r29
    1384:	cf 91       	pop	r28
    1386:	08 95       	ret

00001388 <sensirion_common_generate_crc>:
    1388:	cf 93       	push	r28
    138a:	df 93       	push	r29
    138c:	cd b7       	in	r28, 0x3d	; 61
    138e:	de b7       	in	r29, 0x3e	; 62
    1390:	28 97       	sbiw	r28, 0x08	; 8
    1392:	0f b6       	in	r0, 0x3f	; 63
    1394:	f8 94       	cli
    1396:	de bf       	out	0x3e, r29	; 62
    1398:	0f be       	out	0x3f, r0	; 63
    139a:	cd bf       	out	0x3d, r28	; 61
    139c:	9e 83       	std	Y+6, r25	; 0x06
    139e:	8d 83       	std	Y+5, r24	; 0x05
    13a0:	78 87       	std	Y+8, r23	; 0x08
    13a2:	6f 83       	std	Y+7, r22	; 0x07
    13a4:	8f ef       	ldi	r24, 0xFF	; 255
    13a6:	8b 83       	std	Y+3, r24	; 0x03
    13a8:	1a 82       	std	Y+2, r1	; 0x02
    13aa:	19 82       	std	Y+1, r1	; 0x01
    13ac:	29 c0       	rjmp	.+82     	; 0x1400 <sensirion_common_generate_crc+0x78>
    13ae:	2d 81       	ldd	r18, Y+5	; 0x05
    13b0:	3e 81       	ldd	r19, Y+6	; 0x06
    13b2:	89 81       	ldd	r24, Y+1	; 0x01
    13b4:	9a 81       	ldd	r25, Y+2	; 0x02
    13b6:	82 0f       	add	r24, r18
    13b8:	93 1f       	adc	r25, r19
    13ba:	fc 01       	movw	r30, r24
    13bc:	80 81       	ld	r24, Z
    13be:	9b 81       	ldd	r25, Y+3	; 0x03
    13c0:	89 27       	eor	r24, r25
    13c2:	8b 83       	std	Y+3, r24	; 0x03
    13c4:	88 e0       	ldi	r24, 0x08	; 8
    13c6:	8c 83       	std	Y+4, r24	; 0x04
    13c8:	13 c0       	rjmp	.+38     	; 0x13f0 <sensirion_common_generate_crc+0x68>
    13ca:	8b 81       	ldd	r24, Y+3	; 0x03
    13cc:	88 23       	and	r24, r24
    13ce:	54 f4       	brge	.+20     	; 0x13e4 <sensirion_common_generate_crc+0x5c>
    13d0:	8b 81       	ldd	r24, Y+3	; 0x03
    13d2:	88 2f       	mov	r24, r24
    13d4:	90 e0       	ldi	r25, 0x00	; 0
    13d6:	88 0f       	add	r24, r24
    13d8:	99 1f       	adc	r25, r25
    13da:	98 2f       	mov	r25, r24
    13dc:	81 e3       	ldi	r24, 0x31	; 49
    13de:	89 27       	eor	r24, r25
    13e0:	8b 83       	std	Y+3, r24	; 0x03
    13e2:	03 c0       	rjmp	.+6      	; 0x13ea <sensirion_common_generate_crc+0x62>
    13e4:	8b 81       	ldd	r24, Y+3	; 0x03
    13e6:	88 0f       	add	r24, r24
    13e8:	8b 83       	std	Y+3, r24	; 0x03
    13ea:	8c 81       	ldd	r24, Y+4	; 0x04
    13ec:	81 50       	subi	r24, 0x01	; 1
    13ee:	8c 83       	std	Y+4, r24	; 0x04
    13f0:	8c 81       	ldd	r24, Y+4	; 0x04
    13f2:	88 23       	and	r24, r24
    13f4:	51 f7       	brne	.-44     	; 0x13ca <sensirion_common_generate_crc+0x42>
    13f6:	89 81       	ldd	r24, Y+1	; 0x01
    13f8:	9a 81       	ldd	r25, Y+2	; 0x02
    13fa:	01 96       	adiw	r24, 0x01	; 1
    13fc:	9a 83       	std	Y+2, r25	; 0x02
    13fe:	89 83       	std	Y+1, r24	; 0x01
    1400:	29 81       	ldd	r18, Y+1	; 0x01
    1402:	3a 81       	ldd	r19, Y+2	; 0x02
    1404:	8f 81       	ldd	r24, Y+7	; 0x07
    1406:	98 85       	ldd	r25, Y+8	; 0x08
    1408:	28 17       	cp	r18, r24
    140a:	39 07       	cpc	r19, r25
    140c:	80 f2       	brcs	.-96     	; 0x13ae <sensirion_common_generate_crc+0x26>
    140e:	8b 81       	ldd	r24, Y+3	; 0x03
    1410:	28 96       	adiw	r28, 0x08	; 8
    1412:	0f b6       	in	r0, 0x3f	; 63
    1414:	f8 94       	cli
    1416:	de bf       	out	0x3e, r29	; 62
    1418:	0f be       	out	0x3f, r0	; 63
    141a:	cd bf       	out	0x3d, r28	; 61
    141c:	df 91       	pop	r29
    141e:	cf 91       	pop	r28
    1420:	08 95       	ret

00001422 <sensirion_common_check_crc>:
    1422:	cf 93       	push	r28
    1424:	df 93       	push	r29
    1426:	00 d0       	rcall	.+0      	; 0x1428 <sensirion_common_check_crc+0x6>
    1428:	00 d0       	rcall	.+0      	; 0x142a <sensirion_common_check_crc+0x8>
    142a:	1f 92       	push	r1
    142c:	cd b7       	in	r28, 0x3d	; 61
    142e:	de b7       	in	r29, 0x3e	; 62
    1430:	9a 83       	std	Y+2, r25	; 0x02
    1432:	89 83       	std	Y+1, r24	; 0x01
    1434:	7c 83       	std	Y+4, r23	; 0x04
    1436:	6b 83       	std	Y+3, r22	; 0x03
    1438:	4d 83       	std	Y+5, r20	; 0x05
    143a:	2b 81       	ldd	r18, Y+3	; 0x03
    143c:	3c 81       	ldd	r19, Y+4	; 0x04
    143e:	89 81       	ldd	r24, Y+1	; 0x01
    1440:	9a 81       	ldd	r25, Y+2	; 0x02
    1442:	b9 01       	movw	r22, r18
    1444:	0e 94 c4 09 	call	0x1388	; 0x1388 <sensirion_common_generate_crc>
    1448:	98 2f       	mov	r25, r24
    144a:	8d 81       	ldd	r24, Y+5	; 0x05
    144c:	98 17       	cp	r25, r24
    144e:	11 f0       	breq	.+4      	; 0x1454 <sensirion_common_check_crc+0x32>
    1450:	8f ef       	ldi	r24, 0xFF	; 255
    1452:	01 c0       	rjmp	.+2      	; 0x1456 <sensirion_common_check_crc+0x34>
    1454:	80 e0       	ldi	r24, 0x00	; 0
    1456:	0f 90       	pop	r0
    1458:	0f 90       	pop	r0
    145a:	0f 90       	pop	r0
    145c:	0f 90       	pop	r0
    145e:	0f 90       	pop	r0
    1460:	df 91       	pop	r29
    1462:	cf 91       	pop	r28
    1464:	08 95       	ret

00001466 <sensirion_fill_cmd_send_buf>:

uint16_t sensirion_fill_cmd_send_buf(uint8_t* buf, uint16_t cmd,
                                     const uint16_t* args, uint8_t num_args) {
    1466:	cf 93       	push	r28
    1468:	df 93       	push	r29
    146a:	cd b7       	in	r28, 0x3d	; 61
    146c:	de b7       	in	r29, 0x3e	; 62
    146e:	2b 97       	sbiw	r28, 0x0b	; 11
    1470:	0f b6       	in	r0, 0x3f	; 63
    1472:	f8 94       	cli
    1474:	de bf       	out	0x3e, r29	; 62
    1476:	0f be       	out	0x3f, r0	; 63
    1478:	cd bf       	out	0x3d, r28	; 61
    147a:	9e 83       	std	Y+6, r25	; 0x06
    147c:	8d 83       	std	Y+5, r24	; 0x05
    147e:	78 87       	std	Y+8, r23	; 0x08
    1480:	6f 83       	std	Y+7, r22	; 0x07
    1482:	5a 87       	std	Y+10, r21	; 0x0a
    1484:	49 87       	std	Y+9, r20	; 0x09
    1486:	2b 87       	std	Y+11, r18	; 0x0b
    uint8_t crc;
    uint8_t i;
    uint16_t idx = 0;
    1488:	1b 82       	std	Y+3, r1	; 0x03
    148a:	1a 82       	std	Y+2, r1	; 0x02

    buf[idx++] = (uint8_t)((cmd & 0xFF00) >> 8);
    148c:	8a 81       	ldd	r24, Y+2	; 0x02
    148e:	9b 81       	ldd	r25, Y+3	; 0x03
    1490:	9c 01       	movw	r18, r24
    1492:	2f 5f       	subi	r18, 0xFF	; 255
    1494:	3f 4f       	sbci	r19, 0xFF	; 255
    1496:	3b 83       	std	Y+3, r19	; 0x03
    1498:	2a 83       	std	Y+2, r18	; 0x02
    149a:	2d 81       	ldd	r18, Y+5	; 0x05
    149c:	3e 81       	ldd	r19, Y+6	; 0x06
    149e:	82 0f       	add	r24, r18
    14a0:	93 1f       	adc	r25, r19
    14a2:	2f 81       	ldd	r18, Y+7	; 0x07
    14a4:	38 85       	ldd	r19, Y+8	; 0x08
    14a6:	23 2f       	mov	r18, r19
    14a8:	33 27       	eor	r19, r19
    14aa:	fc 01       	movw	r30, r24
    14ac:	20 83       	st	Z, r18
    buf[idx++] = (uint8_t)((cmd & 0x00FF) >> 0);
    14ae:	8a 81       	ldd	r24, Y+2	; 0x02
    14b0:	9b 81       	ldd	r25, Y+3	; 0x03
    14b2:	9c 01       	movw	r18, r24
    14b4:	2f 5f       	subi	r18, 0xFF	; 255
    14b6:	3f 4f       	sbci	r19, 0xFF	; 255
    14b8:	3b 83       	std	Y+3, r19	; 0x03
    14ba:	2a 83       	std	Y+2, r18	; 0x02
    14bc:	2d 81       	ldd	r18, Y+5	; 0x05
    14be:	3e 81       	ldd	r19, Y+6	; 0x06
    14c0:	82 0f       	add	r24, r18
    14c2:	93 1f       	adc	r25, r19
    14c4:	2f 81       	ldd	r18, Y+7	; 0x07
    14c6:	fc 01       	movw	r30, r24
    14c8:	20 83       	st	Z, r18

    for (i = 0; i < num_args; ++i) {
    14ca:	19 82       	std	Y+1, r1	; 0x01
    14cc:	51 c0       	rjmp	.+162    	; 0x1570 <sensirion_fill_cmd_send_buf+0x10a>
        buf[idx++] = (uint8_t)((args[i] & 0xFF00) >> 8);
    14ce:	8a 81       	ldd	r24, Y+2	; 0x02
    14d0:	9b 81       	ldd	r25, Y+3	; 0x03
    14d2:	9c 01       	movw	r18, r24
    14d4:	2f 5f       	subi	r18, 0xFF	; 255
    14d6:	3f 4f       	sbci	r19, 0xFF	; 255
    14d8:	3b 83       	std	Y+3, r19	; 0x03
    14da:	2a 83       	std	Y+2, r18	; 0x02
    14dc:	2d 81       	ldd	r18, Y+5	; 0x05
    14de:	3e 81       	ldd	r19, Y+6	; 0x06
    14e0:	82 0f       	add	r24, r18
    14e2:	93 1f       	adc	r25, r19
    14e4:	29 81       	ldd	r18, Y+1	; 0x01
    14e6:	22 2f       	mov	r18, r18
    14e8:	30 e0       	ldi	r19, 0x00	; 0
    14ea:	22 0f       	add	r18, r18
    14ec:	33 1f       	adc	r19, r19
    14ee:	49 85       	ldd	r20, Y+9	; 0x09
    14f0:	5a 85       	ldd	r21, Y+10	; 0x0a
    14f2:	24 0f       	add	r18, r20
    14f4:	35 1f       	adc	r19, r21
    14f6:	f9 01       	movw	r30, r18
    14f8:	20 81       	ld	r18, Z
    14fa:	31 81       	ldd	r19, Z+1	; 0x01
    14fc:	23 2f       	mov	r18, r19
    14fe:	33 27       	eor	r19, r19
    1500:	fc 01       	movw	r30, r24
    1502:	20 83       	st	Z, r18
        buf[idx++] = (uint8_t)((args[i] & 0x00FF) >> 0);
    1504:	8a 81       	ldd	r24, Y+2	; 0x02
    1506:	9b 81       	ldd	r25, Y+3	; 0x03
    1508:	9c 01       	movw	r18, r24
    150a:	2f 5f       	subi	r18, 0xFF	; 255
    150c:	3f 4f       	sbci	r19, 0xFF	; 255
    150e:	3b 83       	std	Y+3, r19	; 0x03
    1510:	2a 83       	std	Y+2, r18	; 0x02
    1512:	2d 81       	ldd	r18, Y+5	; 0x05
    1514:	3e 81       	ldd	r19, Y+6	; 0x06
    1516:	82 0f       	add	r24, r18
    1518:	93 1f       	adc	r25, r19
    151a:	29 81       	ldd	r18, Y+1	; 0x01
    151c:	22 2f       	mov	r18, r18
    151e:	30 e0       	ldi	r19, 0x00	; 0
    1520:	22 0f       	add	r18, r18
    1522:	33 1f       	adc	r19, r19
    1524:	49 85       	ldd	r20, Y+9	; 0x09
    1526:	5a 85       	ldd	r21, Y+10	; 0x0a
    1528:	24 0f       	add	r18, r20
    152a:	35 1f       	adc	r19, r21
    152c:	f9 01       	movw	r30, r18
    152e:	20 81       	ld	r18, Z
    1530:	31 81       	ldd	r19, Z+1	; 0x01
    1532:	fc 01       	movw	r30, r24
    1534:	20 83       	st	Z, r18

        crc = sensirion_common_generate_crc((uint8_t*)&buf[idx - 2],
    1536:	8a 81       	ldd	r24, Y+2	; 0x02
    1538:	9b 81       	ldd	r25, Y+3	; 0x03
    153a:	02 97       	sbiw	r24, 0x02	; 2
    153c:	2d 81       	ldd	r18, Y+5	; 0x05
    153e:	3e 81       	ldd	r19, Y+6	; 0x06
    1540:	82 0f       	add	r24, r18
    1542:	93 1f       	adc	r25, r19
    1544:	62 e0       	ldi	r22, 0x02	; 2
    1546:	70 e0       	ldi	r23, 0x00	; 0
    1548:	0e 94 c4 09 	call	0x1388	; 0x1388 <sensirion_common_generate_crc>
    154c:	8c 83       	std	Y+4, r24	; 0x04
                                            SENSIRION_WORD_SIZE);
        buf[idx++] = crc;
    154e:	8a 81       	ldd	r24, Y+2	; 0x02
    1550:	9b 81       	ldd	r25, Y+3	; 0x03
    1552:	9c 01       	movw	r18, r24
    1554:	2f 5f       	subi	r18, 0xFF	; 255
    1556:	3f 4f       	sbci	r19, 0xFF	; 255
    1558:	3b 83       	std	Y+3, r19	; 0x03
    155a:	2a 83       	std	Y+2, r18	; 0x02
    155c:	2d 81       	ldd	r18, Y+5	; 0x05
    155e:	3e 81       	ldd	r19, Y+6	; 0x06
    1560:	82 0f       	add	r24, r18
    1562:	93 1f       	adc	r25, r19
    1564:	2c 81       	ldd	r18, Y+4	; 0x04
    1566:	fc 01       	movw	r30, r24
    1568:	20 83       	st	Z, r18
    uint16_t idx = 0;

    buf[idx++] = (uint8_t)((cmd & 0xFF00) >> 8);
    buf[idx++] = (uint8_t)((cmd & 0x00FF) >> 0);

    for (i = 0; i < num_args; ++i) {
    156a:	89 81       	ldd	r24, Y+1	; 0x01
    156c:	8f 5f       	subi	r24, 0xFF	; 255
    156e:	89 83       	std	Y+1, r24	; 0x01
    1570:	99 81       	ldd	r25, Y+1	; 0x01
    1572:	8b 85       	ldd	r24, Y+11	; 0x0b
    1574:	98 17       	cp	r25, r24
    1576:	08 f4       	brcc	.+2      	; 0x157a <sensirion_fill_cmd_send_buf+0x114>
    1578:	aa cf       	rjmp	.-172    	; 0x14ce <sensirion_fill_cmd_send_buf+0x68>

        crc = sensirion_common_generate_crc((uint8_t*)&buf[idx - 2],
                                            SENSIRION_WORD_SIZE);
        buf[idx++] = crc;
    }
    return idx;
    157a:	8a 81       	ldd	r24, Y+2	; 0x02
    157c:	9b 81       	ldd	r25, Y+3	; 0x03
}
    157e:	2b 96       	adiw	r28, 0x0b	; 11
    1580:	0f b6       	in	r0, 0x3f	; 63
    1582:	f8 94       	cli
    1584:	de bf       	out	0x3e, r29	; 62
    1586:	0f be       	out	0x3f, r0	; 63
    1588:	cd bf       	out	0x3d, r28	; 61
    158a:	df 91       	pop	r29
    158c:	cf 91       	pop	r28
    158e:	08 95       	ret

00001590 <sensirion_i2c_read_words_as_bytes>:

int16_t sensirion_i2c_read_words_as_bytes(uint8_t address, uint8_t* data,
                                          uint16_t num_words) {
    1590:	cf 93       	push	r28
    1592:	df 93       	push	r29
    1594:	cd b7       	in	r28, 0x3d	; 61
    1596:	de b7       	in	r29, 0x3e	; 62
    1598:	cf 54       	subi	r28, 0x4F	; 79
    159a:	d1 09       	sbc	r29, r1
    159c:	0f b6       	in	r0, 0x3f	; 63
    159e:	f8 94       	cli
    15a0:	de bf       	out	0x3e, r29	; 62
    15a2:	0f be       	out	0x3f, r0	; 63
    15a4:	cd bf       	out	0x3d, r28	; 61
    15a6:	9e 01       	movw	r18, r28
    15a8:	25 5b       	subi	r18, 0xB5	; 181
    15aa:	3f 4f       	sbci	r19, 0xFF	; 255
    15ac:	f9 01       	movw	r30, r18
    15ae:	80 83       	st	Z, r24
    15b0:	ce 01       	movw	r24, r28
    15b2:	84 5b       	subi	r24, 0xB4	; 180
    15b4:	9f 4f       	sbci	r25, 0xFF	; 255
    15b6:	fc 01       	movw	r30, r24
    15b8:	71 83       	std	Z+1, r23	; 0x01
    15ba:	60 83       	st	Z, r22
    15bc:	ce 01       	movw	r24, r28
    15be:	82 5b       	subi	r24, 0xB2	; 178
    15c0:	9f 4f       	sbci	r25, 0xFF	; 255
    15c2:	fc 01       	movw	r30, r24
    15c4:	51 83       	std	Z+1, r21	; 0x01
    15c6:	40 83       	st	Z, r20
    int16_t ret;
    uint16_t i, j;
    uint16_t size = num_words * (SENSIRION_WORD_SIZE + CRC8_LEN);
    15c8:	ce 01       	movw	r24, r28
    15ca:	82 5b       	subi	r24, 0xB2	; 178
    15cc:	9f 4f       	sbci	r25, 0xFF	; 255
    15ce:	fc 01       	movw	r30, r24
    15d0:	20 81       	ld	r18, Z
    15d2:	31 81       	ldd	r19, Z+1	; 0x01
    15d4:	c9 01       	movw	r24, r18
    15d6:	88 0f       	add	r24, r24
    15d8:	99 1f       	adc	r25, r25
    15da:	82 0f       	add	r24, r18
    15dc:	93 1f       	adc	r25, r19
    15de:	9e 83       	std	Y+6, r25	; 0x06
    15e0:	8d 83       	std	Y+5, r24	; 0x05
    uint16_t word_buf[SENSIRION_MAX_BUFFER_WORDS];
    uint8_t* const buf8 = (uint8_t*)word_buf;
    15e2:	ce 01       	movw	r24, r28
    15e4:	0b 96       	adiw	r24, 0x0b	; 11
    15e6:	98 87       	std	Y+8, r25	; 0x08
    15e8:	8f 83       	std	Y+7, r24	; 0x07

    ret = sensirion_i2c_read(address, buf8, size);
    15ea:	4d 81       	ldd	r20, Y+5	; 0x05
    15ec:	5e 81       	ldd	r21, Y+6	; 0x06
    15ee:	2f 81       	ldd	r18, Y+7	; 0x07
    15f0:	38 85       	ldd	r19, Y+8	; 0x08
    15f2:	ce 01       	movw	r24, r28
    15f4:	85 5b       	subi	r24, 0xB5	; 181
    15f6:	9f 4f       	sbci	r25, 0xFF	; 255
    15f8:	b9 01       	movw	r22, r18
    15fa:	fc 01       	movw	r30, r24
    15fc:	80 81       	ld	r24, Z
    15fe:	0e 94 85 0e 	call	0x1d0a	; 0x1d0a <sensirion_i2c_read>
    1602:	08 2e       	mov	r0, r24
    1604:	00 0c       	add	r0, r0
    1606:	99 0b       	sbc	r25, r25
    1608:	9a 87       	std	Y+10, r25	; 0x0a
    160a:	89 87       	std	Y+9, r24	; 0x09
	
    if (ret != NO_ERROR){
    160c:	89 85       	ldd	r24, Y+9	; 0x09
    160e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1610:	89 2b       	or	r24, r25
    1612:	a1 f0       	breq	.+40     	; 0x163c <sensirion_i2c_read_words_as_bytes+0xac>
		printf("1)read byte error ret = %d", ret);
    1614:	8a 85       	ldd	r24, Y+10	; 0x0a
    1616:	8f 93       	push	r24
    1618:	89 85       	ldd	r24, Y+9	; 0x09
    161a:	8f 93       	push	r24
    161c:	88 ee       	ldi	r24, 0xE8	; 232
    161e:	94 e0       	ldi	r25, 0x04	; 4
    1620:	89 2f       	mov	r24, r25
    1622:	8f 93       	push	r24
    1624:	88 ee       	ldi	r24, 0xE8	; 232
    1626:	94 e0       	ldi	r25, 0x04	; 4
    1628:	8f 93       	push	r24
    162a:	0e 94 6d 1e 	call	0x3cda	; 0x3cda <printf>
    162e:	0f 90       	pop	r0
    1630:	0f 90       	pop	r0
    1632:	0f 90       	pop	r0
    1634:	0f 90       	pop	r0
        return ret;
    1636:	89 85       	ldd	r24, Y+9	; 0x09
    1638:	9a 85       	ldd	r25, Y+10	; 0x0a
    163a:	75 c0       	rjmp	.+234    	; 0x1726 <sensirion_i2c_read_words_as_bytes+0x196>
	}

    /* check the CRC for each word */
    for (i = 0, j = 0; i < size; i += SENSIRION_WORD_SIZE + CRC8_LEN) {
    163c:	1a 82       	std	Y+2, r1	; 0x02
    163e:	19 82       	std	Y+1, r1	; 0x01
    1640:	1c 82       	std	Y+4, r1	; 0x04
    1642:	1b 82       	std	Y+3, r1	; 0x03
    1644:	66 c0       	rjmp	.+204    	; 0x1712 <sensirion_i2c_read_words_as_bytes+0x182>

        ret = sensirion_common_check_crc(&buf8[i], SENSIRION_WORD_SIZE,
                                         buf8[i + SENSIRION_WORD_SIZE]);
    1646:	89 81       	ldd	r24, Y+1	; 0x01
    1648:	9a 81       	ldd	r25, Y+2	; 0x02
    164a:	02 96       	adiw	r24, 0x02	; 2
    164c:	2f 81       	ldd	r18, Y+7	; 0x07
    164e:	38 85       	ldd	r19, Y+8	; 0x08
    1650:	82 0f       	add	r24, r18
    1652:	93 1f       	adc	r25, r19
	}

    /* check the CRC for each word */
    for (i = 0, j = 0; i < size; i += SENSIRION_WORD_SIZE + CRC8_LEN) {

        ret = sensirion_common_check_crc(&buf8[i], SENSIRION_WORD_SIZE,
    1654:	fc 01       	movw	r30, r24
    1656:	40 81       	ld	r20, Z
    1658:	2f 81       	ldd	r18, Y+7	; 0x07
    165a:	38 85       	ldd	r19, Y+8	; 0x08
    165c:	89 81       	ldd	r24, Y+1	; 0x01
    165e:	9a 81       	ldd	r25, Y+2	; 0x02
    1660:	82 0f       	add	r24, r18
    1662:	93 1f       	adc	r25, r19
    1664:	62 e0       	ldi	r22, 0x02	; 2
    1666:	70 e0       	ldi	r23, 0x00	; 0
    1668:	0e 94 11 0a 	call	0x1422	; 0x1422 <sensirion_common_check_crc>
    166c:	08 2e       	mov	r0, r24
    166e:	00 0c       	add	r0, r0
    1670:	99 0b       	sbc	r25, r25
    1672:	9a 87       	std	Y+10, r25	; 0x0a
    1674:	89 87       	std	Y+9, r24	; 0x09
                                         buf8[i + SENSIRION_WORD_SIZE]);
        if (ret != NO_ERROR){
    1676:	89 85       	ldd	r24, Y+9	; 0x09
    1678:	9a 85       	ldd	r25, Y+10	; 0x0a
    167a:	89 2b       	or	r24, r25
    167c:	89 f0       	breq	.+34     	; 0x16a0 <sensirion_i2c_read_words_as_bytes+0x110>
			printf("2)read byte error ret = %d", ret);
    167e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1680:	8f 93       	push	r24
    1682:	89 85       	ldd	r24, Y+9	; 0x09
    1684:	8f 93       	push	r24
    1686:	83 e0       	ldi	r24, 0x03	; 3
    1688:	95 e0       	ldi	r25, 0x05	; 5
    168a:	89 2f       	mov	r24, r25
    168c:	8f 93       	push	r24
    168e:	83 e0       	ldi	r24, 0x03	; 3
    1690:	95 e0       	ldi	r25, 0x05	; 5
    1692:	8f 93       	push	r24
    1694:	0e 94 6d 1e 	call	0x3cda	; 0x3cda <printf>
    1698:	0f 90       	pop	r0
    169a:	0f 90       	pop	r0
    169c:	0f 90       	pop	r0
    169e:	0f 90       	pop	r0
            //return ret;
		}

        data[j++] = buf8[i];
    16a0:	8b 81       	ldd	r24, Y+3	; 0x03
    16a2:	9c 81       	ldd	r25, Y+4	; 0x04
    16a4:	9c 01       	movw	r18, r24
    16a6:	2f 5f       	subi	r18, 0xFF	; 255
    16a8:	3f 4f       	sbci	r19, 0xFF	; 255
    16aa:	3c 83       	std	Y+4, r19	; 0x04
    16ac:	2b 83       	std	Y+3, r18	; 0x03
    16ae:	9e 01       	movw	r18, r28
    16b0:	24 5b       	subi	r18, 0xB4	; 180
    16b2:	3f 4f       	sbci	r19, 0xFF	; 255
    16b4:	f9 01       	movw	r30, r18
    16b6:	20 81       	ld	r18, Z
    16b8:	31 81       	ldd	r19, Z+1	; 0x01
    16ba:	82 0f       	add	r24, r18
    16bc:	93 1f       	adc	r25, r19
    16be:	4f 81       	ldd	r20, Y+7	; 0x07
    16c0:	58 85       	ldd	r21, Y+8	; 0x08
    16c2:	29 81       	ldd	r18, Y+1	; 0x01
    16c4:	3a 81       	ldd	r19, Y+2	; 0x02
    16c6:	24 0f       	add	r18, r20
    16c8:	35 1f       	adc	r19, r21
    16ca:	f9 01       	movw	r30, r18
    16cc:	20 81       	ld	r18, Z
    16ce:	fc 01       	movw	r30, r24
    16d0:	20 83       	st	Z, r18
        data[j++] = buf8[i + 1];
    16d2:	8b 81       	ldd	r24, Y+3	; 0x03
    16d4:	9c 81       	ldd	r25, Y+4	; 0x04
    16d6:	9c 01       	movw	r18, r24
    16d8:	2f 5f       	subi	r18, 0xFF	; 255
    16da:	3f 4f       	sbci	r19, 0xFF	; 255
    16dc:	3c 83       	std	Y+4, r19	; 0x04
    16de:	2b 83       	std	Y+3, r18	; 0x03
    16e0:	9e 01       	movw	r18, r28
    16e2:	24 5b       	subi	r18, 0xB4	; 180
    16e4:	3f 4f       	sbci	r19, 0xFF	; 255
    16e6:	f9 01       	movw	r30, r18
    16e8:	20 81       	ld	r18, Z
    16ea:	31 81       	ldd	r19, Z+1	; 0x01
    16ec:	82 0f       	add	r24, r18
    16ee:	93 1f       	adc	r25, r19
    16f0:	29 81       	ldd	r18, Y+1	; 0x01
    16f2:	3a 81       	ldd	r19, Y+2	; 0x02
    16f4:	2f 5f       	subi	r18, 0xFF	; 255
    16f6:	3f 4f       	sbci	r19, 0xFF	; 255
    16f8:	4f 81       	ldd	r20, Y+7	; 0x07
    16fa:	58 85       	ldd	r21, Y+8	; 0x08
    16fc:	24 0f       	add	r18, r20
    16fe:	35 1f       	adc	r19, r21
    1700:	f9 01       	movw	r30, r18
    1702:	20 81       	ld	r18, Z
    1704:	fc 01       	movw	r30, r24
    1706:	20 83       	st	Z, r18
		printf("1)read byte error ret = %d", ret);
        return ret;
	}

    /* check the CRC for each word */
    for (i = 0, j = 0; i < size; i += SENSIRION_WORD_SIZE + CRC8_LEN) {
    1708:	89 81       	ldd	r24, Y+1	; 0x01
    170a:	9a 81       	ldd	r25, Y+2	; 0x02
    170c:	03 96       	adiw	r24, 0x03	; 3
    170e:	9a 83       	std	Y+2, r25	; 0x02
    1710:	89 83       	std	Y+1, r24	; 0x01
    1712:	29 81       	ldd	r18, Y+1	; 0x01
    1714:	3a 81       	ldd	r19, Y+2	; 0x02
    1716:	8d 81       	ldd	r24, Y+5	; 0x05
    1718:	9e 81       	ldd	r25, Y+6	; 0x06
    171a:	28 17       	cp	r18, r24
    171c:	39 07       	cpc	r19, r25
    171e:	08 f4       	brcc	.+2      	; 0x1722 <sensirion_i2c_read_words_as_bytes+0x192>
    1720:	92 cf       	rjmp	.-220    	; 0x1646 <sensirion_i2c_read_words_as_bytes+0xb6>

        data[j++] = buf8[i];
        data[j++] = buf8[i + 1];
    }

    return NO_ERROR;
    1722:	80 e0       	ldi	r24, 0x00	; 0
    1724:	90 e0       	ldi	r25, 0x00	; 0
}
    1726:	c1 5b       	subi	r28, 0xB1	; 177
    1728:	df 4f       	sbci	r29, 0xFF	; 255
    172a:	0f b6       	in	r0, 0x3f	; 63
    172c:	f8 94       	cli
    172e:	de bf       	out	0x3e, r29	; 62
    1730:	0f be       	out	0x3f, r0	; 63
    1732:	cd bf       	out	0x3d, r28	; 61
    1734:	df 91       	pop	r29
    1736:	cf 91       	pop	r28
    1738:	08 95       	ret

0000173a <sensirion_i2c_read_words>:

int16_t sensirion_i2c_read_words(uint8_t address, uint16_t* data_words,
                                 uint16_t num_words) {
    173a:	cf 93       	push	r28
    173c:	df 93       	push	r29
    173e:	cd b7       	in	r28, 0x3d	; 61
    1740:	de b7       	in	r29, 0x3e	; 62
    1742:	2a 97       	sbiw	r28, 0x0a	; 10
    1744:	0f b6       	in	r0, 0x3f	; 63
    1746:	f8 94       	cli
    1748:	de bf       	out	0x3e, r29	; 62
    174a:	0f be       	out	0x3f, r0	; 63
    174c:	cd bf       	out	0x3d, r28	; 61
    174e:	8e 83       	std	Y+6, r24	; 0x06
    1750:	78 87       	std	Y+8, r23	; 0x08
    1752:	6f 83       	std	Y+7, r22	; 0x07
    1754:	5a 87       	std	Y+10, r21	; 0x0a
    1756:	49 87       	std	Y+9, r20	; 0x09
    int16_t ret;
    uint8_t i;
    const uint8_t* word_bytes;

    ret = sensirion_i2c_read_words_as_bytes(address, (uint8_t*)data_words,
    1758:	29 85       	ldd	r18, Y+9	; 0x09
    175a:	3a 85       	ldd	r19, Y+10	; 0x0a
    175c:	8f 81       	ldd	r24, Y+7	; 0x07
    175e:	98 85       	ldd	r25, Y+8	; 0x08
    1760:	a9 01       	movw	r20, r18
    1762:	bc 01       	movw	r22, r24
    1764:	8e 81       	ldd	r24, Y+6	; 0x06
    1766:	0e 94 c8 0a 	call	0x1590	; 0x1590 <sensirion_i2c_read_words_as_bytes>
    176a:	9b 83       	std	Y+3, r25	; 0x03
    176c:	8a 83       	std	Y+2, r24	; 0x02
                                            num_words);
    if (ret != NO_ERROR)
    176e:	8a 81       	ldd	r24, Y+2	; 0x02
    1770:	9b 81       	ldd	r25, Y+3	; 0x03
    1772:	89 2b       	or	r24, r25
    1774:	19 f0       	breq	.+6      	; 0x177c <sensirion_i2c_read_words+0x42>
        return ret;
    1776:	8a 81       	ldd	r24, Y+2	; 0x02
    1778:	9b 81       	ldd	r25, Y+3	; 0x03
    177a:	38 c0       	rjmp	.+112    	; 0x17ec <sensirion_i2c_read_words+0xb2>

    for (i = 0; i < num_words; ++i) {
    177c:	19 82       	std	Y+1, r1	; 0x01
    177e:	2c c0       	rjmp	.+88     	; 0x17d8 <sensirion_i2c_read_words+0x9e>
        word_bytes = (uint8_t*)&data_words[i];
    1780:	89 81       	ldd	r24, Y+1	; 0x01
    1782:	88 2f       	mov	r24, r24
    1784:	90 e0       	ldi	r25, 0x00	; 0
    1786:	88 0f       	add	r24, r24
    1788:	99 1f       	adc	r25, r25
    178a:	2f 81       	ldd	r18, Y+7	; 0x07
    178c:	38 85       	ldd	r19, Y+8	; 0x08
    178e:	82 0f       	add	r24, r18
    1790:	93 1f       	adc	r25, r19
    1792:	9d 83       	std	Y+5, r25	; 0x05
    1794:	8c 83       	std	Y+4, r24	; 0x04
        data_words[i] = ((uint16_t)word_bytes[0] << 8) | word_bytes[1];
    1796:	89 81       	ldd	r24, Y+1	; 0x01
    1798:	88 2f       	mov	r24, r24
    179a:	90 e0       	ldi	r25, 0x00	; 0
    179c:	88 0f       	add	r24, r24
    179e:	99 1f       	adc	r25, r25
    17a0:	2f 81       	ldd	r18, Y+7	; 0x07
    17a2:	38 85       	ldd	r19, Y+8	; 0x08
    17a4:	82 0f       	add	r24, r18
    17a6:	93 1f       	adc	r25, r19
    17a8:	2c 81       	ldd	r18, Y+4	; 0x04
    17aa:	3d 81       	ldd	r19, Y+5	; 0x05
    17ac:	f9 01       	movw	r30, r18
    17ae:	20 81       	ld	r18, Z
    17b0:	22 2f       	mov	r18, r18
    17b2:	30 e0       	ldi	r19, 0x00	; 0
    17b4:	52 2f       	mov	r21, r18
    17b6:	44 27       	eor	r20, r20
    17b8:	2c 81       	ldd	r18, Y+4	; 0x04
    17ba:	3d 81       	ldd	r19, Y+5	; 0x05
    17bc:	2f 5f       	subi	r18, 0xFF	; 255
    17be:	3f 4f       	sbci	r19, 0xFF	; 255
    17c0:	f9 01       	movw	r30, r18
    17c2:	20 81       	ld	r18, Z
    17c4:	22 2f       	mov	r18, r18
    17c6:	30 e0       	ldi	r19, 0x00	; 0
    17c8:	24 2b       	or	r18, r20
    17ca:	35 2b       	or	r19, r21
    17cc:	fc 01       	movw	r30, r24
    17ce:	31 83       	std	Z+1, r19	; 0x01
    17d0:	20 83       	st	Z, r18
    ret = sensirion_i2c_read_words_as_bytes(address, (uint8_t*)data_words,
                                            num_words);
    if (ret != NO_ERROR)
        return ret;

    for (i = 0; i < num_words; ++i) {
    17d2:	89 81       	ldd	r24, Y+1	; 0x01
    17d4:	8f 5f       	subi	r24, 0xFF	; 255
    17d6:	89 83       	std	Y+1, r24	; 0x01
    17d8:	89 81       	ldd	r24, Y+1	; 0x01
    17da:	28 2f       	mov	r18, r24
    17dc:	30 e0       	ldi	r19, 0x00	; 0
    17de:	89 85       	ldd	r24, Y+9	; 0x09
    17e0:	9a 85       	ldd	r25, Y+10	; 0x0a
    17e2:	28 17       	cp	r18, r24
    17e4:	39 07       	cpc	r19, r25
    17e6:	60 f2       	brcs	.-104    	; 0x1780 <sensirion_i2c_read_words+0x46>
        word_bytes = (uint8_t*)&data_words[i];
        data_words[i] = ((uint16_t)word_bytes[0] << 8) | word_bytes[1];
    }

    return NO_ERROR;
    17e8:	80 e0       	ldi	r24, 0x00	; 0
    17ea:	90 e0       	ldi	r25, 0x00	; 0
}
    17ec:	2a 96       	adiw	r28, 0x0a	; 10
    17ee:	0f b6       	in	r0, 0x3f	; 63
    17f0:	f8 94       	cli
    17f2:	de bf       	out	0x3e, r29	; 62
    17f4:	0f be       	out	0x3f, r0	; 63
    17f6:	cd bf       	out	0x3d, r28	; 61
    17f8:	df 91       	pop	r29
    17fa:	cf 91       	pop	r28
    17fc:	08 95       	ret

000017fe <sensirion_i2c_write_cmd>:

int16_t sensirion_i2c_write_cmd(uint8_t address, uint16_t command) {
    17fe:	cf 93       	push	r28
    1800:	df 93       	push	r29
    1802:	00 d0       	rcall	.+0      	; 0x1804 <sensirion_i2c_write_cmd+0x6>
    1804:	00 d0       	rcall	.+0      	; 0x1806 <sensirion_i2c_write_cmd+0x8>
    1806:	1f 92       	push	r1
    1808:	cd b7       	in	r28, 0x3d	; 61
    180a:	de b7       	in	r29, 0x3e	; 62
    180c:	8b 83       	std	Y+3, r24	; 0x03
    180e:	7d 83       	std	Y+5, r23	; 0x05
    1810:	6c 83       	std	Y+4, r22	; 0x04
    uint8_t buf[SENSIRION_COMMAND_SIZE];

    sensirion_fill_cmd_send_buf(buf, command, NULL, 0);
    1812:	8c 81       	ldd	r24, Y+4	; 0x04
    1814:	9d 81       	ldd	r25, Y+5	; 0x05
    1816:	20 e0       	ldi	r18, 0x00	; 0
    1818:	40 e0       	ldi	r20, 0x00	; 0
    181a:	50 e0       	ldi	r21, 0x00	; 0
    181c:	bc 01       	movw	r22, r24
    181e:	ce 01       	movw	r24, r28
    1820:	01 96       	adiw	r24, 0x01	; 1
    1822:	0e 94 33 0a 	call	0x1466	; 0x1466 <sensirion_fill_cmd_send_buf>
    return sensirion_i2c_write(address, buf, SENSIRION_COMMAND_SIZE);
    1826:	42 e0       	ldi	r20, 0x02	; 2
    1828:	50 e0       	ldi	r21, 0x00	; 0
    182a:	ce 01       	movw	r24, r28
    182c:	01 96       	adiw	r24, 0x01	; 1
    182e:	bc 01       	movw	r22, r24
    1830:	8b 81       	ldd	r24, Y+3	; 0x03
    1832:	0e 94 af 0e 	call	0x1d5e	; 0x1d5e <sensirion_i2c_write>
    1836:	08 2e       	mov	r0, r24
    1838:	00 0c       	add	r0, r0
    183a:	99 0b       	sbc	r25, r25
}
    183c:	0f 90       	pop	r0
    183e:	0f 90       	pop	r0
    1840:	0f 90       	pop	r0
    1842:	0f 90       	pop	r0
    1844:	0f 90       	pop	r0
    1846:	df 91       	pop	r29
    1848:	cf 91       	pop	r28
    184a:	08 95       	ret

0000184c <sensirion_i2c_write_cmd_with_args>:

int16_t sensirion_i2c_write_cmd_with_args(uint8_t address, uint16_t command,
                                          const uint16_t* data_words,
                                          uint16_t num_words) {
    184c:	cf 93       	push	r28
    184e:	df 93       	push	r29
    1850:	cd b7       	in	r28, 0x3d	; 61
    1852:	de b7       	in	r29, 0x3e	; 62
    1854:	a9 97       	sbiw	r28, 0x29	; 41
    1856:	0f b6       	in	r0, 0x3f	; 63
    1858:	f8 94       	cli
    185a:	de bf       	out	0x3e, r29	; 62
    185c:	0f be       	out	0x3f, r0	; 63
    185e:	cd bf       	out	0x3d, r28	; 61
    1860:	8b a3       	std	Y+35, r24	; 0x23
    1862:	7d a3       	std	Y+37, r23	; 0x25
    1864:	6c a3       	std	Y+36, r22	; 0x24
    1866:	5f a3       	std	Y+39, r21	; 0x27
    1868:	4e a3       	std	Y+38, r20	; 0x26
    186a:	39 a7       	std	Y+41, r19	; 0x29
    186c:	28 a7       	std	Y+40, r18	; 0x28
    uint8_t buf[SENSIRION_MAX_BUFFER_WORDS];
    uint16_t buf_size;

    buf_size = sensirion_fill_cmd_send_buf(buf, command, data_words, num_words);
    186e:	28 a5       	ldd	r18, Y+40	; 0x28
    1870:	4e a1       	ldd	r20, Y+38	; 0x26
    1872:	5f a1       	ldd	r21, Y+39	; 0x27
    1874:	6c a1       	ldd	r22, Y+36	; 0x24
    1876:	7d a1       	ldd	r23, Y+37	; 0x25
    1878:	ce 01       	movw	r24, r28
    187a:	03 96       	adiw	r24, 0x03	; 3
    187c:	0e 94 33 0a 	call	0x1466	; 0x1466 <sensirion_fill_cmd_send_buf>
    1880:	9a 83       	std	Y+2, r25	; 0x02
    1882:	89 83       	std	Y+1, r24	; 0x01
    return sensirion_i2c_write(address, buf, buf_size);
    1884:	29 81       	ldd	r18, Y+1	; 0x01
    1886:	3a 81       	ldd	r19, Y+2	; 0x02
    1888:	ce 01       	movw	r24, r28
    188a:	03 96       	adiw	r24, 0x03	; 3
    188c:	a9 01       	movw	r20, r18
    188e:	bc 01       	movw	r22, r24
    1890:	8b a1       	ldd	r24, Y+35	; 0x23
    1892:	0e 94 af 0e 	call	0x1d5e	; 0x1d5e <sensirion_i2c_write>
    1896:	08 2e       	mov	r0, r24
    1898:	00 0c       	add	r0, r0
    189a:	99 0b       	sbc	r25, r25
}
    189c:	a9 96       	adiw	r28, 0x29	; 41
    189e:	0f b6       	in	r0, 0x3f	; 63
    18a0:	f8 94       	cli
    18a2:	de bf       	out	0x3e, r29	; 62
    18a4:	0f be       	out	0x3f, r0	; 63
    18a6:	cd bf       	out	0x3d, r28	; 61
    18a8:	df 91       	pop	r29
    18aa:	cf 91       	pop	r28
    18ac:	08 95       	ret

000018ae <sensirion_i2c_delayed_read_cmd>:

int16_t sensirion_i2c_delayed_read_cmd(uint8_t address, uint16_t cmd,
                                       uint32_t delay_us, uint16_t* data_words,
                                       uint16_t num_words) {
    18ae:	ef 92       	push	r14
    18b0:	ff 92       	push	r15
    18b2:	0f 93       	push	r16
    18b4:	1f 93       	push	r17
    18b6:	cf 93       	push	r28
    18b8:	df 93       	push	r29
    18ba:	cd b7       	in	r28, 0x3d	; 61
    18bc:	de b7       	in	r29, 0x3e	; 62
    18be:	2f 97       	sbiw	r28, 0x0f	; 15
    18c0:	0f b6       	in	r0, 0x3f	; 63
    18c2:	f8 94       	cli
    18c4:	de bf       	out	0x3e, r29	; 62
    18c6:	0f be       	out	0x3f, r0	; 63
    18c8:	cd bf       	out	0x3d, r28	; 61
    18ca:	8d 83       	std	Y+5, r24	; 0x05
    18cc:	7f 83       	std	Y+7, r23	; 0x07
    18ce:	6e 83       	std	Y+6, r22	; 0x06
    18d0:	28 87       	std	Y+8, r18	; 0x08
    18d2:	39 87       	std	Y+9, r19	; 0x09
    18d4:	4a 87       	std	Y+10, r20	; 0x0a
    18d6:	5b 87       	std	Y+11, r21	; 0x0b
    18d8:	1d 87       	std	Y+13, r17	; 0x0d
    18da:	0c 87       	std	Y+12, r16	; 0x0c
    18dc:	ff 86       	std	Y+15, r15	; 0x0f
    18de:	ee 86       	std	Y+14, r14	; 0x0e
    int16_t ret;
    uint8_t buf[SENSIRION_COMMAND_SIZE];

    sensirion_fill_cmd_send_buf(buf, cmd, NULL, 0);
    18e0:	6e 81       	ldd	r22, Y+6	; 0x06
    18e2:	7f 81       	ldd	r23, Y+7	; 0x07
    18e4:	ce 01       	movw	r24, r28
    18e6:	03 96       	adiw	r24, 0x03	; 3
    18e8:	20 e0       	ldi	r18, 0x00	; 0
    18ea:	40 e0       	ldi	r20, 0x00	; 0
    18ec:	50 e0       	ldi	r21, 0x00	; 0
    18ee:	0e 94 33 0a 	call	0x1466	; 0x1466 <sensirion_fill_cmd_send_buf>
    ret = sensirion_i2c_write(address, buf, SENSIRION_COMMAND_SIZE);
    18f2:	ce 01       	movw	r24, r28
    18f4:	03 96       	adiw	r24, 0x03	; 3
    18f6:	42 e0       	ldi	r20, 0x02	; 2
    18f8:	50 e0       	ldi	r21, 0x00	; 0
    18fa:	bc 01       	movw	r22, r24
    18fc:	8d 81       	ldd	r24, Y+5	; 0x05
    18fe:	0e 94 af 0e 	call	0x1d5e	; 0x1d5e <sensirion_i2c_write>
    1902:	08 2e       	mov	r0, r24
    1904:	00 0c       	add	r0, r0
    1906:	99 0b       	sbc	r25, r25
    1908:	9a 83       	std	Y+2, r25	; 0x02
    190a:	89 83       	std	Y+1, r24	; 0x01
    if (ret != NO_ERROR)
    190c:	89 81       	ldd	r24, Y+1	; 0x01
    190e:	9a 81       	ldd	r25, Y+2	; 0x02
    1910:	89 2b       	or	r24, r25
    1912:	19 f0       	breq	.+6      	; 0x191a <sensirion_i2c_delayed_read_cmd+0x6c>
        return ret;
    1914:	89 81       	ldd	r24, Y+1	; 0x01
    1916:	9a 81       	ldd	r25, Y+2	; 0x02
    1918:	19 c0       	rjmp	.+50     	; 0x194c <sensirion_i2c_delayed_read_cmd+0x9e>

    if (delay_us)
    191a:	88 85       	ldd	r24, Y+8	; 0x08
    191c:	99 85       	ldd	r25, Y+9	; 0x09
    191e:	aa 85       	ldd	r26, Y+10	; 0x0a
    1920:	bb 85       	ldd	r27, Y+11	; 0x0b
    1922:	89 2b       	or	r24, r25
    1924:	8a 2b       	or	r24, r26
    1926:	8b 2b       	or	r24, r27
    1928:	41 f0       	breq	.+16     	; 0x193a <sensirion_i2c_delayed_read_cmd+0x8c>
        sensirion_sleep_usec(delay_us);
    192a:	88 85       	ldd	r24, Y+8	; 0x08
    192c:	99 85       	ldd	r25, Y+9	; 0x09
    192e:	aa 85       	ldd	r26, Y+10	; 0x0a
    1930:	bb 85       	ldd	r27, Y+11	; 0x0b
    1932:	bc 01       	movw	r22, r24
    1934:	cd 01       	movw	r24, r26
    1936:	0e 94 d8 0e 	call	0x1db0	; 0x1db0 <sensirion_sleep_usec>

    return sensirion_i2c_read_words(address, data_words, num_words);
    193a:	2e 85       	ldd	r18, Y+14	; 0x0e
    193c:	3f 85       	ldd	r19, Y+15	; 0x0f
    193e:	8c 85       	ldd	r24, Y+12	; 0x0c
    1940:	9d 85       	ldd	r25, Y+13	; 0x0d
    1942:	a9 01       	movw	r20, r18
    1944:	bc 01       	movw	r22, r24
    1946:	8d 81       	ldd	r24, Y+5	; 0x05
    1948:	0e 94 9d 0b 	call	0x173a	; 0x173a <sensirion_i2c_read_words>
}
    194c:	2f 96       	adiw	r28, 0x0f	; 15
    194e:	0f b6       	in	r0, 0x3f	; 63
    1950:	f8 94       	cli
    1952:	de bf       	out	0x3e, r29	; 62
    1954:	0f be       	out	0x3f, r0	; 63
    1956:	cd bf       	out	0x3d, r28	; 61
    1958:	df 91       	pop	r29
    195a:	cf 91       	pop	r28
    195c:	1f 91       	pop	r17
    195e:	0f 91       	pop	r16
    1960:	ff 90       	pop	r15
    1962:	ef 90       	pop	r14
    1964:	08 95       	ret

00001966 <sensirion_i2c_read_cmd>:

int16_t sensirion_i2c_read_cmd(uint8_t address, uint16_t cmd,
                               uint16_t* data_words, uint16_t num_words) {
    1966:	ef 92       	push	r14
    1968:	ff 92       	push	r15
    196a:	0f 93       	push	r16
    196c:	1f 93       	push	r17
    196e:	cf 93       	push	r28
    1970:	df 93       	push	r29
    1972:	cd b7       	in	r28, 0x3d	; 61
    1974:	de b7       	in	r29, 0x3e	; 62
    1976:	27 97       	sbiw	r28, 0x07	; 7
    1978:	0f b6       	in	r0, 0x3f	; 63
    197a:	f8 94       	cli
    197c:	de bf       	out	0x3e, r29	; 62
    197e:	0f be       	out	0x3f, r0	; 63
    1980:	cd bf       	out	0x3d, r28	; 61
    1982:	89 83       	std	Y+1, r24	; 0x01
    1984:	7b 83       	std	Y+3, r23	; 0x03
    1986:	6a 83       	std	Y+2, r22	; 0x02
    1988:	5d 83       	std	Y+5, r21	; 0x05
    198a:	4c 83       	std	Y+4, r20	; 0x04
    198c:	3f 83       	std	Y+7, r19	; 0x07
    198e:	2e 83       	std	Y+6, r18	; 0x06
    return sensirion_i2c_delayed_read_cmd(address, cmd, 0, data_words,
    1990:	4e 81       	ldd	r20, Y+6	; 0x06
    1992:	5f 81       	ldd	r21, Y+7	; 0x07
    1994:	2c 81       	ldd	r18, Y+4	; 0x04
    1996:	3d 81       	ldd	r19, Y+5	; 0x05
    1998:	8a 81       	ldd	r24, Y+2	; 0x02
    199a:	9b 81       	ldd	r25, Y+3	; 0x03
    199c:	7a 01       	movw	r14, r20
    199e:	89 01       	movw	r16, r18
    19a0:	20 e0       	ldi	r18, 0x00	; 0
    19a2:	30 e0       	ldi	r19, 0x00	; 0
    19a4:	a9 01       	movw	r20, r18
    19a6:	bc 01       	movw	r22, r24
    19a8:	89 81       	ldd	r24, Y+1	; 0x01
    19aa:	0e 94 57 0c 	call	0x18ae	; 0x18ae <sensirion_i2c_delayed_read_cmd>
                                          num_words);
}
    19ae:	27 96       	adiw	r28, 0x07	; 7
    19b0:	0f b6       	in	r0, 0x3f	; 63
    19b2:	f8 94       	cli
    19b4:	de bf       	out	0x3e, r29	; 62
    19b6:	0f be       	out	0x3f, r0	; 63
    19b8:	cd bf       	out	0x3d, r28	; 61
    19ba:	df 91       	pop	r29
    19bc:	cf 91       	pop	r28
    19be:	1f 91       	pop	r17
    19c0:	0f 91       	pop	r16
    19c2:	ff 90       	pop	r15
    19c4:	ef 90       	pop	r14
    19c6:	08 95       	ret

000019c8 <sps30_probe>:
    if (ret)
        return ret;

    sensirion_sleep_usec(SPS_CMD_DELAY_USEC);
    return 0;
}
    19c8:	cf 93       	push	r28
    19ca:	df 93       	push	r29
    19cc:	cd b7       	in	r28, 0x3d	; 61
    19ce:	de b7       	in	r29, 0x3e	; 62
    19d0:	a0 97       	sbiw	r28, 0x20	; 32
    19d2:	0f b6       	in	r0, 0x3f	; 63
    19d4:	f8 94       	cli
    19d6:	de bf       	out	0x3e, r29	; 62
    19d8:	0f be       	out	0x3f, r0	; 63
    19da:	cd bf       	out	0x3d, r28	; 61
    19dc:	0e 94 46 0e 	call	0x1c8c	; 0x1c8c <sps30_wake_up>
    19e0:	ce 01       	movw	r24, r28
    19e2:	01 96       	adiw	r24, 0x01	; 1
    19e4:	0e 94 32 0d 	call	0x1a64	; 0x1a64 <sps30_get_serial>
    19e8:	a0 96       	adiw	r28, 0x20	; 32
    19ea:	0f b6       	in	r0, 0x3f	; 63
    19ec:	f8 94       	cli
    19ee:	de bf       	out	0x3e, r29	; 62
    19f0:	0f be       	out	0x3f, r0	; 63
    19f2:	cd bf       	out	0x3d, r28	; 61
    19f4:	df 91       	pop	r29
    19f6:	cf 91       	pop	r28
    19f8:	08 95       	ret

000019fa <sps30_read_firmware_version>:
    19fa:	cf 93       	push	r28
    19fc:	df 93       	push	r29
    19fe:	cd b7       	in	r28, 0x3d	; 61
    1a00:	de b7       	in	r29, 0x3e	; 62
    1a02:	28 97       	sbiw	r28, 0x08	; 8
    1a04:	0f b6       	in	r0, 0x3f	; 63
    1a06:	f8 94       	cli
    1a08:	de bf       	out	0x3e, r29	; 62
    1a0a:	0f be       	out	0x3f, r0	; 63
    1a0c:	cd bf       	out	0x3d, r28	; 61
    1a0e:	9e 83       	std	Y+6, r25	; 0x06
    1a10:	8d 83       	std	Y+5, r24	; 0x05
    1a12:	78 87       	std	Y+8, r23	; 0x08
    1a14:	6f 83       	std	Y+7, r22	; 0x07
    1a16:	ce 01       	movw	r24, r28
    1a18:	03 96       	adiw	r24, 0x03	; 3
    1a1a:	21 e0       	ldi	r18, 0x01	; 1
    1a1c:	30 e0       	ldi	r19, 0x00	; 0
    1a1e:	ac 01       	movw	r20, r24
    1a20:	60 e0       	ldi	r22, 0x00	; 0
    1a22:	71 ed       	ldi	r23, 0xD1	; 209
    1a24:	89 e6       	ldi	r24, 0x69	; 105
    1a26:	0e 94 b3 0c 	call	0x1966	; 0x1966 <sensirion_i2c_read_cmd>
    1a2a:	9a 83       	std	Y+2, r25	; 0x02
    1a2c:	89 83       	std	Y+1, r24	; 0x01
    1a2e:	8b 81       	ldd	r24, Y+3	; 0x03
    1a30:	9c 81       	ldd	r25, Y+4	; 0x04
    1a32:	89 2f       	mov	r24, r25
    1a34:	99 27       	eor	r25, r25
    1a36:	28 2f       	mov	r18, r24
    1a38:	8d 81       	ldd	r24, Y+5	; 0x05
    1a3a:	9e 81       	ldd	r25, Y+6	; 0x06
    1a3c:	fc 01       	movw	r30, r24
    1a3e:	20 83       	st	Z, r18
    1a40:	8b 81       	ldd	r24, Y+3	; 0x03
    1a42:	9c 81       	ldd	r25, Y+4	; 0x04
    1a44:	28 2f       	mov	r18, r24
    1a46:	8f 81       	ldd	r24, Y+7	; 0x07
    1a48:	98 85       	ldd	r25, Y+8	; 0x08
    1a4a:	fc 01       	movw	r30, r24
    1a4c:	20 83       	st	Z, r18
    1a4e:	89 81       	ldd	r24, Y+1	; 0x01
    1a50:	9a 81       	ldd	r25, Y+2	; 0x02
    1a52:	28 96       	adiw	r28, 0x08	; 8
    1a54:	0f b6       	in	r0, 0x3f	; 63
    1a56:	f8 94       	cli
    1a58:	de bf       	out	0x3e, r29	; 62
    1a5a:	0f be       	out	0x3f, r0	; 63
    1a5c:	cd bf       	out	0x3d, r28	; 61
    1a5e:	df 91       	pop	r29
    1a60:	cf 91       	pop	r28
    1a62:	08 95       	ret

00001a64 <sps30_get_serial>:
    1a64:	cf 93       	push	r28
    1a66:	df 93       	push	r29
    1a68:	00 d0       	rcall	.+0      	; 0x1a6a <sps30_get_serial+0x6>
    1a6a:	00 d0       	rcall	.+0      	; 0x1a6c <sps30_get_serial+0x8>
    1a6c:	cd b7       	in	r28, 0x3d	; 61
    1a6e:	de b7       	in	r29, 0x3e	; 62
    1a70:	9c 83       	std	Y+4, r25	; 0x04
    1a72:	8b 83       	std	Y+3, r24	; 0x03
    1a74:	63 e3       	ldi	r22, 0x33	; 51
    1a76:	70 ed       	ldi	r23, 0xD0	; 208
    1a78:	89 e6       	ldi	r24, 0x69	; 105
    1a7a:	0e 94 ff 0b 	call	0x17fe	; 0x17fe <sensirion_i2c_write_cmd>
    1a7e:	9a 83       	std	Y+2, r25	; 0x02
    1a80:	89 83       	std	Y+1, r24	; 0x01
    1a82:	89 81       	ldd	r24, Y+1	; 0x01
    1a84:	9a 81       	ldd	r25, Y+2	; 0x02
    1a86:	89 2b       	or	r24, r25
    1a88:	19 f0       	breq	.+6      	; 0x1a90 <sps30_get_serial+0x2c>
    1a8a:	89 81       	ldd	r24, Y+1	; 0x01
    1a8c:	9a 81       	ldd	r25, Y+2	; 0x02
    1a8e:	11 c0       	rjmp	.+34     	; 0x1ab2 <sps30_get_serial+0x4e>
    1a90:	8b 81       	ldd	r24, Y+3	; 0x03
    1a92:	9c 81       	ldd	r25, Y+4	; 0x04
    1a94:	40 e1       	ldi	r20, 0x10	; 16
    1a96:	50 e0       	ldi	r21, 0x00	; 0
    1a98:	bc 01       	movw	r22, r24
    1a9a:	89 e6       	ldi	r24, 0x69	; 105
    1a9c:	0e 94 c8 0a 	call	0x1590	; 0x1590 <sensirion_i2c_read_words_as_bytes>
    1aa0:	9a 83       	std	Y+2, r25	; 0x02
    1aa2:	89 83       	std	Y+1, r24	; 0x01
    1aa4:	8b 81       	ldd	r24, Y+3	; 0x03
    1aa6:	9c 81       	ldd	r25, Y+4	; 0x04
    1aa8:	4f 96       	adiw	r24, 0x1f	; 31
    1aaa:	fc 01       	movw	r30, r24
    1aac:	10 82       	st	Z, r1
    1aae:	89 81       	ldd	r24, Y+1	; 0x01
    1ab0:	9a 81       	ldd	r25, Y+2	; 0x02
    1ab2:	0f 90       	pop	r0
    1ab4:	0f 90       	pop	r0
    1ab6:	0f 90       	pop	r0
    1ab8:	0f 90       	pop	r0
    1aba:	df 91       	pop	r29
    1abc:	cf 91       	pop	r28
    1abe:	08 95       	ret

00001ac0 <sps30_start_measurement>:
    1ac0:	cf 93       	push	r28
    1ac2:	df 93       	push	r29
    1ac4:	00 d0       	rcall	.+0      	; 0x1ac6 <sps30_start_measurement+0x6>
    1ac6:	00 d0       	rcall	.+0      	; 0x1ac8 <sps30_start_measurement+0x8>
    1ac8:	cd b7       	in	r28, 0x3d	; 61
    1aca:	de b7       	in	r29, 0x3e	; 62
    1acc:	80 e0       	ldi	r24, 0x00	; 0
    1ace:	93 e0       	ldi	r25, 0x03	; 3
    1ad0:	9c 83       	std	Y+4, r25	; 0x04
    1ad2:	8b 83       	std	Y+3, r24	; 0x03
    1ad4:	ce 01       	movw	r24, r28
    1ad6:	03 96       	adiw	r24, 0x03	; 3
    1ad8:	21 e0       	ldi	r18, 0x01	; 1
    1ada:	30 e0       	ldi	r19, 0x00	; 0
    1adc:	ac 01       	movw	r20, r24
    1ade:	60 e1       	ldi	r22, 0x10	; 16
    1ae0:	70 e0       	ldi	r23, 0x00	; 0
    1ae2:	89 e6       	ldi	r24, 0x69	; 105
    1ae4:	0e 94 26 0c 	call	0x184c	; 0x184c <sensirion_i2c_write_cmd_with_args>
    1ae8:	9a 83       	std	Y+2, r25	; 0x02
    1aea:	89 83       	std	Y+1, r24	; 0x01
    1aec:	60 e2       	ldi	r22, 0x20	; 32
    1aee:	7e e4       	ldi	r23, 0x4E	; 78
    1af0:	80 e0       	ldi	r24, 0x00	; 0
    1af2:	90 e0       	ldi	r25, 0x00	; 0
    1af4:	0e 94 d8 0e 	call	0x1db0	; 0x1db0 <sensirion_sleep_usec>
    1af8:	89 81       	ldd	r24, Y+1	; 0x01
    1afa:	9a 81       	ldd	r25, Y+2	; 0x02
    1afc:	0f 90       	pop	r0
    1afe:	0f 90       	pop	r0
    1b00:	0f 90       	pop	r0
    1b02:	0f 90       	pop	r0
    1b04:	df 91       	pop	r29
    1b06:	cf 91       	pop	r28
    1b08:	08 95       	ret

00001b0a <sps30_read_measurement>:
    1b0a:	cf 93       	push	r28
    1b0c:	df 93       	push	r29
    1b0e:	cd b7       	in	r28, 0x3d	; 61
    1b10:	de b7       	in	r29, 0x3e	; 62
    1b12:	ac 97       	sbiw	r28, 0x2c	; 44
    1b14:	0f b6       	in	r0, 0x3f	; 63
    1b16:	f8 94       	cli
    1b18:	de bf       	out	0x3e, r29	; 62
    1b1a:	0f be       	out	0x3f, r0	; 63
    1b1c:	cd bf       	out	0x3d, r28	; 61
    1b1e:	9c a7       	std	Y+44, r25	; 0x2c
    1b20:	8b a7       	std	Y+43, r24	; 0x2b
    1b22:	60 e0       	ldi	r22, 0x00	; 0
    1b24:	73 e0       	ldi	r23, 0x03	; 3
    1b26:	89 e6       	ldi	r24, 0x69	; 105
    1b28:	0e 94 ff 0b 	call	0x17fe	; 0x17fe <sensirion_i2c_write_cmd>
    1b2c:	9a 83       	std	Y+2, r25	; 0x02
    1b2e:	89 83       	std	Y+1, r24	; 0x01
    1b30:	89 81       	ldd	r24, Y+1	; 0x01
    1b32:	9a 81       	ldd	r25, Y+2	; 0x02
    1b34:	89 2b       	or	r24, r25
    1b36:	19 f0       	breq	.+6      	; 0x1b3e <sps30_read_measurement+0x34>
    1b38:	89 81       	ldd	r24, Y+1	; 0x01
    1b3a:	9a 81       	ldd	r25, Y+2	; 0x02
    1b3c:	9e c0       	rjmp	.+316    	; 0x1c7a <sps30_read_measurement+0x170>
    1b3e:	ce 01       	movw	r24, r28
    1b40:	03 96       	adiw	r24, 0x03	; 3
    1b42:	44 e1       	ldi	r20, 0x14	; 20
    1b44:	50 e0       	ldi	r21, 0x00	; 0
    1b46:	bc 01       	movw	r22, r24
    1b48:	89 e6       	ldi	r24, 0x69	; 105
    1b4a:	0e 94 c8 0a 	call	0x1590	; 0x1590 <sensirion_i2c_read_words_as_bytes>
    1b4e:	9a 83       	std	Y+2, r25	; 0x02
    1b50:	89 83       	std	Y+1, r24	; 0x01
    1b52:	89 81       	ldd	r24, Y+1	; 0x01
    1b54:	9a 81       	ldd	r25, Y+2	; 0x02
    1b56:	89 2b       	or	r24, r25
    1b58:	19 f0       	breq	.+6      	; 0x1b60 <sps30_read_measurement+0x56>
    1b5a:	89 81       	ldd	r24, Y+1	; 0x01
    1b5c:	9a 81       	ldd	r25, Y+2	; 0x02
    1b5e:	8d c0       	rjmp	.+282    	; 0x1c7a <sps30_read_measurement+0x170>
    1b60:	ce 01       	movw	r24, r28
    1b62:	03 96       	adiw	r24, 0x03	; 3
    1b64:	0e 94 a2 09 	call	0x1344	; 0x1344 <sensirion_bytes_to_float>
    1b68:	dc 01       	movw	r26, r24
    1b6a:	cb 01       	movw	r24, r22
    1b6c:	2b a5       	ldd	r18, Y+43	; 0x2b
    1b6e:	3c a5       	ldd	r19, Y+44	; 0x2c
    1b70:	f9 01       	movw	r30, r18
    1b72:	80 83       	st	Z, r24
    1b74:	91 83       	std	Z+1, r25	; 0x01
    1b76:	a2 83       	std	Z+2, r26	; 0x02
    1b78:	b3 83       	std	Z+3, r27	; 0x03
    1b7a:	ce 01       	movw	r24, r28
    1b7c:	03 96       	adiw	r24, 0x03	; 3
    1b7e:	04 96       	adiw	r24, 0x04	; 4
    1b80:	0e 94 a2 09 	call	0x1344	; 0x1344 <sensirion_bytes_to_float>
    1b84:	dc 01       	movw	r26, r24
    1b86:	cb 01       	movw	r24, r22
    1b88:	2b a5       	ldd	r18, Y+43	; 0x2b
    1b8a:	3c a5       	ldd	r19, Y+44	; 0x2c
    1b8c:	f9 01       	movw	r30, r18
    1b8e:	84 83       	std	Z+4, r24	; 0x04
    1b90:	95 83       	std	Z+5, r25	; 0x05
    1b92:	a6 83       	std	Z+6, r26	; 0x06
    1b94:	b7 83       	std	Z+7, r27	; 0x07
    1b96:	ce 01       	movw	r24, r28
    1b98:	03 96       	adiw	r24, 0x03	; 3
    1b9a:	08 96       	adiw	r24, 0x08	; 8
    1b9c:	0e 94 a2 09 	call	0x1344	; 0x1344 <sensirion_bytes_to_float>
    1ba0:	dc 01       	movw	r26, r24
    1ba2:	cb 01       	movw	r24, r22
    1ba4:	2b a5       	ldd	r18, Y+43	; 0x2b
    1ba6:	3c a5       	ldd	r19, Y+44	; 0x2c
    1ba8:	f9 01       	movw	r30, r18
    1baa:	80 87       	std	Z+8, r24	; 0x08
    1bac:	91 87       	std	Z+9, r25	; 0x09
    1bae:	a2 87       	std	Z+10, r26	; 0x0a
    1bb0:	b3 87       	std	Z+11, r27	; 0x0b
    1bb2:	ce 01       	movw	r24, r28
    1bb4:	03 96       	adiw	r24, 0x03	; 3
    1bb6:	0c 96       	adiw	r24, 0x0c	; 12
    1bb8:	0e 94 a2 09 	call	0x1344	; 0x1344 <sensirion_bytes_to_float>
    1bbc:	dc 01       	movw	r26, r24
    1bbe:	cb 01       	movw	r24, r22
    1bc0:	2b a5       	ldd	r18, Y+43	; 0x2b
    1bc2:	3c a5       	ldd	r19, Y+44	; 0x2c
    1bc4:	f9 01       	movw	r30, r18
    1bc6:	84 87       	std	Z+12, r24	; 0x0c
    1bc8:	95 87       	std	Z+13, r25	; 0x0d
    1bca:	a6 87       	std	Z+14, r26	; 0x0e
    1bcc:	b7 87       	std	Z+15, r27	; 0x0f
    1bce:	ce 01       	movw	r24, r28
    1bd0:	03 96       	adiw	r24, 0x03	; 3
    1bd2:	40 96       	adiw	r24, 0x10	; 16
    1bd4:	0e 94 a2 09 	call	0x1344	; 0x1344 <sensirion_bytes_to_float>
    1bd8:	dc 01       	movw	r26, r24
    1bda:	cb 01       	movw	r24, r22
    1bdc:	2b a5       	ldd	r18, Y+43	; 0x2b
    1bde:	3c a5       	ldd	r19, Y+44	; 0x2c
    1be0:	f9 01       	movw	r30, r18
    1be2:	80 8b       	std	Z+16, r24	; 0x10
    1be4:	91 8b       	std	Z+17, r25	; 0x11
    1be6:	a2 8b       	std	Z+18, r26	; 0x12
    1be8:	b3 8b       	std	Z+19, r27	; 0x13
    1bea:	ce 01       	movw	r24, r28
    1bec:	03 96       	adiw	r24, 0x03	; 3
    1bee:	44 96       	adiw	r24, 0x14	; 20
    1bf0:	0e 94 a2 09 	call	0x1344	; 0x1344 <sensirion_bytes_to_float>
    1bf4:	dc 01       	movw	r26, r24
    1bf6:	cb 01       	movw	r24, r22
    1bf8:	2b a5       	ldd	r18, Y+43	; 0x2b
    1bfa:	3c a5       	ldd	r19, Y+44	; 0x2c
    1bfc:	f9 01       	movw	r30, r18
    1bfe:	84 8b       	std	Z+20, r24	; 0x14
    1c00:	95 8b       	std	Z+21, r25	; 0x15
    1c02:	a6 8b       	std	Z+22, r26	; 0x16
    1c04:	b7 8b       	std	Z+23, r27	; 0x17
    1c06:	ce 01       	movw	r24, r28
    1c08:	03 96       	adiw	r24, 0x03	; 3
    1c0a:	48 96       	adiw	r24, 0x18	; 24
    1c0c:	0e 94 a2 09 	call	0x1344	; 0x1344 <sensirion_bytes_to_float>
    1c10:	dc 01       	movw	r26, r24
    1c12:	cb 01       	movw	r24, r22
    1c14:	2b a5       	ldd	r18, Y+43	; 0x2b
    1c16:	3c a5       	ldd	r19, Y+44	; 0x2c
    1c18:	f9 01       	movw	r30, r18
    1c1a:	80 8f       	std	Z+24, r24	; 0x18
    1c1c:	91 8f       	std	Z+25, r25	; 0x19
    1c1e:	a2 8f       	std	Z+26, r26	; 0x1a
    1c20:	b3 8f       	std	Z+27, r27	; 0x1b
    1c22:	ce 01       	movw	r24, r28
    1c24:	03 96       	adiw	r24, 0x03	; 3
    1c26:	4c 96       	adiw	r24, 0x1c	; 28
    1c28:	0e 94 a2 09 	call	0x1344	; 0x1344 <sensirion_bytes_to_float>
    1c2c:	dc 01       	movw	r26, r24
    1c2e:	cb 01       	movw	r24, r22
    1c30:	2b a5       	ldd	r18, Y+43	; 0x2b
    1c32:	3c a5       	ldd	r19, Y+44	; 0x2c
    1c34:	f9 01       	movw	r30, r18
    1c36:	84 8f       	std	Z+28, r24	; 0x1c
    1c38:	95 8f       	std	Z+29, r25	; 0x1d
    1c3a:	a6 8f       	std	Z+30, r26	; 0x1e
    1c3c:	b7 8f       	std	Z+31, r27	; 0x1f
    1c3e:	ce 01       	movw	r24, r28
    1c40:	03 96       	adiw	r24, 0x03	; 3
    1c42:	80 96       	adiw	r24, 0x20	; 32
    1c44:	0e 94 a2 09 	call	0x1344	; 0x1344 <sensirion_bytes_to_float>
    1c48:	dc 01       	movw	r26, r24
    1c4a:	cb 01       	movw	r24, r22
    1c4c:	2b a5       	ldd	r18, Y+43	; 0x2b
    1c4e:	3c a5       	ldd	r19, Y+44	; 0x2c
    1c50:	f9 01       	movw	r30, r18
    1c52:	80 a3       	std	Z+32, r24	; 0x20
    1c54:	91 a3       	std	Z+33, r25	; 0x21
    1c56:	a2 a3       	std	Z+34, r26	; 0x22
    1c58:	b3 a3       	std	Z+35, r27	; 0x23
    1c5a:	ce 01       	movw	r24, r28
    1c5c:	03 96       	adiw	r24, 0x03	; 3
    1c5e:	84 96       	adiw	r24, 0x24	; 36
    1c60:	0e 94 a2 09 	call	0x1344	; 0x1344 <sensirion_bytes_to_float>
    1c64:	dc 01       	movw	r26, r24
    1c66:	cb 01       	movw	r24, r22
    1c68:	2b a5       	ldd	r18, Y+43	; 0x2b
    1c6a:	3c a5       	ldd	r19, Y+44	; 0x2c
    1c6c:	f9 01       	movw	r30, r18
    1c6e:	84 a3       	std	Z+36, r24	; 0x24
    1c70:	95 a3       	std	Z+37, r25	; 0x25
    1c72:	a6 a3       	std	Z+38, r26	; 0x26
    1c74:	b7 a3       	std	Z+39, r27	; 0x27
    1c76:	80 e0       	ldi	r24, 0x00	; 0
    1c78:	90 e0       	ldi	r25, 0x00	; 0
    1c7a:	ac 96       	adiw	r28, 0x2c	; 44
    1c7c:	0f b6       	in	r0, 0x3f	; 63
    1c7e:	f8 94       	cli
    1c80:	de bf       	out	0x3e, r29	; 62
    1c82:	0f be       	out	0x3f, r0	; 63
    1c84:	cd bf       	out	0x3d, r28	; 61
    1c86:	df 91       	pop	r29
    1c88:	cf 91       	pop	r28
    1c8a:	08 95       	ret

00001c8c <sps30_wake_up>:

int16_t sps30_wake_up(void) {
    1c8c:	cf 93       	push	r28
    1c8e:	df 93       	push	r29
    1c90:	00 d0       	rcall	.+0      	; 0x1c92 <sps30_wake_up+0x6>
    1c92:	cd b7       	in	r28, 0x3d	; 61
    1c94:	de b7       	in	r29, 0x3e	; 62
    int16_t ret;

    /* wake-up must be sent twice within 100ms, ignore first return value */
    (void)sensirion_i2c_write_cmd(SPS30_I2C_ADDRESS, SPS_CMD_WAKE_UP);
    1c96:	63 e0       	ldi	r22, 0x03	; 3
    1c98:	71 e1       	ldi	r23, 0x11	; 17
    1c9a:	89 e6       	ldi	r24, 0x69	; 105
    1c9c:	0e 94 ff 0b 	call	0x17fe	; 0x17fe <sensirion_i2c_write_cmd>
    ret = sensirion_i2c_write_cmd(SPS30_I2C_ADDRESS, SPS_CMD_WAKE_UP);
    1ca0:	63 e0       	ldi	r22, 0x03	; 3
    1ca2:	71 e1       	ldi	r23, 0x11	; 17
    1ca4:	89 e6       	ldi	r24, 0x69	; 105
    1ca6:	0e 94 ff 0b 	call	0x17fe	; 0x17fe <sensirion_i2c_write_cmd>
    1caa:	9a 83       	std	Y+2, r25	; 0x02
    1cac:	89 83       	std	Y+1, r24	; 0x01
	
    if (ret)
    1cae:	89 81       	ldd	r24, Y+1	; 0x01
    1cb0:	9a 81       	ldd	r25, Y+2	; 0x02
    1cb2:	89 2b       	or	r24, r25
    1cb4:	19 f0       	breq	.+6      	; 0x1cbc <sps30_wake_up+0x30>
	{
		//printf("\nret:%d\n", ret);
        return ret;
    1cb6:	89 81       	ldd	r24, Y+1	; 0x01
    1cb8:	9a 81       	ldd	r25, Y+2	; 0x02
    1cba:	08 c0       	rjmp	.+16     	; 0x1ccc <sps30_wake_up+0x40>
	}

    sensirion_sleep_usec(SPS_CMD_DELAY_USEC);
    1cbc:	68 e8       	ldi	r22, 0x88	; 136
    1cbe:	73 e1       	ldi	r23, 0x13	; 19
    1cc0:	80 e0       	ldi	r24, 0x00	; 0
    1cc2:	90 e0       	ldi	r25, 0x00	; 0
    1cc4:	0e 94 d8 0e 	call	0x1db0	; 0x1db0 <sensirion_sleep_usec>
    return 0;
    1cc8:	80 e0       	ldi	r24, 0x00	; 0
    1cca:	90 e0       	ldi	r25, 0x00	; 0
}
    1ccc:	0f 90       	pop	r0
    1cce:	0f 90       	pop	r0
    1cd0:	df 91       	pop	r29
    1cd2:	cf 91       	pop	r28
    1cd4:	08 95       	ret

00001cd6 <sensirion_i2c_init>:
/**
 * Release all resources initialized by sensirion_i2c_init().
 */
void sensirion_i2c_release(void) {
    // IMPLEMENT or leave empty if no resources need to be freed
}
    1cd6:	cf 93       	push	r28
    1cd8:	df 93       	push	r29
    1cda:	cd b7       	in	r28, 0x3d	; 61
    1cdc:	de b7       	in	r29, 0x3e	; 62
    1cde:	89 eb       	ldi	r24, 0xB9	; 185
    1ce0:	90 e0       	ldi	r25, 0x00	; 0
    1ce2:	fc 01       	movw	r30, r24
    1ce4:	10 82       	st	Z, r1
    1ce6:	88 eb       	ldi	r24, 0xB8	; 184
    1ce8:	90 e0       	ldi	r25, 0x00	; 0
    1cea:	29 e4       	ldi	r18, 0x49	; 73
    1cec:	fc 01       	movw	r30, r24
    1cee:	20 83       	st	Z, r18
    1cf0:	89 ed       	ldi	r24, 0xD9	; 217
    1cf2:	90 e0       	ldi	r25, 0x00	; 0
    1cf4:	fc 01       	movw	r30, r24
    1cf6:	10 82       	st	Z, r1
    1cf8:	88 ed       	ldi	r24, 0xD8	; 216
    1cfa:	90 e0       	ldi	r25, 0x00	; 0
    1cfc:	29 e4       	ldi	r18, 0x49	; 73
    1cfe:	fc 01       	movw	r30, r24
    1d00:	20 83       	st	Z, r18
    1d02:	00 00       	nop
    1d04:	df 91       	pop	r29
    1d06:	cf 91       	pop	r28
    1d08:	08 95       	ret

00001d0a <sensirion_i2c_read>:
 * @param address 7-bit I2C address to read from
 * @param data    pointer to the buffer where the data is to be stored
 * @param count   number of bytes to read from I2C and store in the buffer
 * @returns 0 on success, error code otherwise
 */
int8_t sensirion_i2c_read(uint8_t address, uint8_t* data, uint16_t count) {
    1d0a:	0f 93       	push	r16
    1d0c:	1f 93       	push	r17
    1d0e:	cf 93       	push	r28
    1d10:	df 93       	push	r29
    1d12:	00 d0       	rcall	.+0      	; 0x1d14 <sensirion_i2c_read+0xa>
    1d14:	00 d0       	rcall	.+0      	; 0x1d16 <sensirion_i2c_read+0xc>
    1d16:	1f 92       	push	r1
    1d18:	cd b7       	in	r28, 0x3d	; 61
    1d1a:	de b7       	in	r29, 0x3e	; 62
    1d1c:	89 83       	std	Y+1, r24	; 0x01
    1d1e:	7b 83       	std	Y+3, r23	; 0x03
    1d20:	6a 83       	std	Y+2, r22	; 0x02
    1d22:	5d 83       	std	Y+5, r21	; 0x05
    1d24:	4c 83       	std	Y+4, r20	; 0x04
    if(i2c_io(SPS30_ADDR, NULL, 0, data, count) != 0)
    1d26:	2c 81       	ldd	r18, Y+4	; 0x04
    1d28:	3d 81       	ldd	r19, Y+5	; 0x05
    1d2a:	8a 81       	ldd	r24, Y+2	; 0x02
    1d2c:	9b 81       	ldd	r25, Y+3	; 0x03
    1d2e:	89 01       	movw	r16, r18
    1d30:	9c 01       	movw	r18, r24
    1d32:	40 e0       	ldi	r20, 0x00	; 0
    1d34:	50 e0       	ldi	r21, 0x00	; 0
    1d36:	60 e0       	ldi	r22, 0x00	; 0
    1d38:	70 e0       	ldi	r23, 0x00	; 0
    1d3a:	89 e6       	ldi	r24, 0x69	; 105
    1d3c:	0e 94 e3 0f 	call	0x1fc6	; 0x1fc6 <i2c_io>
    1d40:	88 23       	and	r24, r24
    1d42:	11 f0       	breq	.+4      	; 0x1d48 <sensirion_i2c_read+0x3e>
    	return STATUS_FAIL;
    1d44:	8f ef       	ldi	r24, 0xFF	; 255
    1d46:	01 c0       	rjmp	.+2      	; 0x1d4a <sensirion_i2c_read+0x40>
	return NO_ERROR;
    1d48:	80 e0       	ldi	r24, 0x00	; 0
}
    1d4a:	0f 90       	pop	r0
    1d4c:	0f 90       	pop	r0
    1d4e:	0f 90       	pop	r0
    1d50:	0f 90       	pop	r0
    1d52:	0f 90       	pop	r0
    1d54:	df 91       	pop	r29
    1d56:	cf 91       	pop	r28
    1d58:	1f 91       	pop	r17
    1d5a:	0f 91       	pop	r16
    1d5c:	08 95       	ret

00001d5e <sensirion_i2c_write>:
 * @param data    pointer to the buffer containing the data to write
 * @param count   number of bytes to read from the buffer and send over I2C
 * @returns 0 on success, error code otherwise
 */
int8_t sensirion_i2c_write(uint8_t address, const uint8_t* data,
                           uint16_t count) {
    1d5e:	0f 93       	push	r16
    1d60:	1f 93       	push	r17
    1d62:	cf 93       	push	r28
    1d64:	df 93       	push	r29
    1d66:	00 d0       	rcall	.+0      	; 0x1d68 <sensirion_i2c_write+0xa>
    1d68:	00 d0       	rcall	.+0      	; 0x1d6a <sensirion_i2c_write+0xc>
    1d6a:	1f 92       	push	r1
    1d6c:	cd b7       	in	r28, 0x3d	; 61
    1d6e:	de b7       	in	r29, 0x3e	; 62
    1d70:	89 83       	std	Y+1, r24	; 0x01
    1d72:	7b 83       	std	Y+3, r23	; 0x03
    1d74:	6a 83       	std	Y+2, r22	; 0x02
    1d76:	5d 83       	std	Y+5, r21	; 0x05
    1d78:	4c 83       	std	Y+4, r20	; 0x04
	if(i2c_io(SPS30_ADDR, data, count, NULL, 0) != 0)
    1d7a:	4c 81       	ldd	r20, Y+4	; 0x04
    1d7c:	5d 81       	ldd	r21, Y+5	; 0x05
    1d7e:	8a 81       	ldd	r24, Y+2	; 0x02
    1d80:	9b 81       	ldd	r25, Y+3	; 0x03
    1d82:	00 e0       	ldi	r16, 0x00	; 0
    1d84:	10 e0       	ldi	r17, 0x00	; 0
    1d86:	20 e0       	ldi	r18, 0x00	; 0
    1d88:	30 e0       	ldi	r19, 0x00	; 0
    1d8a:	bc 01       	movw	r22, r24
    1d8c:	89 e6       	ldi	r24, 0x69	; 105
    1d8e:	0e 94 e3 0f 	call	0x1fc6	; 0x1fc6 <i2c_io>
    1d92:	88 23       	and	r24, r24
    1d94:	11 f0       	breq	.+4      	; 0x1d9a <sensirion_i2c_write+0x3c>
    	return STATUS_FAIL;
    1d96:	8f ef       	ldi	r24, 0xFF	; 255
    1d98:	01 c0       	rjmp	.+2      	; 0x1d9c <sensirion_i2c_write+0x3e>
	return NO_ERROR;
    1d9a:	80 e0       	ldi	r24, 0x00	; 0
}
    1d9c:	0f 90       	pop	r0
    1d9e:	0f 90       	pop	r0
    1da0:	0f 90       	pop	r0
    1da2:	0f 90       	pop	r0
    1da4:	0f 90       	pop	r0
    1da6:	df 91       	pop	r29
    1da8:	cf 91       	pop	r28
    1daa:	1f 91       	pop	r17
    1dac:	0f 91       	pop	r16
    1dae:	08 95       	ret

00001db0 <sensirion_sleep_usec>:
 *
 * Despite the unit, a <10 millisecond precision is sufficient.
 *
 * @param useconds the sleep time in microseconds
 */
void sensirion_sleep_usec(uint32_t useconds) {
    1db0:	cf 93       	push	r28
    1db2:	df 93       	push	r29
    1db4:	cd b7       	in	r28, 0x3d	; 61
    1db6:	de b7       	in	r29, 0x3e	; 62
    1db8:	a4 97       	sbiw	r28, 0x24	; 36
    1dba:	0f b6       	in	r0, 0x3f	; 63
    1dbc:	f8 94       	cli
    1dbe:	de bf       	out	0x3e, r29	; 62
    1dc0:	0f be       	out	0x3f, r0	; 63
    1dc2:	cd bf       	out	0x3d, r28	; 61
    1dc4:	69 a3       	std	Y+33, r22	; 0x21
    1dc6:	7a a3       	std	Y+34, r23	; 0x22
    1dc8:	8b a3       	std	Y+35, r24	; 0x23
    1dca:	9c a3       	std	Y+36, r25	; 0x24
    _delay_us(useconds);
    1dcc:	69 a1       	ldd	r22, Y+33	; 0x21
    1dce:	7a a1       	ldd	r23, Y+34	; 0x22
    1dd0:	8b a1       	ldd	r24, Y+35	; 0x23
    1dd2:	9c a1       	ldd	r25, Y+36	; 0x24
    1dd4:	0e 94 4a 18 	call	0x3094	; 0x3094 <__floatunsisf>
    1dd8:	dc 01       	movw	r26, r24
    1dda:	cb 01       	movw	r24, r22
    1ddc:	89 83       	std	Y+1, r24	; 0x01
    1dde:	9a 83       	std	Y+2, r25	; 0x02
    1de0:	ab 83       	std	Y+3, r26	; 0x03
    1de2:	bc 83       	std	Y+4, r27	; 0x04
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
    1de4:	2b ea       	ldi	r18, 0xAB	; 171
    1de6:	3a ea       	ldi	r19, 0xAA	; 170
    1de8:	4a ea       	ldi	r20, 0xAA	; 170
    1dea:	50 e4       	ldi	r21, 0x40	; 64
    1dec:	69 81       	ldd	r22, Y+1	; 0x01
    1dee:	7a 81       	ldd	r23, Y+2	; 0x02
    1df0:	8b 81       	ldd	r24, Y+3	; 0x03
    1df2:	9c 81       	ldd	r25, Y+4	; 0x04
    1df4:	0e 94 01 19 	call	0x3202	; 0x3202 <__mulsf3>
    1df8:	dc 01       	movw	r26, r24
    1dfa:	cb 01       	movw	r24, r22
    1dfc:	8d 83       	std	Y+5, r24	; 0x05
    1dfe:	9e 83       	std	Y+6, r25	; 0x06
    1e00:	af 83       	std	Y+7, r26	; 0x07
    1e02:	b8 87       	std	Y+8, r27	; 0x08
	__tmp2 = ((F_CPU) / 4e6) * __us;
    1e04:	20 e0       	ldi	r18, 0x00	; 0
    1e06:	30 e0       	ldi	r19, 0x00	; 0
    1e08:	40 e8       	ldi	r20, 0x80	; 128
    1e0a:	50 e4       	ldi	r21, 0x40	; 64
    1e0c:	69 81       	ldd	r22, Y+1	; 0x01
    1e0e:	7a 81       	ldd	r23, Y+2	; 0x02
    1e10:	8b 81       	ldd	r24, Y+3	; 0x03
    1e12:	9c 81       	ldd	r25, Y+4	; 0x04
    1e14:	0e 94 01 19 	call	0x3202	; 0x3202 <__mulsf3>
    1e18:	dc 01       	movw	r26, r24
    1e1a:	cb 01       	movw	r24, r22
    1e1c:	89 87       	std	Y+9, r24	; 0x09
    1e1e:	9a 87       	std	Y+10, r25	; 0x0a
    1e20:	ab 87       	std	Y+11, r26	; 0x0b
    1e22:	bc 87       	std	Y+12, r27	; 0x0c
	if (__tmp < 1.0)
    1e24:	20 e0       	ldi	r18, 0x00	; 0
    1e26:	30 e0       	ldi	r19, 0x00	; 0
    1e28:	40 e8       	ldi	r20, 0x80	; 128
    1e2a:	5f e3       	ldi	r21, 0x3F	; 63
    1e2c:	6d 81       	ldd	r22, Y+5	; 0x05
    1e2e:	7e 81       	ldd	r23, Y+6	; 0x06
    1e30:	8f 81       	ldd	r24, Y+7	; 0x07
    1e32:	98 85       	ldd	r25, Y+8	; 0x08
    1e34:	0e 94 9d 17 	call	0x2f3a	; 0x2f3a <__cmpsf2>
    1e38:	88 23       	and	r24, r24
    1e3a:	1c f4       	brge	.+6      	; 0x1e42 <sensirion_sleep_usec+0x92>
		__ticks = 1;
    1e3c:	81 e0       	ldi	r24, 0x01	; 1
    1e3e:	8d 87       	std	Y+13, r24	; 0x0d
    1e40:	b2 c0       	rjmp	.+356    	; 0x1fa6 <sensirion_sleep_usec+0x1f6>
	else if (__tmp2 > 65535)
    1e42:	20 e0       	ldi	r18, 0x00	; 0
    1e44:	3f ef       	ldi	r19, 0xFF	; 255
    1e46:	4f e7       	ldi	r20, 0x7F	; 127
    1e48:	57 e4       	ldi	r21, 0x47	; 71
    1e4a:	69 85       	ldd	r22, Y+9	; 0x09
    1e4c:	7a 85       	ldd	r23, Y+10	; 0x0a
    1e4e:	8b 85       	ldd	r24, Y+11	; 0x0b
    1e50:	9c 85       	ldd	r25, Y+12	; 0x0c
    1e52:	0e 94 fc 18 	call	0x31f8	; 0x31f8 <__gesf2>
    1e56:	18 16       	cp	r1, r24
    1e58:	0c f0       	brlt	.+2      	; 0x1e5c <sensirion_sleep_usec+0xac>
    1e5a:	7b c0       	rjmp	.+246    	; 0x1f52 <sensirion_sleep_usec+0x1a2>
	{
		_delay_ms(__us / 1000.0);
    1e5c:	20 e0       	ldi	r18, 0x00	; 0
    1e5e:	30 e0       	ldi	r19, 0x00	; 0
    1e60:	4a e7       	ldi	r20, 0x7A	; 122
    1e62:	54 e4       	ldi	r21, 0x44	; 68
    1e64:	69 81       	ldd	r22, Y+1	; 0x01
    1e66:	7a 81       	ldd	r23, Y+2	; 0x02
    1e68:	8b 81       	ldd	r24, Y+3	; 0x03
    1e6a:	9c 81       	ldd	r25, Y+4	; 0x04
    1e6c:	0e 94 a2 17 	call	0x2f44	; 0x2f44 <__divsf3>
    1e70:	dc 01       	movw	r26, r24
    1e72:	cb 01       	movw	r24, r22
    1e74:	8e 87       	std	Y+14, r24	; 0x0e
    1e76:	9f 87       	std	Y+15, r25	; 0x0f
    1e78:	a8 8b       	std	Y+16, r26	; 0x10
    1e7a:	b9 8b       	std	Y+17, r27	; 0x11

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1e7c:	20 e0       	ldi	r18, 0x00	; 0
    1e7e:	30 e0       	ldi	r19, 0x00	; 0
    1e80:	4a e7       	ldi	r20, 0x7A	; 122
    1e82:	55 e4       	ldi	r21, 0x45	; 69
    1e84:	6e 85       	ldd	r22, Y+14	; 0x0e
    1e86:	7f 85       	ldd	r23, Y+15	; 0x0f
    1e88:	88 89       	ldd	r24, Y+16	; 0x10
    1e8a:	99 89       	ldd	r25, Y+17	; 0x11
    1e8c:	0e 94 01 19 	call	0x3202	; 0x3202 <__mulsf3>
    1e90:	dc 01       	movw	r26, r24
    1e92:	cb 01       	movw	r24, r22
    1e94:	8a 8b       	std	Y+18, r24	; 0x12
    1e96:	9b 8b       	std	Y+19, r25	; 0x13
    1e98:	ac 8b       	std	Y+20, r26	; 0x14
    1e9a:	bd 8b       	std	Y+21, r27	; 0x15
	if (__tmp < 1.0)
    1e9c:	20 e0       	ldi	r18, 0x00	; 0
    1e9e:	30 e0       	ldi	r19, 0x00	; 0
    1ea0:	40 e8       	ldi	r20, 0x80	; 128
    1ea2:	5f e3       	ldi	r21, 0x3F	; 63
    1ea4:	6a 89       	ldd	r22, Y+18	; 0x12
    1ea6:	7b 89       	ldd	r23, Y+19	; 0x13
    1ea8:	8c 89       	ldd	r24, Y+20	; 0x14
    1eaa:	9d 89       	ldd	r25, Y+21	; 0x15
    1eac:	0e 94 9d 17 	call	0x2f3a	; 0x2f3a <__cmpsf2>
    1eb0:	88 23       	and	r24, r24
    1eb2:	2c f4       	brge	.+10     	; 0x1ebe <sensirion_sleep_usec+0x10e>
		__ticks = 1;
    1eb4:	81 e0       	ldi	r24, 0x01	; 1
    1eb6:	90 e0       	ldi	r25, 0x00	; 0
    1eb8:	9f 8b       	std	Y+23, r25	; 0x17
    1eba:	8e 8b       	std	Y+22, r24	; 0x16
    1ebc:	3f c0       	rjmp	.+126    	; 0x1f3c <sensirion_sleep_usec+0x18c>
	else if (__tmp > 65535)
    1ebe:	20 e0       	ldi	r18, 0x00	; 0
    1ec0:	3f ef       	ldi	r19, 0xFF	; 255
    1ec2:	4f e7       	ldi	r20, 0x7F	; 127
    1ec4:	57 e4       	ldi	r21, 0x47	; 71
    1ec6:	6a 89       	ldd	r22, Y+18	; 0x12
    1ec8:	7b 89       	ldd	r23, Y+19	; 0x13
    1eca:	8c 89       	ldd	r24, Y+20	; 0x14
    1ecc:	9d 89       	ldd	r25, Y+21	; 0x15
    1ece:	0e 94 fc 18 	call	0x31f8	; 0x31f8 <__gesf2>
    1ed2:	18 16       	cp	r1, r24
    1ed4:	4c f5       	brge	.+82     	; 0x1f28 <sensirion_sleep_usec+0x178>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ed6:	20 e0       	ldi	r18, 0x00	; 0
    1ed8:	30 e0       	ldi	r19, 0x00	; 0
    1eda:	40 e2       	ldi	r20, 0x20	; 32
    1edc:	51 e4       	ldi	r21, 0x41	; 65
    1ede:	6e 85       	ldd	r22, Y+14	; 0x0e
    1ee0:	7f 85       	ldd	r23, Y+15	; 0x0f
    1ee2:	88 89       	ldd	r24, Y+16	; 0x10
    1ee4:	99 89       	ldd	r25, Y+17	; 0x11
    1ee6:	0e 94 01 19 	call	0x3202	; 0x3202 <__mulsf3>
    1eea:	dc 01       	movw	r26, r24
    1eec:	cb 01       	movw	r24, r22
    1eee:	bc 01       	movw	r22, r24
    1ef0:	cd 01       	movw	r24, r26
    1ef2:	0e 94 1b 18 	call	0x3036	; 0x3036 <__fixunssfsi>
    1ef6:	dc 01       	movw	r26, r24
    1ef8:	cb 01       	movw	r24, r22
    1efa:	9f 8b       	std	Y+23, r25	; 0x17
    1efc:	8e 8b       	std	Y+22, r24	; 0x16
    1efe:	0f c0       	rjmp	.+30     	; 0x1f1e <sensirion_sleep_usec+0x16e>
    1f00:	80 e9       	ldi	r24, 0x90	; 144
    1f02:	91 e0       	ldi	r25, 0x01	; 1
    1f04:	99 8f       	std	Y+25, r25	; 0x19
    1f06:	88 8f       	std	Y+24, r24	; 0x18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1f08:	88 8d       	ldd	r24, Y+24	; 0x18
    1f0a:	99 8d       	ldd	r25, Y+25	; 0x19
    1f0c:	01 97       	sbiw	r24, 0x01	; 1
    1f0e:	f1 f7       	brne	.-4      	; 0x1f0c <sensirion_sleep_usec+0x15c>
    1f10:	99 8f       	std	Y+25, r25	; 0x19
    1f12:	88 8f       	std	Y+24, r24	; 0x18
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f14:	8e 89       	ldd	r24, Y+22	; 0x16
    1f16:	9f 89       	ldd	r25, Y+23	; 0x17
    1f18:	01 97       	sbiw	r24, 0x01	; 1
    1f1a:	9f 8b       	std	Y+23, r25	; 0x17
    1f1c:	8e 8b       	std	Y+22, r24	; 0x16
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f1e:	8e 89       	ldd	r24, Y+22	; 0x16
    1f20:	9f 89       	ldd	r25, Y+23	; 0x17
    1f22:	89 2b       	or	r24, r25
    1f24:	69 f7       	brne	.-38     	; 0x1f00 <sensirion_sleep_usec+0x150>
    1f26:	3f c0       	rjmp	.+126    	; 0x1fa6 <sensirion_sleep_usec+0x1f6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f28:	6a 89       	ldd	r22, Y+18	; 0x12
    1f2a:	7b 89       	ldd	r23, Y+19	; 0x13
    1f2c:	8c 89       	ldd	r24, Y+20	; 0x14
    1f2e:	9d 89       	ldd	r25, Y+21	; 0x15
    1f30:	0e 94 1b 18 	call	0x3036	; 0x3036 <__fixunssfsi>
    1f34:	dc 01       	movw	r26, r24
    1f36:	cb 01       	movw	r24, r22
    1f38:	9f 8b       	std	Y+23, r25	; 0x17
    1f3a:	8e 8b       	std	Y+22, r24	; 0x16
    1f3c:	8e 89       	ldd	r24, Y+22	; 0x16
    1f3e:	9f 89       	ldd	r25, Y+23	; 0x17
    1f40:	9b 8f       	std	Y+27, r25	; 0x1b
    1f42:	8a 8f       	std	Y+26, r24	; 0x1a
    1f44:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1f46:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1f48:	01 97       	sbiw	r24, 0x01	; 1
    1f4a:	f1 f7       	brne	.-4      	; 0x1f48 <sensirion_sleep_usec+0x198>
    1f4c:	9b 8f       	std	Y+27, r25	; 0x1b
    1f4e:	8a 8f       	std	Y+26, r24	; 0x1a
    1f50:	2a c0       	rjmp	.+84     	; 0x1fa6 <sensirion_sleep_usec+0x1f6>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
    1f52:	20 e0       	ldi	r18, 0x00	; 0
    1f54:	30 e0       	ldi	r19, 0x00	; 0
    1f56:	4f e7       	ldi	r20, 0x7F	; 127
    1f58:	53 e4       	ldi	r21, 0x43	; 67
    1f5a:	6d 81       	ldd	r22, Y+5	; 0x05
    1f5c:	7e 81       	ldd	r23, Y+6	; 0x06
    1f5e:	8f 81       	ldd	r24, Y+7	; 0x07
    1f60:	98 85       	ldd	r25, Y+8	; 0x08
    1f62:	0e 94 fc 18 	call	0x31f8	; 0x31f8 <__gesf2>
    1f66:	18 16       	cp	r1, r24
    1f68:	ac f4       	brge	.+42     	; 0x1f94 <sensirion_sleep_usec+0x1e4>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
    1f6a:	69 85       	ldd	r22, Y+9	; 0x09
    1f6c:	7a 85       	ldd	r23, Y+10	; 0x0a
    1f6e:	8b 85       	ldd	r24, Y+11	; 0x0b
    1f70:	9c 85       	ldd	r25, Y+12	; 0x0c
    1f72:	0e 94 1b 18 	call	0x3036	; 0x3036 <__fixunssfsi>
    1f76:	dc 01       	movw	r26, r24
    1f78:	cb 01       	movw	r24, r22
    1f7a:	9d 8f       	std	Y+29, r25	; 0x1d
    1f7c:	8c 8f       	std	Y+28, r24	; 0x1c
    1f7e:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1f80:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1f82:	9f 8f       	std	Y+31, r25	; 0x1f
    1f84:	8e 8f       	std	Y+30, r24	; 0x1e
    1f86:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1f88:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1f8a:	01 97       	sbiw	r24, 0x01	; 1
    1f8c:	f1 f7       	brne	.-4      	; 0x1f8a <sensirion_sleep_usec+0x1da>
    1f8e:	9f 8f       	std	Y+31, r25	; 0x1f
    1f90:	8e 8f       	std	Y+30, r24	; 0x1e
    //     } else {
    //         _delay_us(useconds);
    //         useconds = 0;
    //     }
    // }
}
    1f92:	0f c0       	rjmp	.+30     	; 0x1fb2 <sensirion_sleep_usec+0x202>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1f94:	6d 81       	ldd	r22, Y+5	; 0x05
    1f96:	7e 81       	ldd	r23, Y+6	; 0x06
    1f98:	8f 81       	ldd	r24, Y+7	; 0x07
    1f9a:	98 85       	ldd	r25, Y+8	; 0x08
    1f9c:	0e 94 1b 18 	call	0x3036	; 0x3036 <__fixunssfsi>
    1fa0:	dc 01       	movw	r26, r24
    1fa2:	cb 01       	movw	r24, r22
    1fa4:	8d 87       	std	Y+13, r24	; 0x0d
    1fa6:	8d 85       	ldd	r24, Y+13	; 0x0d
    1fa8:	88 a3       	std	Y+32, r24	; 0x20
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1faa:	88 a1       	ldd	r24, Y+32	; 0x20
    1fac:	8a 95       	dec	r24
    1fae:	f1 f7       	brne	.-4      	; 0x1fac <sensirion_sleep_usec+0x1fc>
    1fb0:	88 a3       	std	Y+32, r24	; 0x20
    1fb2:	00 00       	nop
    1fb4:	a4 96       	adiw	r28, 0x24	; 36
    1fb6:	0f b6       	in	r0, 0x3f	; 63
    1fb8:	f8 94       	cli
    1fba:	de bf       	out	0x3e, r29	; 62
    1fbc:	0f be       	out	0x3f, r0	; 63
    1fbe:	cd bf       	out	0x3d, r28	; 61
    1fc0:	df 91       	pop	r29
    1fc2:	cf 91       	pop	r28
    1fc4:	08 95       	ret

00001fc6 <i2c_io>:

uint8_t i2c_io(uint8_t device_addr, uint8_t *wp, uint16_t wn, uint8_t *rp, uint16_t rn)
{
    1fc6:	0f 93       	push	r16
    1fc8:	1f 93       	push	r17
    1fca:	cf 93       	push	r28
    1fcc:	df 93       	push	r29
    1fce:	cd b7       	in	r28, 0x3d	; 61
    1fd0:	de b7       	in	r29, 0x3e	; 62
    1fd2:	2d 97       	sbiw	r28, 0x0d	; 13
    1fd4:	0f b6       	in	r0, 0x3f	; 63
    1fd6:	f8 94       	cli
    1fd8:	de bf       	out	0x3e, r29	; 62
    1fda:	0f be       	out	0x3f, r0	; 63
    1fdc:	cd bf       	out	0x3d, r28	; 61
    1fde:	8d 83       	std	Y+5, r24	; 0x05
    1fe0:	7f 83       	std	Y+7, r23	; 0x07
    1fe2:	6e 83       	std	Y+6, r22	; 0x06
    1fe4:	59 87       	std	Y+9, r21	; 0x09
    1fe6:	48 87       	std	Y+8, r20	; 0x08
    1fe8:	3b 87       	std	Y+11, r19	; 0x0b
    1fea:	2a 87       	std	Y+10, r18	; 0x0a
    1fec:	1d 87       	std	Y+13, r17	; 0x0d
    1fee:	0c 87       	std	Y+12, r16	; 0x0c
	uint8_t status, send_stop, wrote, start_stat;

	status = 0;
    1ff0:	19 82       	std	Y+1, r1	; 0x01
	wrote = 0;
    1ff2:	1b 82       	std	Y+3, r1	; 0x03
	send_stop = 0;
    1ff4:	1a 82       	std	Y+2, r1	; 0x02

	// I2C0 selected
	if(selected_bus == 0)
    1ff6:	80 91 2f 05 	lds	r24, 0x052F	; 0x80052f <selected_bus>
    1ffa:	88 23       	and	r24, r24
    1ffc:	09 f0       	breq	.+2      	; 0x2000 <i2c_io+0x3a>
    1ffe:	2a c1       	rjmp	.+596    	; 0x2254 <i2c_io+0x28e>
	{
		if (wn > 0) {
    2000:	88 85       	ldd	r24, Y+8	; 0x08
    2002:	99 85       	ldd	r25, Y+9	; 0x09
    2004:	89 2b       	or	r24, r25
    2006:	09 f4       	brne	.+2      	; 0x200a <i2c_io+0x44>
    2008:	72 c0       	rjmp	.+228    	; 0x20ee <i2c_io+0x128>
			wrote = 1;
    200a:	81 e0       	ldi	r24, 0x01	; 1
    200c:	8b 83       	std	Y+3, r24	; 0x03
			send_stop = 1;
    200e:	81 e0       	ldi	r24, 0x01	; 1
    2010:	8a 83       	std	Y+2, r24	; 0x02
	
			TWCR0 = (1 << TWINT) | (1 << TWEN) | (1 << TWSTA);  // Send start condition
    2012:	8c eb       	ldi	r24, 0xBC	; 188
    2014:	90 e0       	ldi	r25, 0x00	; 0
    2016:	24 ea       	ldi	r18, 0xA4	; 164
    2018:	fc 01       	movw	r30, r24
    201a:	20 83       	st	Z, r18
			while (!(TWCR0 & (1 << TWINT)));     // Wait for TWINT to be set
    201c:	00 00       	nop
    201e:	8c eb       	ldi	r24, 0xBC	; 188
    2020:	90 e0       	ldi	r25, 0x00	; 0
    2022:	fc 01       	movw	r30, r24
    2024:	80 81       	ld	r24, Z
    2026:	88 23       	and	r24, r24
    2028:	d4 f7       	brge	.-12     	; 0x201e <i2c_io+0x58>
			status = TWSR0 & 0xf8;
    202a:	89 eb       	ldi	r24, 0xB9	; 185
    202c:	90 e0       	ldi	r25, 0x00	; 0
    202e:	fc 01       	movw	r30, r24
    2030:	80 81       	ld	r24, Z
    2032:	88 7f       	andi	r24, 0xF8	; 248
    2034:	89 83       	std	Y+1, r24	; 0x01
			if (status != 0x08)                 // Check that START was sent OK
    2036:	89 81       	ldd	r24, Y+1	; 0x01
    2038:	88 30       	cpi	r24, 0x08	; 8
    203a:	31 f0       	breq	.+12     	; 0x2048 <i2c_io+0x82>
			{
				printf("Status != 0x08\n");
    203c:	8e e1       	ldi	r24, 0x1E	; 30
    203e:	95 e0       	ldi	r25, 0x05	; 5
    2040:	0e 94 8a 1e 	call	0x3d14	; 0x3d14 <puts>
				return(status);
    2044:	89 81       	ldd	r24, Y+1	; 0x01
    2046:	35 c2       	rjmp	.+1130   	; 0x24b2 <i2c_io+0x4ec>
			}
	
			//TWDR0 = device_addr & 0xfe;          // Load device address and R/W = 0;
			TWDR0 = device_addr << 1;
    2048:	8b eb       	ldi	r24, 0xBB	; 187
    204a:	90 e0       	ldi	r25, 0x00	; 0
    204c:	2d 81       	ldd	r18, Y+5	; 0x05
    204e:	22 0f       	add	r18, r18
    2050:	fc 01       	movw	r30, r24
    2052:	20 83       	st	Z, r18
			// 01101001 & 11111110 = 01101000
			// 01101001 << 1 = 11010010
			TWCR0 = (1 << TWINT) | (1 << TWEN);  // Start transmission
    2054:	8c eb       	ldi	r24, 0xBC	; 188
    2056:	90 e0       	ldi	r25, 0x00	; 0
    2058:	24 e8       	ldi	r18, 0x84	; 132
    205a:	fc 01       	movw	r30, r24
    205c:	20 83       	st	Z, r18
			while (!(TWCR0 & (1 << TWINT)));     // Wait for TWINT to be set
    205e:	00 00       	nop
    2060:	8c eb       	ldi	r24, 0xBC	; 188
    2062:	90 e0       	ldi	r25, 0x00	; 0
    2064:	fc 01       	movw	r30, r24
    2066:	80 81       	ld	r24, Z
    2068:	88 23       	and	r24, r24
    206a:	d4 f7       	brge	.-12     	; 0x2060 <i2c_io+0x9a>
			status = TWSR0 & 0xf8;
    206c:	89 eb       	ldi	r24, 0xB9	; 185
    206e:	90 e0       	ldi	r25, 0x00	; 0
    2070:	fc 01       	movw	r30, r24
    2072:	80 81       	ld	r24, Z
    2074:	88 7f       	andi	r24, 0xF8	; 248
    2076:	89 83       	std	Y+1, r24	; 0x01
			if (status != 0x18) {               // Check that SLA+W was sent OK
    2078:	89 81       	ldd	r24, Y+1	; 0x01
    207a:	88 31       	cpi	r24, 0x18	; 24
    207c:	71 f1       	breq	.+92     	; 0x20da <i2c_io+0x114>
				if (status == 0x20)             // Check for NAK
    207e:	89 81       	ldd	r24, Y+1	; 0x01
    2080:	80 32       	cpi	r24, 0x20	; 32
    2082:	09 f4       	brne	.+2      	; 0x2086 <i2c_io+0xc0>
    2084:	d8 c0       	rjmp	.+432    	; 0x2236 <i2c_io+0x270>
				{
					//printf("Going to nakstop\n");
					goto nakstop_0;
				}               // Send STOP condition
				return(status);                 // Otherwise just return the status
    2086:	89 81       	ldd	r24, Y+1	; 0x01
    2088:	14 c2       	rjmp	.+1064   	; 0x24b2 <i2c_io+0x4ec>
			}
	
			// Write "wn" data bytes to the slave device
			while (wn-- > 0) {
				TWDR0 = *wp++;                   // Put next data byte in TWDR
    208a:	2b eb       	ldi	r18, 0xBB	; 187
    208c:	30 e0       	ldi	r19, 0x00	; 0
    208e:	8e 81       	ldd	r24, Y+6	; 0x06
    2090:	9f 81       	ldd	r25, Y+7	; 0x07
    2092:	ac 01       	movw	r20, r24
    2094:	4f 5f       	subi	r20, 0xFF	; 255
    2096:	5f 4f       	sbci	r21, 0xFF	; 255
    2098:	5f 83       	std	Y+7, r21	; 0x07
    209a:	4e 83       	std	Y+6, r20	; 0x06
    209c:	fc 01       	movw	r30, r24
    209e:	80 81       	ld	r24, Z
    20a0:	f9 01       	movw	r30, r18
    20a2:	80 83       	st	Z, r24
				TWCR0 = (1 << TWINT) | (1 << TWEN); // Start transmission
    20a4:	8c eb       	ldi	r24, 0xBC	; 188
    20a6:	90 e0       	ldi	r25, 0x00	; 0
    20a8:	24 e8       	ldi	r18, 0x84	; 132
    20aa:	fc 01       	movw	r30, r24
    20ac:	20 83       	st	Z, r18
				while (!(TWCR0 & (1 << TWINT))); // Wait for TWINT to be set
    20ae:	00 00       	nop
    20b0:	8c eb       	ldi	r24, 0xBC	; 188
    20b2:	90 e0       	ldi	r25, 0x00	; 0
    20b4:	fc 01       	movw	r30, r24
    20b6:	80 81       	ld	r24, Z
    20b8:	88 23       	and	r24, r24
    20ba:	d4 f7       	brge	.-12     	; 0x20b0 <i2c_io+0xea>
				status = TWSR0 & 0xf8;
    20bc:	89 eb       	ldi	r24, 0xB9	; 185
    20be:	90 e0       	ldi	r25, 0x00	; 0
    20c0:	fc 01       	movw	r30, r24
    20c2:	80 81       	ld	r24, Z
    20c4:	88 7f       	andi	r24, 0xF8	; 248
    20c6:	89 83       	std	Y+1, r24	; 0x01
				if (status != 0x28) {           // Check that data was sent OK
    20c8:	89 81       	ldd	r24, Y+1	; 0x01
    20ca:	88 32       	cpi	r24, 0x28	; 40
    20cc:	31 f0       	breq	.+12     	; 0x20da <i2c_io+0x114>
					if (status == 0x30)         // Check for NAK
    20ce:	89 81       	ldd	r24, Y+1	; 0x01
    20d0:	80 33       	cpi	r24, 0x30	; 48
    20d2:	09 f4       	brne	.+2      	; 0x20d6 <i2c_io+0x110>
    20d4:	b2 c0       	rjmp	.+356    	; 0x223a <i2c_io+0x274>
					goto nakstop_0;           // Send STOP condition
					return(status);             // Otherwise just return the status
    20d6:	89 81       	ldd	r24, Y+1	; 0x01
    20d8:	ec c1       	rjmp	.+984    	; 0x24b2 <i2c_io+0x4ec>
				}               // Send STOP condition
				return(status);                 // Otherwise just return the status
			}
	
			// Write "wn" data bytes to the slave device
			while (wn-- > 0) {
    20da:	88 85       	ldd	r24, Y+8	; 0x08
    20dc:	99 85       	ldd	r25, Y+9	; 0x09
    20de:	9c 01       	movw	r18, r24
    20e0:	21 50       	subi	r18, 0x01	; 1
    20e2:	31 09       	sbc	r19, r1
    20e4:	39 87       	std	Y+9, r19	; 0x09
    20e6:	28 87       	std	Y+8, r18	; 0x08
    20e8:	89 2b       	or	r24, r25
    20ea:	79 f6       	brne	.-98     	; 0x208a <i2c_io+0xc4>
					goto nakstop_0;           // Send STOP condition
					return(status);             // Otherwise just return the status
				}
			}
	
			status = 0;                         // Set status value to successful
    20ec:	19 82       	std	Y+1, r1	; 0x01
		}
	
		if (rn > 0) {
    20ee:	8c 85       	ldd	r24, Y+12	; 0x0c
    20f0:	9d 85       	ldd	r25, Y+13	; 0x0d
    20f2:	89 2b       	or	r24, r25
    20f4:	09 f4       	brne	.+2      	; 0x20f8 <i2c_io+0x132>
    20f6:	a4 c0       	rjmp	.+328    	; 0x2240 <i2c_io+0x27a>
			send_stop = 1;
    20f8:	81 e0       	ldi	r24, 0x01	; 1
    20fa:	8a 83       	std	Y+2, r24	; 0x02
	
			// Set the status value to check for depending on whether this is a
			// START or repeated START
			start_stat = (wrote) ? 0x10 : 0x08;
    20fc:	8b 81       	ldd	r24, Y+3	; 0x03
    20fe:	88 23       	and	r24, r24
    2100:	11 f0       	breq	.+4      	; 0x2106 <i2c_io+0x140>
    2102:	80 e1       	ldi	r24, 0x10	; 16
    2104:	01 c0       	rjmp	.+2      	; 0x2108 <i2c_io+0x142>
    2106:	88 e0       	ldi	r24, 0x08	; 8
    2108:	8c 83       	std	Y+4, r24	; 0x04
	
			// Put TWI into Master Receive mode by sending a START, which could
			// be a repeated START condition if we just finished writing.
			TWCR0 = (1 << TWINT) | (1 << TWEN) | (1 << TWSTA);
    210a:	8c eb       	ldi	r24, 0xBC	; 188
    210c:	90 e0       	ldi	r25, 0x00	; 0
    210e:	24 ea       	ldi	r18, 0xA4	; 164
    2110:	fc 01       	movw	r30, r24
    2112:	20 83       	st	Z, r18
			// Send start (or repeated start) condition
			while (!(TWCR0 & (1 << TWINT)));     // Wait for TWINT to be set
    2114:	00 00       	nop
    2116:	8c eb       	ldi	r24, 0xBC	; 188
    2118:	90 e0       	ldi	r25, 0x00	; 0
    211a:	fc 01       	movw	r30, r24
    211c:	80 81       	ld	r24, Z
    211e:	88 23       	and	r24, r24
    2120:	d4 f7       	brge	.-12     	; 0x2116 <i2c_io+0x150>
			status = TWSR0 & 0xf8;
    2122:	89 eb       	ldi	r24, 0xB9	; 185
    2124:	90 e0       	ldi	r25, 0x00	; 0
    2126:	fc 01       	movw	r30, r24
    2128:	80 81       	ld	r24, Z
    212a:	88 7f       	andi	r24, 0xF8	; 248
    212c:	89 83       	std	Y+1, r24	; 0x01
			if (status != start_stat)           // Check that START or repeated START sent OK
    212e:	99 81       	ldd	r25, Y+1	; 0x01
    2130:	8c 81       	ldd	r24, Y+4	; 0x04
    2132:	98 17       	cp	r25, r24
    2134:	11 f0       	breq	.+4      	; 0x213a <i2c_io+0x174>
			return(status);
    2136:	89 81       	ldd	r24, Y+1	; 0x01
    2138:	bc c1       	rjmp	.+888    	; 0x24b2 <i2c_io+0x4ec>
	
			//TWDR0 = device_addr  | 0x01;         // Load device address and R/W = 1;
			TWDR0 = (device_addr << 1) | 0x01;
    213a:	8b eb       	ldi	r24, 0xBB	; 187
    213c:	90 e0       	ldi	r25, 0x00	; 0
    213e:	2d 81       	ldd	r18, Y+5	; 0x05
    2140:	22 2f       	mov	r18, r18
    2142:	30 e0       	ldi	r19, 0x00	; 0
    2144:	22 0f       	add	r18, r18
    2146:	33 1f       	adc	r19, r19
    2148:	21 60       	ori	r18, 0x01	; 1
    214a:	fc 01       	movw	r30, r24
    214c:	20 83       	st	Z, r18
			
			TWCR0 = (1 << TWINT) | (1 << TWEN);  // Send address+r
    214e:	8c eb       	ldi	r24, 0xBC	; 188
    2150:	90 e0       	ldi	r25, 0x00	; 0
    2152:	24 e8       	ldi	r18, 0x84	; 132
    2154:	fc 01       	movw	r30, r24
    2156:	20 83       	st	Z, r18
			while (!(TWCR0 & (1 << TWINT)));     // Wait for TWINT to be set
    2158:	00 00       	nop
    215a:	8c eb       	ldi	r24, 0xBC	; 188
    215c:	90 e0       	ldi	r25, 0x00	; 0
    215e:	fc 01       	movw	r30, r24
    2160:	80 81       	ld	r24, Z
    2162:	88 23       	and	r24, r24
    2164:	d4 f7       	brge	.-12     	; 0x215a <i2c_io+0x194>
			status = TWSR0 & 0xf8;
    2166:	89 eb       	ldi	r24, 0xB9	; 185
    2168:	90 e0       	ldi	r25, 0x00	; 0
    216a:	fc 01       	movw	r30, r24
    216c:	80 81       	ld	r24, Z
    216e:	88 7f       	andi	r24, 0xF8	; 248
    2170:	89 83       	std	Y+1, r24	; 0x01
			if (status != 0x40) {               // Check that SLA+R was sent OK
    2172:	89 81       	ldd	r24, Y+1	; 0x01
    2174:	80 34       	cpi	r24, 0x40	; 64
    2176:	31 f0       	breq	.+12     	; 0x2184 <i2c_io+0x1be>
				if (status == 0x48)             // Check for NAK
    2178:	89 81       	ldd	r24, Y+1	; 0x01
    217a:	88 34       	cpi	r24, 0x48	; 72
    217c:	09 f4       	brne	.+2      	; 0x2180 <i2c_io+0x1ba>
    217e:	5f c0       	rjmp	.+190    	; 0x223e <i2c_io+0x278>
				goto nakstop_0;
				return(status);
    2180:	89 81       	ldd	r24, Y+1	; 0x01
    2182:	97 c1       	rjmp	.+814    	; 0x24b2 <i2c_io+0x4ec>
			}
	
			// Read all but the last of n bytes from the slave device in this loop
			rn--;
    2184:	8c 85       	ldd	r24, Y+12	; 0x0c
    2186:	9d 85       	ldd	r25, Y+13	; 0x0d
    2188:	01 97       	sbiw	r24, 0x01	; 1
    218a:	9d 87       	std	Y+13, r25	; 0x0d
    218c:	8c 87       	std	Y+12, r24	; 0x0c
			while (rn-- > 0) {
    218e:	24 c0       	rjmp	.+72     	; 0x21d8 <i2c_io+0x212>
				TWCR0 = (1 << TWINT) | (1 << TWEN) | (1 << TWEA); // Read byte and send ACK
    2190:	8c eb       	ldi	r24, 0xBC	; 188
    2192:	90 e0       	ldi	r25, 0x00	; 0
    2194:	24 ec       	ldi	r18, 0xC4	; 196
    2196:	fc 01       	movw	r30, r24
    2198:	20 83       	st	Z, r18
				while (!(TWCR0 & (1 << TWINT))); // Wait for TWINT to be set
    219a:	00 00       	nop
    219c:	8c eb       	ldi	r24, 0xBC	; 188
    219e:	90 e0       	ldi	r25, 0x00	; 0
    21a0:	fc 01       	movw	r30, r24
    21a2:	80 81       	ld	r24, Z
    21a4:	88 23       	and	r24, r24
    21a6:	d4 f7       	brge	.-12     	; 0x219c <i2c_io+0x1d6>
				status = TWSR0 & 0xf8;
    21a8:	89 eb       	ldi	r24, 0xB9	; 185
    21aa:	90 e0       	ldi	r25, 0x00	; 0
    21ac:	fc 01       	movw	r30, r24
    21ae:	80 81       	ld	r24, Z
    21b0:	88 7f       	andi	r24, 0xF8	; 248
    21b2:	89 83       	std	Y+1, r24	; 0x01
				if (status != 0x50)             // Check that data received OK
    21b4:	89 81       	ldd	r24, Y+1	; 0x01
    21b6:	80 35       	cpi	r24, 0x50	; 80
    21b8:	11 f0       	breq	.+4      	; 0x21be <i2c_io+0x1f8>
				return(status);
    21ba:	89 81       	ldd	r24, Y+1	; 0x01
    21bc:	7a c1       	rjmp	.+756    	; 0x24b2 <i2c_io+0x4ec>
				*rp++ = TWDR0;                   // Read the data
    21be:	8a 85       	ldd	r24, Y+10	; 0x0a
    21c0:	9b 85       	ldd	r25, Y+11	; 0x0b
    21c2:	9c 01       	movw	r18, r24
    21c4:	2f 5f       	subi	r18, 0xFF	; 255
    21c6:	3f 4f       	sbci	r19, 0xFF	; 255
    21c8:	3b 87       	std	Y+11, r19	; 0x0b
    21ca:	2a 87       	std	Y+10, r18	; 0x0a
    21cc:	2b eb       	ldi	r18, 0xBB	; 187
    21ce:	30 e0       	ldi	r19, 0x00	; 0
    21d0:	f9 01       	movw	r30, r18
    21d2:	20 81       	ld	r18, Z
    21d4:	fc 01       	movw	r30, r24
    21d6:	20 83       	st	Z, r18
				return(status);
			}
	
			// Read all but the last of n bytes from the slave device in this loop
			rn--;
			while (rn-- > 0) {
    21d8:	8c 85       	ldd	r24, Y+12	; 0x0c
    21da:	9d 85       	ldd	r25, Y+13	; 0x0d
    21dc:	9c 01       	movw	r18, r24
    21de:	21 50       	subi	r18, 0x01	; 1
    21e0:	31 09       	sbc	r19, r1
    21e2:	3d 87       	std	Y+13, r19	; 0x0d
    21e4:	2c 87       	std	Y+12, r18	; 0x0c
    21e6:	89 2b       	or	r24, r25
    21e8:	99 f6       	brne	.-90     	; 0x2190 <i2c_io+0x1ca>
				return(status);
				*rp++ = TWDR0;                   // Read the data
			}
	
			// Read the last byte
			TWCR0 = (1 << TWINT) | (1 << TWEN);  // Read last byte with NOT ACK sent
    21ea:	8c eb       	ldi	r24, 0xBC	; 188
    21ec:	90 e0       	ldi	r25, 0x00	; 0
    21ee:	24 e8       	ldi	r18, 0x84	; 132
    21f0:	fc 01       	movw	r30, r24
    21f2:	20 83       	st	Z, r18
			while (!(TWCR0 & (1 << TWINT)));     // Wait for TWINT to be set
    21f4:	00 00       	nop
    21f6:	8c eb       	ldi	r24, 0xBC	; 188
    21f8:	90 e0       	ldi	r25, 0x00	; 0
    21fa:	fc 01       	movw	r30, r24
    21fc:	80 81       	ld	r24, Z
    21fe:	88 23       	and	r24, r24
    2200:	d4 f7       	brge	.-12     	; 0x21f6 <i2c_io+0x230>
			status = TWSR0 & 0xf8;
    2202:	89 eb       	ldi	r24, 0xB9	; 185
    2204:	90 e0       	ldi	r25, 0x00	; 0
    2206:	fc 01       	movw	r30, r24
    2208:	80 81       	ld	r24, Z
    220a:	88 7f       	andi	r24, 0xF8	; 248
    220c:	89 83       	std	Y+1, r24	; 0x01
			if (status != 0x58)                 // Check that data received OK
    220e:	89 81       	ldd	r24, Y+1	; 0x01
    2210:	88 35       	cpi	r24, 0x58	; 88
    2212:	11 f0       	breq	.+4      	; 0x2218 <i2c_io+0x252>
			return(status);
    2214:	89 81       	ldd	r24, Y+1	; 0x01
    2216:	4d c1       	rjmp	.+666    	; 0x24b2 <i2c_io+0x4ec>
			*rp++ = TWDR0;                       // Read the data
    2218:	8a 85       	ldd	r24, Y+10	; 0x0a
    221a:	9b 85       	ldd	r25, Y+11	; 0x0b
    221c:	9c 01       	movw	r18, r24
    221e:	2f 5f       	subi	r18, 0xFF	; 255
    2220:	3f 4f       	sbci	r19, 0xFF	; 255
    2222:	3b 87       	std	Y+11, r19	; 0x0b
    2224:	2a 87       	std	Y+10, r18	; 0x0a
    2226:	2b eb       	ldi	r18, 0xBB	; 187
    2228:	30 e0       	ldi	r19, 0x00	; 0
    222a:	f9 01       	movw	r30, r18
    222c:	20 81       	ld	r18, Z
    222e:	fc 01       	movw	r30, r24
    2230:	20 83       	st	Z, r18
	
			status = 0;                         // Set status value to successful
    2232:	19 82       	std	Y+1, r1	; 0x01
    2234:	05 c0       	rjmp	.+10     	; 0x2240 <i2c_io+0x27a>
			status = TWSR0 & 0xf8;
			if (status != 0x18) {               // Check that SLA+W was sent OK
				if (status == 0x20)             // Check for NAK
				{
					//printf("Going to nakstop\n");
					goto nakstop_0;
    2236:	00 00       	nop
    2238:	03 c0       	rjmp	.+6      	; 0x2240 <i2c_io+0x27a>
				TWCR0 = (1 << TWINT) | (1 << TWEN); // Start transmission
				while (!(TWCR0 & (1 << TWINT))); // Wait for TWINT to be set
				status = TWSR0 & 0xf8;
				if (status != 0x28) {           // Check that data was sent OK
					if (status == 0x30)         // Check for NAK
					goto nakstop_0;           // Send STOP condition
    223a:	00 00       	nop
    223c:	01 c0       	rjmp	.+2      	; 0x2240 <i2c_io+0x27a>
			TWCR0 = (1 << TWINT) | (1 << TWEN);  // Send address+r
			while (!(TWCR0 & (1 << TWINT)));     // Wait for TWINT to be set
			status = TWSR0 & 0xf8;
			if (status != 0x40) {               // Check that SLA+R was sent OK
				if (status == 0x48)             // Check for NAK
				goto nakstop_0;
    223e:	00 00       	nop
	
			status = 0;                         // Set status value to successful
		}
		
		nakstop_0:                                    // Come here to send STOP after a NAK
		if (send_stop){
    2240:	8a 81       	ldd	r24, Y+2	; 0x02
    2242:	88 23       	and	r24, r24
    2244:	29 f0       	breq	.+10     	; 0x2250 <i2c_io+0x28a>
			TWCR0 = (1 << TWINT) | (1 << TWEN) | (1 << TWSTO);  // Send STOP condition
    2246:	8c eb       	ldi	r24, 0xBC	; 188
    2248:	90 e0       	ldi	r25, 0x00	; 0
    224a:	24 e9       	ldi	r18, 0x94	; 148
    224c:	fc 01       	movw	r30, r24
    224e:	20 83       	st	Z, r18
		}

		return(status);
    2250:	89 81       	ldd	r24, Y+1	; 0x01
    2252:	2f c1       	rjmp	.+606    	; 0x24b2 <i2c_io+0x4ec>

	}
	
	// I2C1 selected
	else if (selected_bus == 1)
    2254:	80 91 2f 05 	lds	r24, 0x052F	; 0x80052f <selected_bus>
    2258:	81 30       	cpi	r24, 0x01	; 1
    225a:	09 f0       	breq	.+2      	; 0x225e <i2c_io+0x298>
    225c:	2a c1       	rjmp	.+596    	; 0x24b2 <i2c_io+0x4ec>
	{
		if (wn > 0) {
    225e:	88 85       	ldd	r24, Y+8	; 0x08
    2260:	99 85       	ldd	r25, Y+9	; 0x09
    2262:	89 2b       	or	r24, r25
    2264:	09 f4       	brne	.+2      	; 0x2268 <i2c_io+0x2a2>
    2266:	72 c0       	rjmp	.+228    	; 0x234c <i2c_io+0x386>
			wrote = 1;
    2268:	81 e0       	ldi	r24, 0x01	; 1
    226a:	8b 83       	std	Y+3, r24	; 0x03
			send_stop = 1;
    226c:	81 e0       	ldi	r24, 0x01	; 1
    226e:	8a 83       	std	Y+2, r24	; 0x02
	
			TWCR1 = (1 << TWINT) | (1 << TWEN) | (1 << TWSTA);  // Send start condition
    2270:	8c ed       	ldi	r24, 0xDC	; 220
    2272:	90 e0       	ldi	r25, 0x00	; 0
    2274:	24 ea       	ldi	r18, 0xA4	; 164
    2276:	fc 01       	movw	r30, r24
    2278:	20 83       	st	Z, r18
			while (!(TWCR1 & (1 << TWINT)));     // Wait for TWINT to be set
    227a:	00 00       	nop
    227c:	8c ed       	ldi	r24, 0xDC	; 220
    227e:	90 e0       	ldi	r25, 0x00	; 0
    2280:	fc 01       	movw	r30, r24
    2282:	80 81       	ld	r24, Z
    2284:	88 23       	and	r24, r24
    2286:	d4 f7       	brge	.-12     	; 0x227c <i2c_io+0x2b6>
			status = TWSR1 & 0xf8;
    2288:	89 ed       	ldi	r24, 0xD9	; 217
    228a:	90 e0       	ldi	r25, 0x00	; 0
    228c:	fc 01       	movw	r30, r24
    228e:	80 81       	ld	r24, Z
    2290:	88 7f       	andi	r24, 0xF8	; 248
    2292:	89 83       	std	Y+1, r24	; 0x01
			if (status != 0x08)                 // Check that START was sent OK
    2294:	89 81       	ldd	r24, Y+1	; 0x01
    2296:	88 30       	cpi	r24, 0x08	; 8
    2298:	31 f0       	breq	.+12     	; 0x22a6 <i2c_io+0x2e0>
			{
				printf("Status != 0x08\n");
    229a:	8e e1       	ldi	r24, 0x1E	; 30
    229c:	95 e0       	ldi	r25, 0x05	; 5
    229e:	0e 94 8a 1e 	call	0x3d14	; 0x3d14 <puts>
				return(status);
    22a2:	89 81       	ldd	r24, Y+1	; 0x01
    22a4:	06 c1       	rjmp	.+524    	; 0x24b2 <i2c_io+0x4ec>
			}
	
			//TWDR0 = device_addr & 0xfe;          // Load device address and R/W = 0;
			TWDR1 = device_addr << 1;
    22a6:	8b ed       	ldi	r24, 0xDB	; 219
    22a8:	90 e0       	ldi	r25, 0x00	; 0
    22aa:	2d 81       	ldd	r18, Y+5	; 0x05
    22ac:	22 0f       	add	r18, r18
    22ae:	fc 01       	movw	r30, r24
    22b0:	20 83       	st	Z, r18
			// 01101001 & 11111110 = 01101000
			// 01101001 << 1 = 11010010
			TWCR1 = (1 << TWINT) | (1 << TWEN);  // Start transmission
    22b2:	8c ed       	ldi	r24, 0xDC	; 220
    22b4:	90 e0       	ldi	r25, 0x00	; 0
    22b6:	24 e8       	ldi	r18, 0x84	; 132
    22b8:	fc 01       	movw	r30, r24
    22ba:	20 83       	st	Z, r18
			while (!(TWCR1 & (1 << TWINT)));     // Wait for TWINT to be set
    22bc:	00 00       	nop
    22be:	8c ed       	ldi	r24, 0xDC	; 220
    22c0:	90 e0       	ldi	r25, 0x00	; 0
    22c2:	fc 01       	movw	r30, r24
    22c4:	80 81       	ld	r24, Z
    22c6:	88 23       	and	r24, r24
    22c8:	d4 f7       	brge	.-12     	; 0x22be <i2c_io+0x2f8>
			status = TWSR1 & 0xf8;
    22ca:	89 ed       	ldi	r24, 0xD9	; 217
    22cc:	90 e0       	ldi	r25, 0x00	; 0
    22ce:	fc 01       	movw	r30, r24
    22d0:	80 81       	ld	r24, Z
    22d2:	88 7f       	andi	r24, 0xF8	; 248
    22d4:	89 83       	std	Y+1, r24	; 0x01
			if (status != 0x18) {               // Check that SLA+W was sent OK
    22d6:	89 81       	ldd	r24, Y+1	; 0x01
    22d8:	88 31       	cpi	r24, 0x18	; 24
    22da:	71 f1       	breq	.+92     	; 0x2338 <i2c_io+0x372>
				if (status == 0x20)             // Check for NAK
    22dc:	89 81       	ldd	r24, Y+1	; 0x01
    22de:	80 32       	cpi	r24, 0x20	; 32
    22e0:	09 f4       	brne	.+2      	; 0x22e4 <i2c_io+0x31e>
    22e2:	d8 c0       	rjmp	.+432    	; 0x2494 <i2c_io+0x4ce>
				{
					//printf("Going to nakstop\n");
					goto nakstop_1;
				}               // Send STOP condition
				return(status);                 // Otherwise just return the status
    22e4:	89 81       	ldd	r24, Y+1	; 0x01
    22e6:	e5 c0       	rjmp	.+458    	; 0x24b2 <i2c_io+0x4ec>
			}
	
			// Write "wn" data bytes to the slave device
			while (wn-- > 0) {
				TWDR1 = *wp++;                   // Put next data byte in TWDR
    22e8:	2b ed       	ldi	r18, 0xDB	; 219
    22ea:	30 e0       	ldi	r19, 0x00	; 0
    22ec:	8e 81       	ldd	r24, Y+6	; 0x06
    22ee:	9f 81       	ldd	r25, Y+7	; 0x07
    22f0:	ac 01       	movw	r20, r24
    22f2:	4f 5f       	subi	r20, 0xFF	; 255
    22f4:	5f 4f       	sbci	r21, 0xFF	; 255
    22f6:	5f 83       	std	Y+7, r21	; 0x07
    22f8:	4e 83       	std	Y+6, r20	; 0x06
    22fa:	fc 01       	movw	r30, r24
    22fc:	80 81       	ld	r24, Z
    22fe:	f9 01       	movw	r30, r18
    2300:	80 83       	st	Z, r24
				TWCR1 = (1 << TWINT) | (1 << TWEN); // Start transmission
    2302:	8c ed       	ldi	r24, 0xDC	; 220
    2304:	90 e0       	ldi	r25, 0x00	; 0
    2306:	24 e8       	ldi	r18, 0x84	; 132
    2308:	fc 01       	movw	r30, r24
    230a:	20 83       	st	Z, r18
				while (!(TWCR1 & (1 << TWINT))); // Wait for TWINT to be set
    230c:	00 00       	nop
    230e:	8c ed       	ldi	r24, 0xDC	; 220
    2310:	90 e0       	ldi	r25, 0x00	; 0
    2312:	fc 01       	movw	r30, r24
    2314:	80 81       	ld	r24, Z
    2316:	88 23       	and	r24, r24
    2318:	d4 f7       	brge	.-12     	; 0x230e <i2c_io+0x348>
				status = TWSR1 & 0xf8;
    231a:	89 ed       	ldi	r24, 0xD9	; 217
    231c:	90 e0       	ldi	r25, 0x00	; 0
    231e:	fc 01       	movw	r30, r24
    2320:	80 81       	ld	r24, Z
    2322:	88 7f       	andi	r24, 0xF8	; 248
    2324:	89 83       	std	Y+1, r24	; 0x01
				if (status != 0x28) {           // Check that data was sent OK
    2326:	89 81       	ldd	r24, Y+1	; 0x01
    2328:	88 32       	cpi	r24, 0x28	; 40
    232a:	31 f0       	breq	.+12     	; 0x2338 <i2c_io+0x372>
					if (status == 0x30)         // Check for NAK
    232c:	89 81       	ldd	r24, Y+1	; 0x01
    232e:	80 33       	cpi	r24, 0x30	; 48
    2330:	09 f4       	brne	.+2      	; 0x2334 <i2c_io+0x36e>
    2332:	b2 c0       	rjmp	.+356    	; 0x2498 <i2c_io+0x4d2>
					goto nakstop_1;           // Send STOP condition
					return(status);             // Otherwise just return the status
    2334:	89 81       	ldd	r24, Y+1	; 0x01
    2336:	bd c0       	rjmp	.+378    	; 0x24b2 <i2c_io+0x4ec>
				}               // Send STOP condition
				return(status);                 // Otherwise just return the status
			}
	
			// Write "wn" data bytes to the slave device
			while (wn-- > 0) {
    2338:	88 85       	ldd	r24, Y+8	; 0x08
    233a:	99 85       	ldd	r25, Y+9	; 0x09
    233c:	9c 01       	movw	r18, r24
    233e:	21 50       	subi	r18, 0x01	; 1
    2340:	31 09       	sbc	r19, r1
    2342:	39 87       	std	Y+9, r19	; 0x09
    2344:	28 87       	std	Y+8, r18	; 0x08
    2346:	89 2b       	or	r24, r25
    2348:	79 f6       	brne	.-98     	; 0x22e8 <i2c_io+0x322>
					goto nakstop_1;           // Send STOP condition
					return(status);             // Otherwise just return the status
				}
			}
	
			status = 0;                         // Set status value to successful
    234a:	19 82       	std	Y+1, r1	; 0x01
		}
	
		if (rn > 0) {
    234c:	8c 85       	ldd	r24, Y+12	; 0x0c
    234e:	9d 85       	ldd	r25, Y+13	; 0x0d
    2350:	89 2b       	or	r24, r25
    2352:	09 f4       	brne	.+2      	; 0x2356 <i2c_io+0x390>
    2354:	a4 c0       	rjmp	.+328    	; 0x249e <i2c_io+0x4d8>
			send_stop = 1;
    2356:	81 e0       	ldi	r24, 0x01	; 1
    2358:	8a 83       	std	Y+2, r24	; 0x02
	
			// Set the status value to check for depending on whether this is a
			// START or repeated START
			start_stat = (wrote) ? 0x10 : 0x08;
    235a:	8b 81       	ldd	r24, Y+3	; 0x03
    235c:	88 23       	and	r24, r24
    235e:	11 f0       	breq	.+4      	; 0x2364 <i2c_io+0x39e>
    2360:	80 e1       	ldi	r24, 0x10	; 16
    2362:	01 c0       	rjmp	.+2      	; 0x2366 <i2c_io+0x3a0>
    2364:	88 e0       	ldi	r24, 0x08	; 8
    2366:	8c 83       	std	Y+4, r24	; 0x04
	
			// Put TWI into Master Receive mode by sending a START, which could
			// be a repeated START condition if we just finished writing.
			TWCR1 = (1 << TWINT) | (1 << TWEN) | (1 << TWSTA);
    2368:	8c ed       	ldi	r24, 0xDC	; 220
    236a:	90 e0       	ldi	r25, 0x00	; 0
    236c:	24 ea       	ldi	r18, 0xA4	; 164
    236e:	fc 01       	movw	r30, r24
    2370:	20 83       	st	Z, r18
			// Send start (or repeated start) condition
			while (!(TWCR1 & (1 << TWINT)));     // Wait for TWINT to be set
    2372:	00 00       	nop
    2374:	8c ed       	ldi	r24, 0xDC	; 220
    2376:	90 e0       	ldi	r25, 0x00	; 0
    2378:	fc 01       	movw	r30, r24
    237a:	80 81       	ld	r24, Z
    237c:	88 23       	and	r24, r24
    237e:	d4 f7       	brge	.-12     	; 0x2374 <i2c_io+0x3ae>
			status = TWSR1 & 0xf8;
    2380:	89 ed       	ldi	r24, 0xD9	; 217
    2382:	90 e0       	ldi	r25, 0x00	; 0
    2384:	fc 01       	movw	r30, r24
    2386:	80 81       	ld	r24, Z
    2388:	88 7f       	andi	r24, 0xF8	; 248
    238a:	89 83       	std	Y+1, r24	; 0x01
			if (status != start_stat)           // Check that START or repeated START sent OK
    238c:	99 81       	ldd	r25, Y+1	; 0x01
    238e:	8c 81       	ldd	r24, Y+4	; 0x04
    2390:	98 17       	cp	r25, r24
    2392:	11 f0       	breq	.+4      	; 0x2398 <i2c_io+0x3d2>
			return(status);
    2394:	89 81       	ldd	r24, Y+1	; 0x01
    2396:	8d c0       	rjmp	.+282    	; 0x24b2 <i2c_io+0x4ec>
	
			//TWDR0 = device_addr  | 0x01;         // Load device address and R/W = 1;
			TWDR1 = (device_addr << 1) | 0x01;
    2398:	8b ed       	ldi	r24, 0xDB	; 219
    239a:	90 e0       	ldi	r25, 0x00	; 0
    239c:	2d 81       	ldd	r18, Y+5	; 0x05
    239e:	22 2f       	mov	r18, r18
    23a0:	30 e0       	ldi	r19, 0x00	; 0
    23a2:	22 0f       	add	r18, r18
    23a4:	33 1f       	adc	r19, r19
    23a6:	21 60       	ori	r18, 0x01	; 1
    23a8:	fc 01       	movw	r30, r24
    23aa:	20 83       	st	Z, r18
			
			TWCR1 = (1 << TWINT) | (1 << TWEN);  // Send address+r
    23ac:	8c ed       	ldi	r24, 0xDC	; 220
    23ae:	90 e0       	ldi	r25, 0x00	; 0
    23b0:	24 e8       	ldi	r18, 0x84	; 132
    23b2:	fc 01       	movw	r30, r24
    23b4:	20 83       	st	Z, r18
			while (!(TWCR1 & (1 << TWINT)));     // Wait for TWINT to be set
    23b6:	00 00       	nop
    23b8:	8c ed       	ldi	r24, 0xDC	; 220
    23ba:	90 e0       	ldi	r25, 0x00	; 0
    23bc:	fc 01       	movw	r30, r24
    23be:	80 81       	ld	r24, Z
    23c0:	88 23       	and	r24, r24
    23c2:	d4 f7       	brge	.-12     	; 0x23b8 <i2c_io+0x3f2>
			status = TWSR1 & 0xf8;
    23c4:	89 ed       	ldi	r24, 0xD9	; 217
    23c6:	90 e0       	ldi	r25, 0x00	; 0
    23c8:	fc 01       	movw	r30, r24
    23ca:	80 81       	ld	r24, Z
    23cc:	88 7f       	andi	r24, 0xF8	; 248
    23ce:	89 83       	std	Y+1, r24	; 0x01
			if (status != 0x40) {               // Check that SLA+R was sent OK
    23d0:	89 81       	ldd	r24, Y+1	; 0x01
    23d2:	80 34       	cpi	r24, 0x40	; 64
    23d4:	31 f0       	breq	.+12     	; 0x23e2 <i2c_io+0x41c>
				if (status == 0x48)             // Check for NAK
    23d6:	89 81       	ldd	r24, Y+1	; 0x01
    23d8:	88 34       	cpi	r24, 0x48	; 72
    23da:	09 f4       	brne	.+2      	; 0x23de <i2c_io+0x418>
    23dc:	5f c0       	rjmp	.+190    	; 0x249c <i2c_io+0x4d6>
				goto nakstop_1;
				return(status);
    23de:	89 81       	ldd	r24, Y+1	; 0x01
    23e0:	68 c0       	rjmp	.+208    	; 0x24b2 <i2c_io+0x4ec>
			}
	
			// Read all but the last of n bytes from the slave device in this loop
			rn--;
    23e2:	8c 85       	ldd	r24, Y+12	; 0x0c
    23e4:	9d 85       	ldd	r25, Y+13	; 0x0d
    23e6:	01 97       	sbiw	r24, 0x01	; 1
    23e8:	9d 87       	std	Y+13, r25	; 0x0d
    23ea:	8c 87       	std	Y+12, r24	; 0x0c
			while (rn-- > 0) {
    23ec:	24 c0       	rjmp	.+72     	; 0x2436 <i2c_io+0x470>
				TWCR1 = (1 << TWINT) | (1 << TWEN) | (1 << TWEA); // Read byte and send ACK
    23ee:	8c ed       	ldi	r24, 0xDC	; 220
    23f0:	90 e0       	ldi	r25, 0x00	; 0
    23f2:	24 ec       	ldi	r18, 0xC4	; 196
    23f4:	fc 01       	movw	r30, r24
    23f6:	20 83       	st	Z, r18
				while (!(TWCR1 & (1 << TWINT))); // Wait for TWINT to be set
    23f8:	00 00       	nop
    23fa:	8c ed       	ldi	r24, 0xDC	; 220
    23fc:	90 e0       	ldi	r25, 0x00	; 0
    23fe:	fc 01       	movw	r30, r24
    2400:	80 81       	ld	r24, Z
    2402:	88 23       	and	r24, r24
    2404:	d4 f7       	brge	.-12     	; 0x23fa <i2c_io+0x434>
				status = TWSR1 & 0xf8;
    2406:	89 ed       	ldi	r24, 0xD9	; 217
    2408:	90 e0       	ldi	r25, 0x00	; 0
    240a:	fc 01       	movw	r30, r24
    240c:	80 81       	ld	r24, Z
    240e:	88 7f       	andi	r24, 0xF8	; 248
    2410:	89 83       	std	Y+1, r24	; 0x01
				if (status != 0x50)             // Check that data received OK
    2412:	89 81       	ldd	r24, Y+1	; 0x01
    2414:	80 35       	cpi	r24, 0x50	; 80
    2416:	11 f0       	breq	.+4      	; 0x241c <i2c_io+0x456>
				return(status);
    2418:	89 81       	ldd	r24, Y+1	; 0x01
    241a:	4b c0       	rjmp	.+150    	; 0x24b2 <i2c_io+0x4ec>
				*rp++ = TWDR1;                   // Read the data
    241c:	8a 85       	ldd	r24, Y+10	; 0x0a
    241e:	9b 85       	ldd	r25, Y+11	; 0x0b
    2420:	9c 01       	movw	r18, r24
    2422:	2f 5f       	subi	r18, 0xFF	; 255
    2424:	3f 4f       	sbci	r19, 0xFF	; 255
    2426:	3b 87       	std	Y+11, r19	; 0x0b
    2428:	2a 87       	std	Y+10, r18	; 0x0a
    242a:	2b ed       	ldi	r18, 0xDB	; 219
    242c:	30 e0       	ldi	r19, 0x00	; 0
    242e:	f9 01       	movw	r30, r18
    2430:	20 81       	ld	r18, Z
    2432:	fc 01       	movw	r30, r24
    2434:	20 83       	st	Z, r18
				return(status);
			}
	
			// Read all but the last of n bytes from the slave device in this loop
			rn--;
			while (rn-- > 0) {
    2436:	8c 85       	ldd	r24, Y+12	; 0x0c
    2438:	9d 85       	ldd	r25, Y+13	; 0x0d
    243a:	9c 01       	movw	r18, r24
    243c:	21 50       	subi	r18, 0x01	; 1
    243e:	31 09       	sbc	r19, r1
    2440:	3d 87       	std	Y+13, r19	; 0x0d
    2442:	2c 87       	std	Y+12, r18	; 0x0c
    2444:	89 2b       	or	r24, r25
    2446:	99 f6       	brne	.-90     	; 0x23ee <i2c_io+0x428>
				return(status);
				*rp++ = TWDR1;                   // Read the data
			}
	
			// Read the last byte
			TWCR1 = (1 << TWINT) | (1 << TWEN);  // Read last byte with NOT ACK sent
    2448:	8c ed       	ldi	r24, 0xDC	; 220
    244a:	90 e0       	ldi	r25, 0x00	; 0
    244c:	24 e8       	ldi	r18, 0x84	; 132
    244e:	fc 01       	movw	r30, r24
    2450:	20 83       	st	Z, r18
			while (!(TWCR1 & (1 << TWINT)));     // Wait for TWINT to be set
    2452:	00 00       	nop
    2454:	8c ed       	ldi	r24, 0xDC	; 220
    2456:	90 e0       	ldi	r25, 0x00	; 0
    2458:	fc 01       	movw	r30, r24
    245a:	80 81       	ld	r24, Z
    245c:	88 23       	and	r24, r24
    245e:	d4 f7       	brge	.-12     	; 0x2454 <i2c_io+0x48e>
			status = TWSR1 & 0xf8;
    2460:	89 ed       	ldi	r24, 0xD9	; 217
    2462:	90 e0       	ldi	r25, 0x00	; 0
    2464:	fc 01       	movw	r30, r24
    2466:	80 81       	ld	r24, Z
    2468:	88 7f       	andi	r24, 0xF8	; 248
    246a:	89 83       	std	Y+1, r24	; 0x01
			if (status != 0x58)                 // Check that data received OK
    246c:	89 81       	ldd	r24, Y+1	; 0x01
    246e:	88 35       	cpi	r24, 0x58	; 88
    2470:	11 f0       	breq	.+4      	; 0x2476 <i2c_io+0x4b0>
			return(status);
    2472:	89 81       	ldd	r24, Y+1	; 0x01
    2474:	1e c0       	rjmp	.+60     	; 0x24b2 <i2c_io+0x4ec>
			*rp++ = TWDR1;                       // Read the data
    2476:	8a 85       	ldd	r24, Y+10	; 0x0a
    2478:	9b 85       	ldd	r25, Y+11	; 0x0b
    247a:	9c 01       	movw	r18, r24
    247c:	2f 5f       	subi	r18, 0xFF	; 255
    247e:	3f 4f       	sbci	r19, 0xFF	; 255
    2480:	3b 87       	std	Y+11, r19	; 0x0b
    2482:	2a 87       	std	Y+10, r18	; 0x0a
    2484:	2b ed       	ldi	r18, 0xDB	; 219
    2486:	30 e0       	ldi	r19, 0x00	; 0
    2488:	f9 01       	movw	r30, r18
    248a:	20 81       	ld	r18, Z
    248c:	fc 01       	movw	r30, r24
    248e:	20 83       	st	Z, r18
	
			status = 0;                         // Set status value to successful
    2490:	19 82       	std	Y+1, r1	; 0x01
    2492:	05 c0       	rjmp	.+10     	; 0x249e <i2c_io+0x4d8>
			status = TWSR1 & 0xf8;
			if (status != 0x18) {               // Check that SLA+W was sent OK
				if (status == 0x20)             // Check for NAK
				{
					//printf("Going to nakstop\n");
					goto nakstop_1;
    2494:	00 00       	nop
    2496:	03 c0       	rjmp	.+6      	; 0x249e <i2c_io+0x4d8>
				TWCR1 = (1 << TWINT) | (1 << TWEN); // Start transmission
				while (!(TWCR1 & (1 << TWINT))); // Wait for TWINT to be set
				status = TWSR1 & 0xf8;
				if (status != 0x28) {           // Check that data was sent OK
					if (status == 0x30)         // Check for NAK
					goto nakstop_1;           // Send STOP condition
    2498:	00 00       	nop
    249a:	01 c0       	rjmp	.+2      	; 0x249e <i2c_io+0x4d8>
			TWCR1 = (1 << TWINT) | (1 << TWEN);  // Send address+r
			while (!(TWCR1 & (1 << TWINT)));     // Wait for TWINT to be set
			status = TWSR1 & 0xf8;
			if (status != 0x40) {               // Check that SLA+R was sent OK
				if (status == 0x48)             // Check for NAK
				goto nakstop_1;
    249c:	00 00       	nop
	
			status = 0;                         // Set status value to successful
		}
		
		nakstop_1:                                    // Come here to send STOP after a NAK
		if (send_stop)
    249e:	8a 81       	ldd	r24, Y+2	; 0x02
    24a0:	88 23       	and	r24, r24
    24a2:	29 f0       	breq	.+10     	; 0x24ae <i2c_io+0x4e8>
			TWCR1 = (1 << TWINT) | (1 << TWEN) | (1 << TWSTO);  // Send STOP condition
    24a4:	8c ed       	ldi	r24, 0xDC	; 220
    24a6:	90 e0       	ldi	r25, 0x00	; 0
    24a8:	24 e9       	ldi	r18, 0x94	; 148
    24aa:	fc 01       	movw	r30, r24
    24ac:	20 83       	st	Z, r18
		
		return(status);
    24ae:	89 81       	ldd	r24, Y+1	; 0x01
    24b0:	00 c0       	rjmp	.+0      	; 0x24b2 <i2c_io+0x4ec>
	}
}
    24b2:	2d 96       	adiw	r28, 0x0d	; 13
    24b4:	0f b6       	in	r0, 0x3f	; 63
    24b6:	f8 94       	cli
    24b8:	de bf       	out	0x3e, r29	; 62
    24ba:	0f be       	out	0x3f, r0	; 63
    24bc:	cd bf       	out	0x3d, r28	; 61
    24be:	df 91       	pop	r29
    24c0:	cf 91       	pop	r28
    24c2:	1f 91       	pop	r17
    24c4:	0f 91       	pop	r16
    24c6:	08 95       	ret

000024c8 <sensirion_i2c_hal_write>:

// from scd41 hal.c
// writes to only scd41 
int8_t sensirion_i2c_hal_write(uint8_t address, const uint8_t* data, uint16_t count) {
    24c8:	0f 93       	push	r16
    24ca:	1f 93       	push	r17
    24cc:	cf 93       	push	r28
    24ce:	df 93       	push	r29
    24d0:	00 d0       	rcall	.+0      	; 0x24d2 <sensirion_i2c_hal_write+0xa>
    24d2:	00 d0       	rcall	.+0      	; 0x24d4 <sensirion_i2c_hal_write+0xc>
    24d4:	1f 92       	push	r1
    24d6:	cd b7       	in	r28, 0x3d	; 61
    24d8:	de b7       	in	r29, 0x3e	; 62
    24da:	89 83       	std	Y+1, r24	; 0x01
    24dc:	7b 83       	std	Y+3, r23	; 0x03
    24de:	6a 83       	std	Y+2, r22	; 0x02
    24e0:	5d 83       	std	Y+5, r21	; 0x05
    24e2:	4c 83       	std	Y+4, r20	; 0x04
	if(i2c_io(SCD41_ADDR, data, count, NULL, 0) != 0)
    24e4:	4c 81       	ldd	r20, Y+4	; 0x04
    24e6:	5d 81       	ldd	r21, Y+5	; 0x05
    24e8:	8a 81       	ldd	r24, Y+2	; 0x02
    24ea:	9b 81       	ldd	r25, Y+3	; 0x03
    24ec:	00 e0       	ldi	r16, 0x00	; 0
    24ee:	10 e0       	ldi	r17, 0x00	; 0
    24f0:	20 e0       	ldi	r18, 0x00	; 0
    24f2:	30 e0       	ldi	r19, 0x00	; 0
    24f4:	bc 01       	movw	r22, r24
    24f6:	82 e6       	ldi	r24, 0x62	; 98
    24f8:	0e 94 e3 0f 	call	0x1fc6	; 0x1fc6 <i2c_io>
    24fc:	88 23       	and	r24, r24
    24fe:	11 f0       	breq	.+4      	; 0x2504 <sensirion_i2c_hal_write+0x3c>
		return STATUS_FAIL;
    2500:	8f ef       	ldi	r24, 0xFF	; 255
    2502:	01 c0       	rjmp	.+2      	; 0x2506 <sensirion_i2c_hal_write+0x3e>
	return NO_ERROR;
    2504:	80 e0       	ldi	r24, 0x00	; 0
}
    2506:	0f 90       	pop	r0
    2508:	0f 90       	pop	r0
    250a:	0f 90       	pop	r0
    250c:	0f 90       	pop	r0
    250e:	0f 90       	pop	r0
    2510:	df 91       	pop	r29
    2512:	cf 91       	pop	r28
    2514:	1f 91       	pop	r17
    2516:	0f 91       	pop	r16
    2518:	08 95       	ret

0000251a <sensirion_i2c_write_data>:

int16_t sensirion_i2c_write_data(uint8_t address, const uint8_t* data, uint16_t data_length) {
    251a:	cf 93       	push	r28
    251c:	df 93       	push	r29
    251e:	00 d0       	rcall	.+0      	; 0x2520 <sensirion_i2c_write_data+0x6>
    2520:	00 d0       	rcall	.+0      	; 0x2522 <sensirion_i2c_write_data+0x8>
    2522:	1f 92       	push	r1
    2524:	cd b7       	in	r28, 0x3d	; 61
    2526:	de b7       	in	r29, 0x3e	; 62
    2528:	89 83       	std	Y+1, r24	; 0x01
    252a:	7b 83       	std	Y+3, r23	; 0x03
    252c:	6a 83       	std	Y+2, r22	; 0x02
    252e:	5d 83       	std	Y+5, r21	; 0x05
    2530:	4c 83       	std	Y+4, r20	; 0x04
	return sensirion_i2c_hal_write(address, data, data_length);
    2532:	2c 81       	ldd	r18, Y+4	; 0x04
    2534:	3d 81       	ldd	r19, Y+5	; 0x05
    2536:	8a 81       	ldd	r24, Y+2	; 0x02
    2538:	9b 81       	ldd	r25, Y+3	; 0x03
    253a:	a9 01       	movw	r20, r18
    253c:	bc 01       	movw	r22, r24
    253e:	89 81       	ldd	r24, Y+1	; 0x01
    2540:	0e 94 64 12 	call	0x24c8	; 0x24c8 <sensirion_i2c_hal_write>
    2544:	08 2e       	mov	r0, r24
    2546:	00 0c       	add	r0, r0
    2548:	99 0b       	sbc	r25, r25
}
    254a:	0f 90       	pop	r0
    254c:	0f 90       	pop	r0
    254e:	0f 90       	pop	r0
    2550:	0f 90       	pop	r0
    2552:	0f 90       	pop	r0
    2554:	df 91       	pop	r29
    2556:	cf 91       	pop	r28
    2558:	08 95       	ret

0000255a <sensirion_i2c_hal_read>:

int8_t sensirion_i2c_hal_read(uint8_t address, uint8_t* data, uint8_t count) {
    255a:	0f 93       	push	r16
    255c:	1f 93       	push	r17
    255e:	cf 93       	push	r28
    2560:	df 93       	push	r29
    2562:	00 d0       	rcall	.+0      	; 0x2564 <sensirion_i2c_hal_read+0xa>
    2564:	00 d0       	rcall	.+0      	; 0x2566 <sensirion_i2c_hal_read+0xc>
    2566:	cd b7       	in	r28, 0x3d	; 61
    2568:	de b7       	in	r29, 0x3e	; 62
    256a:	89 83       	std	Y+1, r24	; 0x01
    256c:	7b 83       	std	Y+3, r23	; 0x03
    256e:	6a 83       	std	Y+2, r22	; 0x02
    2570:	4c 83       	std	Y+4, r20	; 0x04
	if(i2c_io(SCD41_ADDR, NULL, 0, data, count) != 0)
    2572:	8c 81       	ldd	r24, Y+4	; 0x04
    2574:	28 2f       	mov	r18, r24
    2576:	30 e0       	ldi	r19, 0x00	; 0
    2578:	8a 81       	ldd	r24, Y+2	; 0x02
    257a:	9b 81       	ldd	r25, Y+3	; 0x03
    257c:	89 01       	movw	r16, r18
    257e:	9c 01       	movw	r18, r24
    2580:	40 e0       	ldi	r20, 0x00	; 0
    2582:	50 e0       	ldi	r21, 0x00	; 0
    2584:	60 e0       	ldi	r22, 0x00	; 0
    2586:	70 e0       	ldi	r23, 0x00	; 0
    2588:	82 e6       	ldi	r24, 0x62	; 98
    258a:	0e 94 e3 0f 	call	0x1fc6	; 0x1fc6 <i2c_io>
    258e:	88 23       	and	r24, r24
    2590:	11 f0       	breq	.+4      	; 0x2596 <sensirion_i2c_hal_read+0x3c>
		return STATUS_FAIL;
    2592:	8f ef       	ldi	r24, 0xFF	; 255
    2594:	01 c0       	rjmp	.+2      	; 0x2598 <sensirion_i2c_hal_read+0x3e>
	return NO_ERROR;
    2596:	80 e0       	ldi	r24, 0x00	; 0
}
    2598:	0f 90       	pop	r0
    259a:	0f 90       	pop	r0
    259c:	0f 90       	pop	r0
    259e:	0f 90       	pop	r0
    25a0:	df 91       	pop	r29
    25a2:	cf 91       	pop	r28
    25a4:	1f 91       	pop	r17
    25a6:	0f 91       	pop	r16
    25a8:	08 95       	ret

000025aa <sensirion_i2c_read_data_inplace>:

int16_t sensirion_i2c_read_data_inplace(uint8_t address, uint8_t* buffer, uint16_t expected_data_length) {
    25aa:	cf 93       	push	r28
    25ac:	df 93       	push	r29
    25ae:	cd b7       	in	r28, 0x3d	; 61
    25b0:	de b7       	in	r29, 0x3e	; 62
    25b2:	2d 97       	sbiw	r28, 0x0d	; 13
    25b4:	0f b6       	in	r0, 0x3f	; 63
    25b6:	f8 94       	cli
    25b8:	de bf       	out	0x3e, r29	; 62
    25ba:	0f be       	out	0x3f, r0	; 63
    25bc:	cd bf       	out	0x3d, r28	; 61
    25be:	89 87       	std	Y+9, r24	; 0x09
    25c0:	7b 87       	std	Y+11, r23	; 0x0b
    25c2:	6a 87       	std	Y+10, r22	; 0x0a
    25c4:	5d 87       	std	Y+13, r21	; 0x0d
    25c6:	4c 87       	std	Y+12, r20	; 0x0c
	int16_t error;
	uint16_t i, j;

	uint16_t size = (expected_data_length / SENSIRION_WORD_SIZE) * (SENSIRION_WORD_SIZE + CRC8_LEN);
    25c8:	8c 85       	ldd	r24, Y+12	; 0x0c
    25ca:	9d 85       	ldd	r25, Y+13	; 0x0d
    25cc:	9c 01       	movw	r18, r24
    25ce:	36 95       	lsr	r19
    25d0:	27 95       	ror	r18
    25d2:	c9 01       	movw	r24, r18
    25d4:	88 0f       	add	r24, r24
    25d6:	99 1f       	adc	r25, r25
    25d8:	82 0f       	add	r24, r18
    25da:	93 1f       	adc	r25, r19
    25dc:	9e 83       	std	Y+6, r25	; 0x06
    25de:	8d 83       	std	Y+5, r24	; 0x05

	if (expected_data_length % SENSIRION_WORD_SIZE != 0) {
    25e0:	8c 85       	ldd	r24, Y+12	; 0x0c
    25e2:	9d 85       	ldd	r25, Y+13	; 0x0d
    25e4:	81 70       	andi	r24, 0x01	; 1
    25e6:	99 27       	eor	r25, r25
    25e8:	89 2b       	or	r24, r25
    25ea:	19 f0       	breq	.+6      	; 0x25f2 <sensirion_i2c_read_data_inplace+0x48>
		return BYTE_NUM_ERROR;
    25ec:	84 e0       	ldi	r24, 0x04	; 4
    25ee:	90 e0       	ldi	r25, 0x00	; 0
    25f0:	73 c0       	rjmp	.+230    	; 0x26d8 <sensirion_i2c_read_data_inplace+0x12e>
	}

	error = sensirion_i2c_hal_read(address, buffer, size);
    25f2:	2d 81       	ldd	r18, Y+5	; 0x05
    25f4:	8a 85       	ldd	r24, Y+10	; 0x0a
    25f6:	9b 85       	ldd	r25, Y+11	; 0x0b
    25f8:	42 2f       	mov	r20, r18
    25fa:	bc 01       	movw	r22, r24
    25fc:	89 85       	ldd	r24, Y+9	; 0x09
    25fe:	0e 94 ad 12 	call	0x255a	; 0x255a <sensirion_i2c_hal_read>
    2602:	08 2e       	mov	r0, r24
    2604:	00 0c       	add	r0, r0
    2606:	99 0b       	sbc	r25, r25
    2608:	98 87       	std	Y+8, r25	; 0x08
    260a:	8f 83       	std	Y+7, r24	; 0x07
	if (error) {
    260c:	8f 81       	ldd	r24, Y+7	; 0x07
    260e:	98 85       	ldd	r25, Y+8	; 0x08
    2610:	89 2b       	or	r24, r25
    2612:	19 f0       	breq	.+6      	; 0x261a <sensirion_i2c_read_data_inplace+0x70>
		return error;
    2614:	8f 81       	ldd	r24, Y+7	; 0x07
    2616:	98 85       	ldd	r25, Y+8	; 0x08
    2618:	5f c0       	rjmp	.+190    	; 0x26d8 <sensirion_i2c_read_data_inplace+0x12e>
	}

	for (i = 0, j = 0; i < size; i += SENSIRION_WORD_SIZE + CRC8_LEN) {
    261a:	1a 82       	std	Y+2, r1	; 0x02
    261c:	19 82       	std	Y+1, r1	; 0x01
    261e:	1c 82       	std	Y+4, r1	; 0x04
    2620:	1b 82       	std	Y+3, r1	; 0x03
    2622:	50 c0       	rjmp	.+160    	; 0x26c4 <sensirion_i2c_read_data_inplace+0x11a>
		error = sensirion_i2c_check_crc(&buffer[i], SENSIRION_WORD_SIZE, buffer[i + SENSIRION_WORD_SIZE]);
    2624:	89 81       	ldd	r24, Y+1	; 0x01
    2626:	9a 81       	ldd	r25, Y+2	; 0x02
    2628:	02 96       	adiw	r24, 0x02	; 2
    262a:	2a 85       	ldd	r18, Y+10	; 0x0a
    262c:	3b 85       	ldd	r19, Y+11	; 0x0b
    262e:	82 0f       	add	r24, r18
    2630:	93 1f       	adc	r25, r19
    2632:	fc 01       	movw	r30, r24
    2634:	40 81       	ld	r20, Z
    2636:	2a 85       	ldd	r18, Y+10	; 0x0a
    2638:	3b 85       	ldd	r19, Y+11	; 0x0b
    263a:	89 81       	ldd	r24, Y+1	; 0x01
    263c:	9a 81       	ldd	r25, Y+2	; 0x02
    263e:	82 0f       	add	r24, r18
    2640:	93 1f       	adc	r25, r19
    2642:	62 e0       	ldi	r22, 0x02	; 2
    2644:	70 e0       	ldi	r23, 0x00	; 0
    2646:	0e 94 00 14 	call	0x2800	; 0x2800 <sensirion_i2c_check_crc>
    264a:	08 2e       	mov	r0, r24
    264c:	00 0c       	add	r0, r0
    264e:	99 0b       	sbc	r25, r25
    2650:	98 87       	std	Y+8, r25	; 0x08
    2652:	8f 83       	std	Y+7, r24	; 0x07
		if (error) {
    2654:	8f 81       	ldd	r24, Y+7	; 0x07
    2656:	98 85       	ldd	r25, Y+8	; 0x08
    2658:	89 2b       	or	r24, r25
    265a:	19 f0       	breq	.+6      	; 0x2662 <sensirion_i2c_read_data_inplace+0xb8>
			return error;
    265c:	8f 81       	ldd	r24, Y+7	; 0x07
    265e:	98 85       	ldd	r25, Y+8	; 0x08
    2660:	3b c0       	rjmp	.+118    	; 0x26d8 <sensirion_i2c_read_data_inplace+0x12e>
		}
		buffer[j++] = buffer[i];
    2662:	8b 81       	ldd	r24, Y+3	; 0x03
    2664:	9c 81       	ldd	r25, Y+4	; 0x04
    2666:	9c 01       	movw	r18, r24
    2668:	2f 5f       	subi	r18, 0xFF	; 255
    266a:	3f 4f       	sbci	r19, 0xFF	; 255
    266c:	3c 83       	std	Y+4, r19	; 0x04
    266e:	2b 83       	std	Y+3, r18	; 0x03
    2670:	2a 85       	ldd	r18, Y+10	; 0x0a
    2672:	3b 85       	ldd	r19, Y+11	; 0x0b
    2674:	82 0f       	add	r24, r18
    2676:	93 1f       	adc	r25, r19
    2678:	4a 85       	ldd	r20, Y+10	; 0x0a
    267a:	5b 85       	ldd	r21, Y+11	; 0x0b
    267c:	29 81       	ldd	r18, Y+1	; 0x01
    267e:	3a 81       	ldd	r19, Y+2	; 0x02
    2680:	24 0f       	add	r18, r20
    2682:	35 1f       	adc	r19, r21
    2684:	f9 01       	movw	r30, r18
    2686:	20 81       	ld	r18, Z
    2688:	fc 01       	movw	r30, r24
    268a:	20 83       	st	Z, r18
		buffer[j++] = buffer[i + 1];
    268c:	8b 81       	ldd	r24, Y+3	; 0x03
    268e:	9c 81       	ldd	r25, Y+4	; 0x04
    2690:	9c 01       	movw	r18, r24
    2692:	2f 5f       	subi	r18, 0xFF	; 255
    2694:	3f 4f       	sbci	r19, 0xFF	; 255
    2696:	3c 83       	std	Y+4, r19	; 0x04
    2698:	2b 83       	std	Y+3, r18	; 0x03
    269a:	2a 85       	ldd	r18, Y+10	; 0x0a
    269c:	3b 85       	ldd	r19, Y+11	; 0x0b
    269e:	82 0f       	add	r24, r18
    26a0:	93 1f       	adc	r25, r19
    26a2:	29 81       	ldd	r18, Y+1	; 0x01
    26a4:	3a 81       	ldd	r19, Y+2	; 0x02
    26a6:	2f 5f       	subi	r18, 0xFF	; 255
    26a8:	3f 4f       	sbci	r19, 0xFF	; 255
    26aa:	4a 85       	ldd	r20, Y+10	; 0x0a
    26ac:	5b 85       	ldd	r21, Y+11	; 0x0b
    26ae:	24 0f       	add	r18, r20
    26b0:	35 1f       	adc	r19, r21
    26b2:	f9 01       	movw	r30, r18
    26b4:	20 81       	ld	r18, Z
    26b6:	fc 01       	movw	r30, r24
    26b8:	20 83       	st	Z, r18
	error = sensirion_i2c_hal_read(address, buffer, size);
	if (error) {
		return error;
	}

	for (i = 0, j = 0; i < size; i += SENSIRION_WORD_SIZE + CRC8_LEN) {
    26ba:	89 81       	ldd	r24, Y+1	; 0x01
    26bc:	9a 81       	ldd	r25, Y+2	; 0x02
    26be:	03 96       	adiw	r24, 0x03	; 3
    26c0:	9a 83       	std	Y+2, r25	; 0x02
    26c2:	89 83       	std	Y+1, r24	; 0x01
    26c4:	29 81       	ldd	r18, Y+1	; 0x01
    26c6:	3a 81       	ldd	r19, Y+2	; 0x02
    26c8:	8d 81       	ldd	r24, Y+5	; 0x05
    26ca:	9e 81       	ldd	r25, Y+6	; 0x06
    26cc:	28 17       	cp	r18, r24
    26ce:	39 07       	cpc	r19, r25
    26d0:	08 f4       	brcc	.+2      	; 0x26d4 <sensirion_i2c_read_data_inplace+0x12a>
    26d2:	a8 cf       	rjmp	.-176    	; 0x2624 <sensirion_i2c_read_data_inplace+0x7a>
		}
		buffer[j++] = buffer[i];
		buffer[j++] = buffer[i + 1];
	}

	return NO_ERROR;
    26d4:	80 e0       	ldi	r24, 0x00	; 0
    26d6:	90 e0       	ldi	r25, 0x00	; 0
}
    26d8:	2d 96       	adiw	r28, 0x0d	; 13
    26da:	0f b6       	in	r0, 0x3f	; 63
    26dc:	f8 94       	cli
    26de:	de bf       	out	0x3e, r29	; 62
    26e0:	0f be       	out	0x3f, r0	; 63
    26e2:	cd bf       	out	0x3d, r28	; 61
    26e4:	df 91       	pop	r29
    26e6:	cf 91       	pop	r28
    26e8:	08 95       	ret

000026ea <sensirion_i2c_add_uint16_t_to_buffer>:

uint16_t sensirion_i2c_add_uint16_t_to_buffer(uint8_t* buffer, uint16_t offset, uint16_t data) 
{
    26ea:	0f 93       	push	r16
    26ec:	1f 93       	push	r17
    26ee:	cf 93       	push	r28
    26f0:	df 93       	push	r29
    26f2:	00 d0       	rcall	.+0      	; 0x26f4 <sensirion_i2c_add_uint16_t_to_buffer+0xa>
    26f4:	00 d0       	rcall	.+0      	; 0x26f6 <sensirion_i2c_add_uint16_t_to_buffer+0xc>
    26f6:	00 d0       	rcall	.+0      	; 0x26f8 <sensirion_i2c_add_uint16_t_to_buffer+0xe>
    26f8:	cd b7       	in	r28, 0x3d	; 61
    26fa:	de b7       	in	r29, 0x3e	; 62
    26fc:	9a 83       	std	Y+2, r25	; 0x02
    26fe:	89 83       	std	Y+1, r24	; 0x01
    2700:	7c 83       	std	Y+4, r23	; 0x04
    2702:	6b 83       	std	Y+3, r22	; 0x03
    2704:	5e 83       	std	Y+6, r21	; 0x06
    2706:	4d 83       	std	Y+5, r20	; 0x05
	buffer[offset++] = (uint8_t)((data & 0xFF00) >> 8);
    2708:	8b 81       	ldd	r24, Y+3	; 0x03
    270a:	9c 81       	ldd	r25, Y+4	; 0x04
    270c:	9c 01       	movw	r18, r24
    270e:	2f 5f       	subi	r18, 0xFF	; 255
    2710:	3f 4f       	sbci	r19, 0xFF	; 255
    2712:	3c 83       	std	Y+4, r19	; 0x04
    2714:	2b 83       	std	Y+3, r18	; 0x03
    2716:	29 81       	ldd	r18, Y+1	; 0x01
    2718:	3a 81       	ldd	r19, Y+2	; 0x02
    271a:	82 0f       	add	r24, r18
    271c:	93 1f       	adc	r25, r19
    271e:	2d 81       	ldd	r18, Y+5	; 0x05
    2720:	3e 81       	ldd	r19, Y+6	; 0x06
    2722:	23 2f       	mov	r18, r19
    2724:	33 27       	eor	r19, r19
    2726:	fc 01       	movw	r30, r24
    2728:	20 83       	st	Z, r18
	buffer[offset++] = (uint8_t)((data & 0x00FF) >> 0);
    272a:	8b 81       	ldd	r24, Y+3	; 0x03
    272c:	9c 81       	ldd	r25, Y+4	; 0x04
    272e:	9c 01       	movw	r18, r24
    2730:	2f 5f       	subi	r18, 0xFF	; 255
    2732:	3f 4f       	sbci	r19, 0xFF	; 255
    2734:	3c 83       	std	Y+4, r19	; 0x04
    2736:	2b 83       	std	Y+3, r18	; 0x03
    2738:	29 81       	ldd	r18, Y+1	; 0x01
    273a:	3a 81       	ldd	r19, Y+2	; 0x02
    273c:	82 0f       	add	r24, r18
    273e:	93 1f       	adc	r25, r19
    2740:	2d 81       	ldd	r18, Y+5	; 0x05
    2742:	fc 01       	movw	r30, r24
    2744:	20 83       	st	Z, r18
	buffer[offset] = sensirion_i2c_generate_crc(&buffer[offset - SENSIRION_WORD_SIZE], SENSIRION_WORD_SIZE);
    2746:	29 81       	ldd	r18, Y+1	; 0x01
    2748:	3a 81       	ldd	r19, Y+2	; 0x02
    274a:	8b 81       	ldd	r24, Y+3	; 0x03
    274c:	9c 81       	ldd	r25, Y+4	; 0x04
    274e:	89 01       	movw	r16, r18
    2750:	08 0f       	add	r16, r24
    2752:	19 1f       	adc	r17, r25
    2754:	8b 81       	ldd	r24, Y+3	; 0x03
    2756:	9c 81       	ldd	r25, Y+4	; 0x04
    2758:	02 97       	sbiw	r24, 0x02	; 2
    275a:	29 81       	ldd	r18, Y+1	; 0x01
    275c:	3a 81       	ldd	r19, Y+2	; 0x02
    275e:	82 0f       	add	r24, r18
    2760:	93 1f       	adc	r25, r19
    2762:	62 e0       	ldi	r22, 0x02	; 2
    2764:	70 e0       	ldi	r23, 0x00	; 0
    2766:	0e 94 22 14 	call	0x2844	; 0x2844 <sensirion_i2c_generate_crc>
    276a:	f8 01       	movw	r30, r16
    276c:	80 83       	st	Z, r24
	offset++;
    276e:	8b 81       	ldd	r24, Y+3	; 0x03
    2770:	9c 81       	ldd	r25, Y+4	; 0x04
    2772:	01 96       	adiw	r24, 0x01	; 1
    2774:	9c 83       	std	Y+4, r25	; 0x04
    2776:	8b 83       	std	Y+3, r24	; 0x03

	return offset;
    2778:	8b 81       	ldd	r24, Y+3	; 0x03
    277a:	9c 81       	ldd	r25, Y+4	; 0x04
}
    277c:	26 96       	adiw	r28, 0x06	; 6
    277e:	0f b6       	in	r0, 0x3f	; 63
    2780:	f8 94       	cli
    2782:	de bf       	out	0x3e, r29	; 62
    2784:	0f be       	out	0x3f, r0	; 63
    2786:	cd bf       	out	0x3d, r28	; 61
    2788:	df 91       	pop	r29
    278a:	cf 91       	pop	r28
    278c:	1f 91       	pop	r17
    278e:	0f 91       	pop	r16
    2790:	08 95       	ret

00002792 <sensirion_i2c_add_command16_to_buffer>:

uint16_t sensirion_i2c_add_command16_to_buffer(uint8_t* buffer, uint16_t offset, uint16_t command)
{
    2792:	cf 93       	push	r28
    2794:	df 93       	push	r29
    2796:	00 d0       	rcall	.+0      	; 0x2798 <sensirion_i2c_add_command16_to_buffer+0x6>
    2798:	00 d0       	rcall	.+0      	; 0x279a <sensirion_i2c_add_command16_to_buffer+0x8>
    279a:	00 d0       	rcall	.+0      	; 0x279c <sensirion_i2c_add_command16_to_buffer+0xa>
    279c:	cd b7       	in	r28, 0x3d	; 61
    279e:	de b7       	in	r29, 0x3e	; 62
    27a0:	9a 83       	std	Y+2, r25	; 0x02
    27a2:	89 83       	std	Y+1, r24	; 0x01
    27a4:	7c 83       	std	Y+4, r23	; 0x04
    27a6:	6b 83       	std	Y+3, r22	; 0x03
    27a8:	5e 83       	std	Y+6, r21	; 0x06
    27aa:	4d 83       	std	Y+5, r20	; 0x05
	buffer[offset++] = (uint8_t)((command & 0xFF00) >> 8);
    27ac:	8b 81       	ldd	r24, Y+3	; 0x03
    27ae:	9c 81       	ldd	r25, Y+4	; 0x04
    27b0:	9c 01       	movw	r18, r24
    27b2:	2f 5f       	subi	r18, 0xFF	; 255
    27b4:	3f 4f       	sbci	r19, 0xFF	; 255
    27b6:	3c 83       	std	Y+4, r19	; 0x04
    27b8:	2b 83       	std	Y+3, r18	; 0x03
    27ba:	29 81       	ldd	r18, Y+1	; 0x01
    27bc:	3a 81       	ldd	r19, Y+2	; 0x02
    27be:	82 0f       	add	r24, r18
    27c0:	93 1f       	adc	r25, r19
    27c2:	2d 81       	ldd	r18, Y+5	; 0x05
    27c4:	3e 81       	ldd	r19, Y+6	; 0x06
    27c6:	23 2f       	mov	r18, r19
    27c8:	33 27       	eor	r19, r19
    27ca:	fc 01       	movw	r30, r24
    27cc:	20 83       	st	Z, r18
    buffer[offset++] = (uint8_t)((command & 0x00FF) >> 0);
    27ce:	8b 81       	ldd	r24, Y+3	; 0x03
    27d0:	9c 81       	ldd	r25, Y+4	; 0x04
    27d2:	9c 01       	movw	r18, r24
    27d4:	2f 5f       	subi	r18, 0xFF	; 255
    27d6:	3f 4f       	sbci	r19, 0xFF	; 255
    27d8:	3c 83       	std	Y+4, r19	; 0x04
    27da:	2b 83       	std	Y+3, r18	; 0x03
    27dc:	29 81       	ldd	r18, Y+1	; 0x01
    27de:	3a 81       	ldd	r19, Y+2	; 0x02
    27e0:	82 0f       	add	r24, r18
    27e2:	93 1f       	adc	r25, r19
    27e4:	2d 81       	ldd	r18, Y+5	; 0x05
    27e6:	fc 01       	movw	r30, r24
    27e8:	20 83       	st	Z, r18
    return offset;
    27ea:	8b 81       	ldd	r24, Y+3	; 0x03
    27ec:	9c 81       	ldd	r25, Y+4	; 0x04
}
    27ee:	26 96       	adiw	r28, 0x06	; 6
    27f0:	0f b6       	in	r0, 0x3f	; 63
    27f2:	f8 94       	cli
    27f4:	de bf       	out	0x3e, r29	; 62
    27f6:	0f be       	out	0x3f, r0	; 63
    27f8:	cd bf       	out	0x3d, r28	; 61
    27fa:	df 91       	pop	r29
    27fc:	cf 91       	pop	r28
    27fe:	08 95       	ret

00002800 <sensirion_i2c_check_crc>:

int8_t sensirion_i2c_check_crc(const uint8_t* data, uint16_t count, uint8_t checksum) {
    2800:	cf 93       	push	r28
    2802:	df 93       	push	r29
    2804:	00 d0       	rcall	.+0      	; 0x2806 <sensirion_i2c_check_crc+0x6>
    2806:	00 d0       	rcall	.+0      	; 0x2808 <sensirion_i2c_check_crc+0x8>
    2808:	1f 92       	push	r1
    280a:	cd b7       	in	r28, 0x3d	; 61
    280c:	de b7       	in	r29, 0x3e	; 62
    280e:	9a 83       	std	Y+2, r25	; 0x02
    2810:	89 83       	std	Y+1, r24	; 0x01
    2812:	7c 83       	std	Y+4, r23	; 0x04
    2814:	6b 83       	std	Y+3, r22	; 0x03
    2816:	4d 83       	std	Y+5, r20	; 0x05
	if (sensirion_i2c_generate_crc(data, count) != checksum)
    2818:	2b 81       	ldd	r18, Y+3	; 0x03
    281a:	3c 81       	ldd	r19, Y+4	; 0x04
    281c:	89 81       	ldd	r24, Y+1	; 0x01
    281e:	9a 81       	ldd	r25, Y+2	; 0x02
    2820:	b9 01       	movw	r22, r18
    2822:	0e 94 22 14 	call	0x2844	; 0x2844 <sensirion_i2c_generate_crc>
    2826:	98 2f       	mov	r25, r24
    2828:	8d 81       	ldd	r24, Y+5	; 0x05
    282a:	98 17       	cp	r25, r24
    282c:	11 f0       	breq	.+4      	; 0x2832 <sensirion_i2c_check_crc+0x32>
		return CRC_ERROR;
    282e:	81 e0       	ldi	r24, 0x01	; 1
    2830:	01 c0       	rjmp	.+2      	; 0x2834 <sensirion_i2c_check_crc+0x34>
	return NO_ERROR;
    2832:	80 e0       	ldi	r24, 0x00	; 0
}
    2834:	0f 90       	pop	r0
    2836:	0f 90       	pop	r0
    2838:	0f 90       	pop	r0
    283a:	0f 90       	pop	r0
    283c:	0f 90       	pop	r0
    283e:	df 91       	pop	r29
    2840:	cf 91       	pop	r28
    2842:	08 95       	ret

00002844 <sensirion_i2c_generate_crc>:

uint8_t sensirion_i2c_generate_crc(const uint8_t* data, uint16_t count) {
    2844:	cf 93       	push	r28
    2846:	df 93       	push	r29
    2848:	cd b7       	in	r28, 0x3d	; 61
    284a:	de b7       	in	r29, 0x3e	; 62
    284c:	28 97       	sbiw	r28, 0x08	; 8
    284e:	0f b6       	in	r0, 0x3f	; 63
    2850:	f8 94       	cli
    2852:	de bf       	out	0x3e, r29	; 62
    2854:	0f be       	out	0x3f, r0	; 63
    2856:	cd bf       	out	0x3d, r28	; 61
    2858:	9e 83       	std	Y+6, r25	; 0x06
    285a:	8d 83       	std	Y+5, r24	; 0x05
    285c:	78 87       	std	Y+8, r23	; 0x08
    285e:	6f 83       	std	Y+7, r22	; 0x07
    uint16_t current_byte;
    uint8_t crc = CRC8_INIT;
    2860:	8f ef       	ldi	r24, 0xFF	; 255
    2862:	8b 83       	std	Y+3, r24	; 0x03
    uint8_t crc_bit;

    /* calculates 8-Bit checksum with given polynomial */
    for (current_byte = 0; current_byte < count; ++current_byte) {
    2864:	1a 82       	std	Y+2, r1	; 0x02
    2866:	19 82       	std	Y+1, r1	; 0x01
    2868:	29 c0       	rjmp	.+82     	; 0x28bc <sensirion_i2c_generate_crc+0x78>
        crc ^= (data[current_byte]);
    286a:	2d 81       	ldd	r18, Y+5	; 0x05
    286c:	3e 81       	ldd	r19, Y+6	; 0x06
    286e:	89 81       	ldd	r24, Y+1	; 0x01
    2870:	9a 81       	ldd	r25, Y+2	; 0x02
    2872:	82 0f       	add	r24, r18
    2874:	93 1f       	adc	r25, r19
    2876:	fc 01       	movw	r30, r24
    2878:	80 81       	ld	r24, Z
    287a:	9b 81       	ldd	r25, Y+3	; 0x03
    287c:	89 27       	eor	r24, r25
    287e:	8b 83       	std	Y+3, r24	; 0x03
        for (crc_bit = 8; crc_bit > 0; --crc_bit) {
    2880:	88 e0       	ldi	r24, 0x08	; 8
    2882:	8c 83       	std	Y+4, r24	; 0x04
    2884:	13 c0       	rjmp	.+38     	; 0x28ac <sensirion_i2c_generate_crc+0x68>
            if (crc & 0x80)
    2886:	8b 81       	ldd	r24, Y+3	; 0x03
    2888:	88 23       	and	r24, r24
    288a:	54 f4       	brge	.+20     	; 0x28a0 <sensirion_i2c_generate_crc+0x5c>
                crc = (crc << 1) ^ CRC8_POLYNOMIAL;
    288c:	8b 81       	ldd	r24, Y+3	; 0x03
    288e:	88 2f       	mov	r24, r24
    2890:	90 e0       	ldi	r25, 0x00	; 0
    2892:	88 0f       	add	r24, r24
    2894:	99 1f       	adc	r25, r25
    2896:	98 2f       	mov	r25, r24
    2898:	81 e3       	ldi	r24, 0x31	; 49
    289a:	89 27       	eor	r24, r25
    289c:	8b 83       	std	Y+3, r24	; 0x03
    289e:	03 c0       	rjmp	.+6      	; 0x28a6 <sensirion_i2c_generate_crc+0x62>
            else
                crc = (crc << 1);
    28a0:	8b 81       	ldd	r24, Y+3	; 0x03
    28a2:	88 0f       	add	r24, r24
    28a4:	8b 83       	std	Y+3, r24	; 0x03
    uint8_t crc_bit;

    /* calculates 8-Bit checksum with given polynomial */
    for (current_byte = 0; current_byte < count; ++current_byte) {
        crc ^= (data[current_byte]);
        for (crc_bit = 8; crc_bit > 0; --crc_bit) {
    28a6:	8c 81       	ldd	r24, Y+4	; 0x04
    28a8:	81 50       	subi	r24, 0x01	; 1
    28aa:	8c 83       	std	Y+4, r24	; 0x04
    28ac:	8c 81       	ldd	r24, Y+4	; 0x04
    28ae:	88 23       	and	r24, r24
    28b0:	51 f7       	brne	.-44     	; 0x2886 <sensirion_i2c_generate_crc+0x42>
    uint16_t current_byte;
    uint8_t crc = CRC8_INIT;
    uint8_t crc_bit;

    /* calculates 8-Bit checksum with given polynomial */
    for (current_byte = 0; current_byte < count; ++current_byte) {
    28b2:	89 81       	ldd	r24, Y+1	; 0x01
    28b4:	9a 81       	ldd	r25, Y+2	; 0x02
    28b6:	01 96       	adiw	r24, 0x01	; 1
    28b8:	9a 83       	std	Y+2, r25	; 0x02
    28ba:	89 83       	std	Y+1, r24	; 0x01
    28bc:	29 81       	ldd	r18, Y+1	; 0x01
    28be:	3a 81       	ldd	r19, Y+2	; 0x02
    28c0:	8f 81       	ldd	r24, Y+7	; 0x07
    28c2:	98 85       	ldd	r25, Y+8	; 0x08
    28c4:	28 17       	cp	r18, r24
    28c6:	39 07       	cpc	r19, r25
    28c8:	80 f2       	brcs	.-96     	; 0x286a <sensirion_i2c_generate_crc+0x26>
                crc = (crc << 1) ^ CRC8_POLYNOMIAL;
            else
                crc = (crc << 1);
        }
    }
    return crc;
    28ca:	8b 81       	ldd	r24, Y+3	; 0x03
    28cc:	28 96       	adiw	r28, 0x08	; 8
    28ce:	0f b6       	in	r0, 0x3f	; 63
    28d0:	f8 94       	cli
    28d2:	de bf       	out	0x3e, r29	; 62
    28d4:	0f be       	out	0x3f, r0	; 63
    28d6:	cd bf       	out	0x3d, r28	; 61
    28d8:	df 91       	pop	r29
    28da:	cf 91       	pop	r28
    28dc:	08 95       	ret

000028de <scd4x_init>:
    if (local_error != NO_ERROR) {
        return local_error;
    }
    sensirion_sleep_usec(1 * 1000);
    return local_error;
}
    28de:	cf 93       	push	r28
    28e0:	df 93       	push	r29
    28e2:	1f 92       	push	r1
    28e4:	cd b7       	in	r28, 0x3d	; 61
    28e6:	de b7       	in	r29, 0x3e	; 62
    28e8:	89 83       	std	Y+1, r24	; 0x01
    28ea:	89 81       	ldd	r24, Y+1	; 0x01
    28ec:	80 93 39 05 	sts	0x0539, r24	; 0x800539 <_i2c_address>
    28f0:	00 00       	nop
    28f2:	0f 90       	pop	r0
    28f4:	df 91       	pop	r29
    28f6:	cf 91       	pop	r28
    28f8:	08 95       	ret

000028fa <scd4x_get_data_ready_status>:
    28fa:	cf 93       	push	r28
    28fc:	df 93       	push	r29
    28fe:	00 d0       	rcall	.+0      	; 0x2900 <scd4x_get_data_ready_status+0x6>
    2900:	00 d0       	rcall	.+0      	; 0x2902 <scd4x_get_data_ready_status+0x8>
    2902:	00 d0       	rcall	.+0      	; 0x2904 <scd4x_get_data_ready_status+0xa>
    2904:	cd b7       	in	r28, 0x3d	; 61
    2906:	de b7       	in	r29, 0x3e	; 62
    2908:	9e 83       	std	Y+6, r25	; 0x06
    290a:	8d 83       	std	Y+5, r24	; 0x05
    290c:	1c 82       	std	Y+4, r1	; 0x04
    290e:	1b 82       	std	Y+3, r1	; 0x03
    2910:	1a 82       	std	Y+2, r1	; 0x02
    2912:	19 82       	std	Y+1, r1	; 0x01
    2914:	ce 01       	movw	r24, r28
    2916:	03 96       	adiw	r24, 0x03	; 3
    2918:	0e 94 5a 16 	call	0x2cb4	; 0x2cb4 <scd4x_get_data_ready_status_raw>
    291c:	9a 83       	std	Y+2, r25	; 0x02
    291e:	89 83       	std	Y+1, r24	; 0x01
    2920:	89 81       	ldd	r24, Y+1	; 0x01
    2922:	9a 81       	ldd	r25, Y+2	; 0x02
    2924:	89 2b       	or	r24, r25
    2926:	19 f0       	breq	.+6      	; 0x292e <scd4x_get_data_ready_status+0x34>
    2928:	89 81       	ldd	r24, Y+1	; 0x01
    292a:	9a 81       	ldd	r25, Y+2	; 0x02
    292c:	0d c0       	rjmp	.+26     	; 0x2948 <scd4x_get_data_ready_status+0x4e>
    292e:	8b 81       	ldd	r24, Y+3	; 0x03
    2930:	9c 81       	ldd	r25, Y+4	; 0x04
    2932:	97 70       	andi	r25, 0x07	; 7
    2934:	21 e0       	ldi	r18, 0x01	; 1
    2936:	89 2b       	or	r24, r25
    2938:	09 f4       	brne	.+2      	; 0x293c <scd4x_get_data_ready_status+0x42>
    293a:	20 e0       	ldi	r18, 0x00	; 0
    293c:	8d 81       	ldd	r24, Y+5	; 0x05
    293e:	9e 81       	ldd	r25, Y+6	; 0x06
    2940:	fc 01       	movw	r30, r24
    2942:	20 83       	st	Z, r18
    2944:	89 81       	ldd	r24, Y+1	; 0x01
    2946:	9a 81       	ldd	r25, Y+2	; 0x02
    2948:	26 96       	adiw	r28, 0x06	; 6
    294a:	0f b6       	in	r0, 0x3f	; 63
    294c:	f8 94       	cli
    294e:	de bf       	out	0x3e, r29	; 62
    2950:	0f be       	out	0x3f, r0	; 63
    2952:	cd bf       	out	0x3d, r28	; 61
    2954:	df 91       	pop	r29
    2956:	cf 91       	pop	r28
    2958:	08 95       	ret

0000295a <scd4x_start_periodic_measurement>:
    295a:	cf 93       	push	r28
    295c:	df 93       	push	r29
    295e:	00 d0       	rcall	.+0      	; 0x2960 <scd4x_start_periodic_measurement+0x6>
    2960:	00 d0       	rcall	.+0      	; 0x2962 <scd4x_start_periodic_measurement+0x8>
    2962:	00 d0       	rcall	.+0      	; 0x2964 <scd4x_start_periodic_measurement+0xa>
    2964:	cd b7       	in	r28, 0x3d	; 61
    2966:	de b7       	in	r29, 0x3e	; 62
    2968:	1a 82       	std	Y+2, r1	; 0x02
    296a:	19 82       	std	Y+1, r1	; 0x01
    296c:	80 e3       	ldi	r24, 0x30	; 48
    296e:	95 e0       	ldi	r25, 0x05	; 5
    2970:	9c 83       	std	Y+4, r25	; 0x04
    2972:	8b 83       	std	Y+3, r24	; 0x03
    2974:	1e 82       	std	Y+6, r1	; 0x06
    2976:	1d 82       	std	Y+5, r1	; 0x05
    2978:	2d 81       	ldd	r18, Y+5	; 0x05
    297a:	3e 81       	ldd	r19, Y+6	; 0x06
    297c:	8b 81       	ldd	r24, Y+3	; 0x03
    297e:	9c 81       	ldd	r25, Y+4	; 0x04
    2980:	41 eb       	ldi	r20, 0xB1	; 177
    2982:	51 e2       	ldi	r21, 0x21	; 33
    2984:	b9 01       	movw	r22, r18
    2986:	0e 94 c9 13 	call	0x2792	; 0x2792 <sensirion_i2c_add_command16_to_buffer>
    298a:	9e 83       	std	Y+6, r25	; 0x06
    298c:	8d 83       	std	Y+5, r24	; 0x05
    298e:	e0 91 39 05 	lds	r30, 0x0539	; 0x800539 <_i2c_address>
    2992:	2d 81       	ldd	r18, Y+5	; 0x05
    2994:	3e 81       	ldd	r19, Y+6	; 0x06
    2996:	8b 81       	ldd	r24, Y+3	; 0x03
    2998:	9c 81       	ldd	r25, Y+4	; 0x04
    299a:	a9 01       	movw	r20, r18
    299c:	bc 01       	movw	r22, r24
    299e:	8e 2f       	mov	r24, r30
    29a0:	0e 94 8d 12 	call	0x251a	; 0x251a <sensirion_i2c_write_data>
    29a4:	9a 83       	std	Y+2, r25	; 0x02
    29a6:	89 83       	std	Y+1, r24	; 0x01
    29a8:	89 81       	ldd	r24, Y+1	; 0x01
    29aa:	9a 81       	ldd	r25, Y+2	; 0x02
    29ac:	89 2b       	or	r24, r25
    29ae:	19 f0       	breq	.+6      	; 0x29b6 <scd4x_start_periodic_measurement+0x5c>
    29b0:	89 81       	ldd	r24, Y+1	; 0x01
    29b2:	9a 81       	ldd	r25, Y+2	; 0x02
    29b4:	02 c0       	rjmp	.+4      	; 0x29ba <scd4x_start_periodic_measurement+0x60>
    29b6:	89 81       	ldd	r24, Y+1	; 0x01
    29b8:	9a 81       	ldd	r25, Y+2	; 0x02
    29ba:	26 96       	adiw	r28, 0x06	; 6
    29bc:	0f b6       	in	r0, 0x3f	; 63
    29be:	f8 94       	cli
    29c0:	de bf       	out	0x3e, r29	; 62
    29c2:	0f be       	out	0x3f, r0	; 63
    29c4:	cd bf       	out	0x3d, r28	; 61
    29c6:	df 91       	pop	r29
    29c8:	cf 91       	pop	r28
    29ca:	08 95       	ret

000029cc <scd4x_read_measurement_raw>:
    29cc:	cf 93       	push	r28
    29ce:	df 93       	push	r29
    29d0:	cd b7       	in	r28, 0x3d	; 61
    29d2:	de b7       	in	r29, 0x3e	; 62
    29d4:	2c 97       	sbiw	r28, 0x0c	; 12
    29d6:	0f b6       	in	r0, 0x3f	; 63
    29d8:	f8 94       	cli
    29da:	de bf       	out	0x3e, r29	; 62
    29dc:	0f be       	out	0x3f, r0	; 63
    29de:	cd bf       	out	0x3d, r28	; 61
    29e0:	98 87       	std	Y+8, r25	; 0x08
    29e2:	8f 83       	std	Y+7, r24	; 0x07
    29e4:	7a 87       	std	Y+10, r23	; 0x0a
    29e6:	69 87       	std	Y+9, r22	; 0x09
    29e8:	5c 87       	std	Y+12, r21	; 0x0c
    29ea:	4b 87       	std	Y+11, r20	; 0x0b
    29ec:	1a 82       	std	Y+2, r1	; 0x02
    29ee:	19 82       	std	Y+1, r1	; 0x01
    29f0:	80 e3       	ldi	r24, 0x30	; 48
    29f2:	95 e0       	ldi	r25, 0x05	; 5
    29f4:	9c 83       	std	Y+4, r25	; 0x04
    29f6:	8b 83       	std	Y+3, r24	; 0x03
    29f8:	1e 82       	std	Y+6, r1	; 0x06
    29fa:	1d 82       	std	Y+5, r1	; 0x05
    29fc:	2d 81       	ldd	r18, Y+5	; 0x05
    29fe:	3e 81       	ldd	r19, Y+6	; 0x06
    2a00:	8b 81       	ldd	r24, Y+3	; 0x03
    2a02:	9c 81       	ldd	r25, Y+4	; 0x04
    2a04:	45 e0       	ldi	r20, 0x05	; 5
    2a06:	5c ee       	ldi	r21, 0xEC	; 236
    2a08:	b9 01       	movw	r22, r18
    2a0a:	0e 94 c9 13 	call	0x2792	; 0x2792 <sensirion_i2c_add_command16_to_buffer>
    2a0e:	9e 83       	std	Y+6, r25	; 0x06
    2a10:	8d 83       	std	Y+5, r24	; 0x05
    2a12:	e0 91 39 05 	lds	r30, 0x0539	; 0x800539 <_i2c_address>
    2a16:	2d 81       	ldd	r18, Y+5	; 0x05
    2a18:	3e 81       	ldd	r19, Y+6	; 0x06
    2a1a:	8b 81       	ldd	r24, Y+3	; 0x03
    2a1c:	9c 81       	ldd	r25, Y+4	; 0x04
    2a1e:	a9 01       	movw	r20, r18
    2a20:	bc 01       	movw	r22, r24
    2a22:	8e 2f       	mov	r24, r30
    2a24:	0e 94 8d 12 	call	0x251a	; 0x251a <sensirion_i2c_write_data>
    2a28:	9a 83       	std	Y+2, r25	; 0x02
    2a2a:	89 83       	std	Y+1, r24	; 0x01
    2a2c:	89 81       	ldd	r24, Y+1	; 0x01
    2a2e:	9a 81       	ldd	r25, Y+2	; 0x02
    2a30:	89 2b       	or	r24, r25
    2a32:	19 f0       	breq	.+6      	; 0x2a3a <scd4x_read_measurement_raw+0x6e>
    2a34:	89 81       	ldd	r24, Y+1	; 0x01
    2a36:	9a 81       	ldd	r25, Y+2	; 0x02
    2a38:	3b c0       	rjmp	.+118    	; 0x2ab0 <scd4x_read_measurement_raw+0xe4>
    2a3a:	68 ee       	ldi	r22, 0xE8	; 232
    2a3c:	73 e0       	ldi	r23, 0x03	; 3
    2a3e:	80 e0       	ldi	r24, 0x00	; 0
    2a40:	90 e0       	ldi	r25, 0x00	; 0
    2a42:	0e 94 d8 0e 	call	0x1db0	; 0x1db0 <sensirion_sleep_usec>
    2a46:	20 91 39 05 	lds	r18, 0x0539	; 0x800539 <_i2c_address>
    2a4a:	8b 81       	ldd	r24, Y+3	; 0x03
    2a4c:	9c 81       	ldd	r25, Y+4	; 0x04
    2a4e:	46 e0       	ldi	r20, 0x06	; 6
    2a50:	50 e0       	ldi	r21, 0x00	; 0
    2a52:	bc 01       	movw	r22, r24
    2a54:	82 2f       	mov	r24, r18
    2a56:	0e 94 d5 12 	call	0x25aa	; 0x25aa <sensirion_i2c_read_data_inplace>
    2a5a:	9a 83       	std	Y+2, r25	; 0x02
    2a5c:	89 83       	std	Y+1, r24	; 0x01
    2a5e:	89 81       	ldd	r24, Y+1	; 0x01
    2a60:	9a 81       	ldd	r25, Y+2	; 0x02
    2a62:	89 2b       	or	r24, r25
    2a64:	19 f0       	breq	.+6      	; 0x2a6c <scd4x_read_measurement_raw+0xa0>
    2a66:	89 81       	ldd	r24, Y+1	; 0x01
    2a68:	9a 81       	ldd	r25, Y+2	; 0x02
    2a6a:	22 c0       	rjmp	.+68     	; 0x2ab0 <scd4x_read_measurement_raw+0xe4>
    2a6c:	8b 81       	ldd	r24, Y+3	; 0x03
    2a6e:	9c 81       	ldd	r25, Y+4	; 0x04
    2a70:	0e 94 3d 09 	call	0x127a	; 0x127a <sensirion_bytes_to_uint16_t>
    2a74:	9c 01       	movw	r18, r24
    2a76:	8f 81       	ldd	r24, Y+7	; 0x07
    2a78:	98 85       	ldd	r25, Y+8	; 0x08
    2a7a:	fc 01       	movw	r30, r24
    2a7c:	31 83       	std	Z+1, r19	; 0x01
    2a7e:	20 83       	st	Z, r18
    2a80:	8b 81       	ldd	r24, Y+3	; 0x03
    2a82:	9c 81       	ldd	r25, Y+4	; 0x04
    2a84:	02 96       	adiw	r24, 0x02	; 2
    2a86:	0e 94 3d 09 	call	0x127a	; 0x127a <sensirion_bytes_to_uint16_t>
    2a8a:	9c 01       	movw	r18, r24
    2a8c:	89 85       	ldd	r24, Y+9	; 0x09
    2a8e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a90:	fc 01       	movw	r30, r24
    2a92:	31 83       	std	Z+1, r19	; 0x01
    2a94:	20 83       	st	Z, r18
    2a96:	8b 81       	ldd	r24, Y+3	; 0x03
    2a98:	9c 81       	ldd	r25, Y+4	; 0x04
    2a9a:	04 96       	adiw	r24, 0x04	; 4
    2a9c:	0e 94 3d 09 	call	0x127a	; 0x127a <sensirion_bytes_to_uint16_t>
    2aa0:	9c 01       	movw	r18, r24
    2aa2:	8b 85       	ldd	r24, Y+11	; 0x0b
    2aa4:	9c 85       	ldd	r25, Y+12	; 0x0c
    2aa6:	fc 01       	movw	r30, r24
    2aa8:	31 83       	std	Z+1, r19	; 0x01
    2aaa:	20 83       	st	Z, r18
    2aac:	89 81       	ldd	r24, Y+1	; 0x01
    2aae:	9a 81       	ldd	r25, Y+2	; 0x02
    2ab0:	2c 96       	adiw	r28, 0x0c	; 12
    2ab2:	0f b6       	in	r0, 0x3f	; 63
    2ab4:	f8 94       	cli
    2ab6:	de bf       	out	0x3e, r29	; 62
    2ab8:	0f be       	out	0x3f, r0	; 63
    2aba:	cd bf       	out	0x3d, r28	; 61
    2abc:	df 91       	pop	r29
    2abe:	cf 91       	pop	r28
    2ac0:	08 95       	ret

00002ac2 <scd4x_read_measurement>:
    2ac2:	cf 93       	push	r28
    2ac4:	df 93       	push	r29
    2ac6:	cd b7       	in	r28, 0x3d	; 61
    2ac8:	de b7       	in	r29, 0x3e	; 62
    2aca:	2c 97       	sbiw	r28, 0x0c	; 12
    2acc:	0f b6       	in	r0, 0x3f	; 63
    2ace:	f8 94       	cli
    2ad0:	de bf       	out	0x3e, r29	; 62
    2ad2:	0f be       	out	0x3f, r0	; 63
    2ad4:	cd bf       	out	0x3d, r28	; 61
    2ad6:	98 87       	std	Y+8, r25	; 0x08
    2ad8:	8f 83       	std	Y+7, r24	; 0x07
    2ada:	7a 87       	std	Y+10, r23	; 0x0a
    2adc:	69 87       	std	Y+9, r22	; 0x09
    2ade:	5c 87       	std	Y+12, r21	; 0x0c
    2ae0:	4b 87       	std	Y+11, r20	; 0x0b
    2ae2:	ae 01       	movw	r20, r28
    2ae4:	4b 5f       	subi	r20, 0xFB	; 251
    2ae6:	5f 4f       	sbci	r21, 0xFF	; 255
    2ae8:	9e 01       	movw	r18, r28
    2aea:	2d 5f       	subi	r18, 0xFD	; 253
    2aec:	3f 4f       	sbci	r19, 0xFF	; 255
    2aee:	8f 81       	ldd	r24, Y+7	; 0x07
    2af0:	98 85       	ldd	r25, Y+8	; 0x08
    2af2:	b9 01       	movw	r22, r18
    2af4:	0e 94 e6 14 	call	0x29cc	; 0x29cc <scd4x_read_measurement_raw>
    2af8:	9a 83       	std	Y+2, r25	; 0x02
    2afa:	89 83       	std	Y+1, r24	; 0x01
    2afc:	89 81       	ldd	r24, Y+1	; 0x01
    2afe:	9a 81       	ldd	r25, Y+2	; 0x02
    2b00:	89 2b       	or	r24, r25
    2b02:	19 f0       	breq	.+6      	; 0x2b0a <scd4x_read_measurement+0x48>
    2b04:	89 81       	ldd	r24, Y+1	; 0x01
    2b06:	9a 81       	ldd	r25, Y+2	; 0x02
    2b08:	3e c0       	rjmp	.+124    	; 0x2b86 <scd4x_read_measurement+0xc4>
    2b0a:	8b 81       	ldd	r24, Y+3	; 0x03
    2b0c:	9c 81       	ldd	r25, Y+4	; 0x04
    2b0e:	9c 01       	movw	r18, r24
    2b10:	40 e0       	ldi	r20, 0x00	; 0
    2b12:	50 e0       	ldi	r21, 0x00	; 0
    2b14:	83 e7       	ldi	r24, 0x73	; 115
    2b16:	95 e5       	ldi	r25, 0x55	; 85
    2b18:	dc 01       	movw	r26, r24
    2b1a:	0e 94 eb 1c 	call	0x39d6	; 0x39d6 <__muluhisi3>
    2b1e:	dc 01       	movw	r26, r24
    2b20:	cb 01       	movw	r24, r22
    2b22:	07 2e       	mov	r0, r23
    2b24:	7d e0       	ldi	r23, 0x0D	; 13
    2b26:	b5 95       	asr	r27
    2b28:	a7 95       	ror	r26
    2b2a:	97 95       	ror	r25
    2b2c:	87 95       	ror	r24
    2b2e:	7a 95       	dec	r23
    2b30:	d1 f7       	brne	.-12     	; 0x2b26 <scd4x_read_measurement+0x64>
    2b32:	70 2d       	mov	r23, r0
    2b34:	88 5c       	subi	r24, 0xC8	; 200
    2b36:	9f 4a       	sbci	r25, 0xAF	; 175
    2b38:	a1 09       	sbc	r26, r1
    2b3a:	b1 09       	sbc	r27, r1
    2b3c:	29 85       	ldd	r18, Y+9	; 0x09
    2b3e:	3a 85       	ldd	r19, Y+10	; 0x0a
    2b40:	f9 01       	movw	r30, r18
    2b42:	80 83       	st	Z, r24
    2b44:	91 83       	std	Z+1, r25	; 0x01
    2b46:	a2 83       	std	Z+2, r26	; 0x02
    2b48:	b3 83       	std	Z+3, r27	; 0x03
    2b4a:	8d 81       	ldd	r24, Y+5	; 0x05
    2b4c:	9e 81       	ldd	r25, Y+6	; 0x06
    2b4e:	9c 01       	movw	r18, r24
    2b50:	40 e0       	ldi	r20, 0x00	; 0
    2b52:	50 e0       	ldi	r21, 0x00	; 0
    2b54:	84 ed       	ldi	r24, 0xD4	; 212
    2b56:	90 e3       	ldi	r25, 0x30	; 48
    2b58:	dc 01       	movw	r26, r24
    2b5a:	0e 94 eb 1c 	call	0x39d6	; 0x39d6 <__muluhisi3>
    2b5e:	dc 01       	movw	r26, r24
    2b60:	cb 01       	movw	r24, r22
    2b62:	07 2e       	mov	r0, r23
    2b64:	7d e0       	ldi	r23, 0x0D	; 13
    2b66:	b5 95       	asr	r27
    2b68:	a7 95       	ror	r26
    2b6a:	97 95       	ror	r25
    2b6c:	87 95       	ror	r24
    2b6e:	7a 95       	dec	r23
    2b70:	d1 f7       	brne	.-12     	; 0x2b66 <scd4x_read_measurement+0xa4>
    2b72:	70 2d       	mov	r23, r0
    2b74:	2b 85       	ldd	r18, Y+11	; 0x0b
    2b76:	3c 85       	ldd	r19, Y+12	; 0x0c
    2b78:	f9 01       	movw	r30, r18
    2b7a:	80 83       	st	Z, r24
    2b7c:	91 83       	std	Z+1, r25	; 0x01
    2b7e:	a2 83       	std	Z+2, r26	; 0x02
    2b80:	b3 83       	std	Z+3, r27	; 0x03
    2b82:	80 e0       	ldi	r24, 0x00	; 0
    2b84:	90 e0       	ldi	r25, 0x00	; 0
    2b86:	2c 96       	adiw	r28, 0x0c	; 12
    2b88:	0f b6       	in	r0, 0x3f	; 63
    2b8a:	f8 94       	cli
    2b8c:	de bf       	out	0x3e, r29	; 62
    2b8e:	0f be       	out	0x3f, r0	; 63
    2b90:	cd bf       	out	0x3d, r28	; 61
    2b92:	df 91       	pop	r29
    2b94:	cf 91       	pop	r28
    2b96:	08 95       	ret

00002b98 <scd4x_stop_periodic_measurement>:
    2b98:	cf 93       	push	r28
    2b9a:	df 93       	push	r29
    2b9c:	00 d0       	rcall	.+0      	; 0x2b9e <scd4x_stop_periodic_measurement+0x6>
    2b9e:	00 d0       	rcall	.+0      	; 0x2ba0 <scd4x_stop_periodic_measurement+0x8>
    2ba0:	00 d0       	rcall	.+0      	; 0x2ba2 <scd4x_stop_periodic_measurement+0xa>
    2ba2:	cd b7       	in	r28, 0x3d	; 61
    2ba4:	de b7       	in	r29, 0x3e	; 62
    2ba6:	1a 82       	std	Y+2, r1	; 0x02
    2ba8:	19 82       	std	Y+1, r1	; 0x01
    2baa:	80 e3       	ldi	r24, 0x30	; 48
    2bac:	95 e0       	ldi	r25, 0x05	; 5
    2bae:	9c 83       	std	Y+4, r25	; 0x04
    2bb0:	8b 83       	std	Y+3, r24	; 0x03
    2bb2:	1e 82       	std	Y+6, r1	; 0x06
    2bb4:	1d 82       	std	Y+5, r1	; 0x05
    2bb6:	2d 81       	ldd	r18, Y+5	; 0x05
    2bb8:	3e 81       	ldd	r19, Y+6	; 0x06
    2bba:	8b 81       	ldd	r24, Y+3	; 0x03
    2bbc:	9c 81       	ldd	r25, Y+4	; 0x04
    2bbe:	46 e8       	ldi	r20, 0x86	; 134
    2bc0:	5f e3       	ldi	r21, 0x3F	; 63
    2bc2:	b9 01       	movw	r22, r18
    2bc4:	0e 94 c9 13 	call	0x2792	; 0x2792 <sensirion_i2c_add_command16_to_buffer>
    2bc8:	9e 83       	std	Y+6, r25	; 0x06
    2bca:	8d 83       	std	Y+5, r24	; 0x05
    2bcc:	e0 91 39 05 	lds	r30, 0x0539	; 0x800539 <_i2c_address>
    2bd0:	2d 81       	ldd	r18, Y+5	; 0x05
    2bd2:	3e 81       	ldd	r19, Y+6	; 0x06
    2bd4:	8b 81       	ldd	r24, Y+3	; 0x03
    2bd6:	9c 81       	ldd	r25, Y+4	; 0x04
    2bd8:	a9 01       	movw	r20, r18
    2bda:	bc 01       	movw	r22, r24
    2bdc:	8e 2f       	mov	r24, r30
    2bde:	0e 94 8d 12 	call	0x251a	; 0x251a <sensirion_i2c_write_data>
    2be2:	9a 83       	std	Y+2, r25	; 0x02
    2be4:	89 83       	std	Y+1, r24	; 0x01
    2be6:	89 81       	ldd	r24, Y+1	; 0x01
    2be8:	9a 81       	ldd	r25, Y+2	; 0x02
    2bea:	89 2b       	or	r24, r25
    2bec:	19 f0       	breq	.+6      	; 0x2bf4 <scd4x_stop_periodic_measurement+0x5c>
    2bee:	89 81       	ldd	r24, Y+1	; 0x01
    2bf0:	9a 81       	ldd	r25, Y+2	; 0x02
    2bf2:	08 c0       	rjmp	.+16     	; 0x2c04 <scd4x_stop_periodic_measurement+0x6c>
    2bf4:	60 e2       	ldi	r22, 0x20	; 32
    2bf6:	71 ea       	ldi	r23, 0xA1	; 161
    2bf8:	8f ef       	ldi	r24, 0xFF	; 255
    2bfa:	9f ef       	ldi	r25, 0xFF	; 255
    2bfc:	0e 94 d8 0e 	call	0x1db0	; 0x1db0 <sensirion_sleep_usec>
    2c00:	89 81       	ldd	r24, Y+1	; 0x01
    2c02:	9a 81       	ldd	r25, Y+2	; 0x02
    2c04:	26 96       	adiw	r28, 0x06	; 6
    2c06:	0f b6       	in	r0, 0x3f	; 63
    2c08:	f8 94       	cli
    2c0a:	de bf       	out	0x3e, r29	; 62
    2c0c:	0f be       	out	0x3f, r0	; 63
    2c0e:	cd bf       	out	0x3d, r28	; 61
    2c10:	df 91       	pop	r29
    2c12:	cf 91       	pop	r28
    2c14:	08 95       	ret

00002c16 <scd4x_set_sensor_altitude>:
    2c16:	cf 93       	push	r28
    2c18:	df 93       	push	r29
    2c1a:	cd b7       	in	r28, 0x3d	; 61
    2c1c:	de b7       	in	r29, 0x3e	; 62
    2c1e:	28 97       	sbiw	r28, 0x08	; 8
    2c20:	0f b6       	in	r0, 0x3f	; 63
    2c22:	f8 94       	cli
    2c24:	de bf       	out	0x3e, r29	; 62
    2c26:	0f be       	out	0x3f, r0	; 63
    2c28:	cd bf       	out	0x3d, r28	; 61
    2c2a:	98 87       	std	Y+8, r25	; 0x08
    2c2c:	8f 83       	std	Y+7, r24	; 0x07
    2c2e:	1a 82       	std	Y+2, r1	; 0x02
    2c30:	19 82       	std	Y+1, r1	; 0x01
    2c32:	80 e3       	ldi	r24, 0x30	; 48
    2c34:	95 e0       	ldi	r25, 0x05	; 5
    2c36:	9c 83       	std	Y+4, r25	; 0x04
    2c38:	8b 83       	std	Y+3, r24	; 0x03
    2c3a:	1e 82       	std	Y+6, r1	; 0x06
    2c3c:	1d 82       	std	Y+5, r1	; 0x05
    2c3e:	2d 81       	ldd	r18, Y+5	; 0x05
    2c40:	3e 81       	ldd	r19, Y+6	; 0x06
    2c42:	8b 81       	ldd	r24, Y+3	; 0x03
    2c44:	9c 81       	ldd	r25, Y+4	; 0x04
    2c46:	47 e2       	ldi	r20, 0x27	; 39
    2c48:	54 e2       	ldi	r21, 0x24	; 36
    2c4a:	b9 01       	movw	r22, r18
    2c4c:	0e 94 c9 13 	call	0x2792	; 0x2792 <sensirion_i2c_add_command16_to_buffer>
    2c50:	9e 83       	std	Y+6, r25	; 0x06
    2c52:	8d 83       	std	Y+5, r24	; 0x05
    2c54:	4f 81       	ldd	r20, Y+7	; 0x07
    2c56:	58 85       	ldd	r21, Y+8	; 0x08
    2c58:	2d 81       	ldd	r18, Y+5	; 0x05
    2c5a:	3e 81       	ldd	r19, Y+6	; 0x06
    2c5c:	8b 81       	ldd	r24, Y+3	; 0x03
    2c5e:	9c 81       	ldd	r25, Y+4	; 0x04
    2c60:	b9 01       	movw	r22, r18
    2c62:	0e 94 75 13 	call	0x26ea	; 0x26ea <sensirion_i2c_add_uint16_t_to_buffer>
    2c66:	9e 83       	std	Y+6, r25	; 0x06
    2c68:	8d 83       	std	Y+5, r24	; 0x05
    2c6a:	e0 91 39 05 	lds	r30, 0x0539	; 0x800539 <_i2c_address>
    2c6e:	2d 81       	ldd	r18, Y+5	; 0x05
    2c70:	3e 81       	ldd	r19, Y+6	; 0x06
    2c72:	8b 81       	ldd	r24, Y+3	; 0x03
    2c74:	9c 81       	ldd	r25, Y+4	; 0x04
    2c76:	a9 01       	movw	r20, r18
    2c78:	bc 01       	movw	r22, r24
    2c7a:	8e 2f       	mov	r24, r30
    2c7c:	0e 94 8d 12 	call	0x251a	; 0x251a <sensirion_i2c_write_data>
    2c80:	9a 83       	std	Y+2, r25	; 0x02
    2c82:	89 83       	std	Y+1, r24	; 0x01
    2c84:	89 81       	ldd	r24, Y+1	; 0x01
    2c86:	9a 81       	ldd	r25, Y+2	; 0x02
    2c88:	89 2b       	or	r24, r25
    2c8a:	19 f0       	breq	.+6      	; 0x2c92 <scd4x_set_sensor_altitude+0x7c>
    2c8c:	89 81       	ldd	r24, Y+1	; 0x01
    2c8e:	9a 81       	ldd	r25, Y+2	; 0x02
    2c90:	08 c0       	rjmp	.+16     	; 0x2ca2 <scd4x_set_sensor_altitude+0x8c>
    2c92:	68 ee       	ldi	r22, 0xE8	; 232
    2c94:	73 e0       	ldi	r23, 0x03	; 3
    2c96:	80 e0       	ldi	r24, 0x00	; 0
    2c98:	90 e0       	ldi	r25, 0x00	; 0
    2c9a:	0e 94 d8 0e 	call	0x1db0	; 0x1db0 <sensirion_sleep_usec>
    2c9e:	89 81       	ldd	r24, Y+1	; 0x01
    2ca0:	9a 81       	ldd	r25, Y+2	; 0x02
    2ca2:	28 96       	adiw	r28, 0x08	; 8
    2ca4:	0f b6       	in	r0, 0x3f	; 63
    2ca6:	f8 94       	cli
    2ca8:	de bf       	out	0x3e, r29	; 62
    2caa:	0f be       	out	0x3f, r0	; 63
    2cac:	cd bf       	out	0x3d, r28	; 61
    2cae:	df 91       	pop	r29
    2cb0:	cf 91       	pop	r28
    2cb2:	08 95       	ret

00002cb4 <scd4x_get_data_ready_status_raw>:
    2cb4:	cf 93       	push	r28
    2cb6:	df 93       	push	r29
    2cb8:	cd b7       	in	r28, 0x3d	; 61
    2cba:	de b7       	in	r29, 0x3e	; 62
    2cbc:	28 97       	sbiw	r28, 0x08	; 8
    2cbe:	0f b6       	in	r0, 0x3f	; 63
    2cc0:	f8 94       	cli
    2cc2:	de bf       	out	0x3e, r29	; 62
    2cc4:	0f be       	out	0x3f, r0	; 63
    2cc6:	cd bf       	out	0x3d, r28	; 61
    2cc8:	98 87       	std	Y+8, r25	; 0x08
    2cca:	8f 83       	std	Y+7, r24	; 0x07
    2ccc:	1a 82       	std	Y+2, r1	; 0x02
    2cce:	19 82       	std	Y+1, r1	; 0x01
    2cd0:	80 e3       	ldi	r24, 0x30	; 48
    2cd2:	95 e0       	ldi	r25, 0x05	; 5
    2cd4:	9c 83       	std	Y+4, r25	; 0x04
    2cd6:	8b 83       	std	Y+3, r24	; 0x03
    2cd8:	1e 82       	std	Y+6, r1	; 0x06
    2cda:	1d 82       	std	Y+5, r1	; 0x05
    2cdc:	2d 81       	ldd	r18, Y+5	; 0x05
    2cde:	3e 81       	ldd	r19, Y+6	; 0x06
    2ce0:	8b 81       	ldd	r24, Y+3	; 0x03
    2ce2:	9c 81       	ldd	r25, Y+4	; 0x04
    2ce4:	48 eb       	ldi	r20, 0xB8	; 184
    2ce6:	54 ee       	ldi	r21, 0xE4	; 228
    2ce8:	b9 01       	movw	r22, r18
    2cea:	0e 94 c9 13 	call	0x2792	; 0x2792 <sensirion_i2c_add_command16_to_buffer>
    2cee:	9e 83       	std	Y+6, r25	; 0x06
    2cf0:	8d 83       	std	Y+5, r24	; 0x05
    2cf2:	e0 91 39 05 	lds	r30, 0x0539	; 0x800539 <_i2c_address>
    2cf6:	2d 81       	ldd	r18, Y+5	; 0x05
    2cf8:	3e 81       	ldd	r19, Y+6	; 0x06
    2cfa:	8b 81       	ldd	r24, Y+3	; 0x03
    2cfc:	9c 81       	ldd	r25, Y+4	; 0x04
    2cfe:	a9 01       	movw	r20, r18
    2d00:	bc 01       	movw	r22, r24
    2d02:	8e 2f       	mov	r24, r30
    2d04:	0e 94 8d 12 	call	0x251a	; 0x251a <sensirion_i2c_write_data>
    2d08:	9a 83       	std	Y+2, r25	; 0x02
    2d0a:	89 83       	std	Y+1, r24	; 0x01
    2d0c:	89 81       	ldd	r24, Y+1	; 0x01
    2d0e:	9a 81       	ldd	r25, Y+2	; 0x02
    2d10:	89 2b       	or	r24, r25
    2d12:	19 f0       	breq	.+6      	; 0x2d1a <scd4x_get_data_ready_status_raw+0x66>
    2d14:	89 81       	ldd	r24, Y+1	; 0x01
    2d16:	9a 81       	ldd	r25, Y+2	; 0x02
    2d18:	25 c0       	rjmp	.+74     	; 0x2d64 <scd4x_get_data_ready_status_raw+0xb0>
    2d1a:	68 ee       	ldi	r22, 0xE8	; 232
    2d1c:	73 e0       	ldi	r23, 0x03	; 3
    2d1e:	80 e0       	ldi	r24, 0x00	; 0
    2d20:	90 e0       	ldi	r25, 0x00	; 0
    2d22:	0e 94 d8 0e 	call	0x1db0	; 0x1db0 <sensirion_sleep_usec>
    2d26:	20 91 39 05 	lds	r18, 0x0539	; 0x800539 <_i2c_address>
    2d2a:	8b 81       	ldd	r24, Y+3	; 0x03
    2d2c:	9c 81       	ldd	r25, Y+4	; 0x04
    2d2e:	42 e0       	ldi	r20, 0x02	; 2
    2d30:	50 e0       	ldi	r21, 0x00	; 0
    2d32:	bc 01       	movw	r22, r24
    2d34:	82 2f       	mov	r24, r18
    2d36:	0e 94 d5 12 	call	0x25aa	; 0x25aa <sensirion_i2c_read_data_inplace>
    2d3a:	9a 83       	std	Y+2, r25	; 0x02
    2d3c:	89 83       	std	Y+1, r24	; 0x01
    2d3e:	89 81       	ldd	r24, Y+1	; 0x01
    2d40:	9a 81       	ldd	r25, Y+2	; 0x02
    2d42:	89 2b       	or	r24, r25
    2d44:	19 f0       	breq	.+6      	; 0x2d4c <scd4x_get_data_ready_status_raw+0x98>
    2d46:	89 81       	ldd	r24, Y+1	; 0x01
    2d48:	9a 81       	ldd	r25, Y+2	; 0x02
    2d4a:	0c c0       	rjmp	.+24     	; 0x2d64 <scd4x_get_data_ready_status_raw+0xb0>
    2d4c:	8b 81       	ldd	r24, Y+3	; 0x03
    2d4e:	9c 81       	ldd	r25, Y+4	; 0x04
    2d50:	0e 94 3d 09 	call	0x127a	; 0x127a <sensirion_bytes_to_uint16_t>
    2d54:	9c 01       	movw	r18, r24
    2d56:	8f 81       	ldd	r24, Y+7	; 0x07
    2d58:	98 85       	ldd	r25, Y+8	; 0x08
    2d5a:	fc 01       	movw	r30, r24
    2d5c:	31 83       	std	Z+1, r19	; 0x01
    2d5e:	20 83       	st	Z, r18
    2d60:	89 81       	ldd	r24, Y+1	; 0x01
    2d62:	9a 81       	ldd	r25, Y+2	; 0x02
    2d64:	28 96       	adiw	r28, 0x08	; 8
    2d66:	0f b6       	in	r0, 0x3f	; 63
    2d68:	f8 94       	cli
    2d6a:	de bf       	out	0x3e, r29	; 62
    2d6c:	0f be       	out	0x3f, r0	; 63
    2d6e:	cd bf       	out	0x3d, r28	; 61
    2d70:	df 91       	pop	r29
    2d72:	cf 91       	pop	r28
    2d74:	08 95       	ret

00002d76 <scd4x_reinit>:
    2d76:	cf 93       	push	r28
    2d78:	df 93       	push	r29
    2d7a:	00 d0       	rcall	.+0      	; 0x2d7c <scd4x_reinit+0x6>
    2d7c:	00 d0       	rcall	.+0      	; 0x2d7e <scd4x_reinit+0x8>
    2d7e:	00 d0       	rcall	.+0      	; 0x2d80 <scd4x_reinit+0xa>
    2d80:	cd b7       	in	r28, 0x3d	; 61
    2d82:	de b7       	in	r29, 0x3e	; 62
    2d84:	1a 82       	std	Y+2, r1	; 0x02
    2d86:	19 82       	std	Y+1, r1	; 0x01
    2d88:	80 e3       	ldi	r24, 0x30	; 48
    2d8a:	95 e0       	ldi	r25, 0x05	; 5
    2d8c:	9c 83       	std	Y+4, r25	; 0x04
    2d8e:	8b 83       	std	Y+3, r24	; 0x03
    2d90:	1e 82       	std	Y+6, r1	; 0x06
    2d92:	1d 82       	std	Y+5, r1	; 0x05
    2d94:	2d 81       	ldd	r18, Y+5	; 0x05
    2d96:	3e 81       	ldd	r19, Y+6	; 0x06
    2d98:	8b 81       	ldd	r24, Y+3	; 0x03
    2d9a:	9c 81       	ldd	r25, Y+4	; 0x04
    2d9c:	46 e4       	ldi	r20, 0x46	; 70
    2d9e:	56 e3       	ldi	r21, 0x36	; 54
    2da0:	b9 01       	movw	r22, r18
    2da2:	0e 94 c9 13 	call	0x2792	; 0x2792 <sensirion_i2c_add_command16_to_buffer>
    2da6:	9e 83       	std	Y+6, r25	; 0x06
    2da8:	8d 83       	std	Y+5, r24	; 0x05
    2daa:	e0 91 39 05 	lds	r30, 0x0539	; 0x800539 <_i2c_address>
    2dae:	2d 81       	ldd	r18, Y+5	; 0x05
    2db0:	3e 81       	ldd	r19, Y+6	; 0x06
    2db2:	8b 81       	ldd	r24, Y+3	; 0x03
    2db4:	9c 81       	ldd	r25, Y+4	; 0x04
    2db6:	a9 01       	movw	r20, r18
    2db8:	bc 01       	movw	r22, r24
    2dba:	8e 2f       	mov	r24, r30
    2dbc:	0e 94 8d 12 	call	0x251a	; 0x251a <sensirion_i2c_write_data>
    2dc0:	9a 83       	std	Y+2, r25	; 0x02
    2dc2:	89 83       	std	Y+1, r24	; 0x01
    2dc4:	89 81       	ldd	r24, Y+1	; 0x01
    2dc6:	9a 81       	ldd	r25, Y+2	; 0x02
    2dc8:	89 2b       	or	r24, r25
    2dca:	19 f0       	breq	.+6      	; 0x2dd2 <scd4x_reinit+0x5c>
    2dcc:	89 81       	ldd	r24, Y+1	; 0x01
    2dce:	9a 81       	ldd	r25, Y+2	; 0x02
    2dd0:	08 c0       	rjmp	.+16     	; 0x2de2 <scd4x_reinit+0x6c>
    2dd2:	60 e3       	ldi	r22, 0x30	; 48
    2dd4:	75 e7       	ldi	r23, 0x75	; 117
    2dd6:	80 e0       	ldi	r24, 0x00	; 0
    2dd8:	90 e0       	ldi	r25, 0x00	; 0
    2dda:	0e 94 d8 0e 	call	0x1db0	; 0x1db0 <sensirion_sleep_usec>
    2dde:	89 81       	ldd	r24, Y+1	; 0x01
    2de0:	9a 81       	ldd	r25, Y+2	; 0x02
    2de2:	26 96       	adiw	r28, 0x06	; 6
    2de4:	0f b6       	in	r0, 0x3f	; 63
    2de6:	f8 94       	cli
    2de8:	de bf       	out	0x3e, r29	; 62
    2dea:	0f be       	out	0x3f, r0	; 63
    2dec:	cd bf       	out	0x3d, r28	; 61
    2dee:	df 91       	pop	r29
    2df0:	cf 91       	pop	r28
    2df2:	08 95       	ret

00002df4 <scd4x_wake_up>:

int16_t scd4x_wake_up() {
    2df4:	cf 93       	push	r28
    2df6:	df 93       	push	r29
    2df8:	00 d0       	rcall	.+0      	; 0x2dfa <scd4x_wake_up+0x6>
    2dfa:	00 d0       	rcall	.+0      	; 0x2dfc <scd4x_wake_up+0x8>
    2dfc:	00 d0       	rcall	.+0      	; 0x2dfe <scd4x_wake_up+0xa>
    2dfe:	cd b7       	in	r28, 0x3d	; 61
    2e00:	de b7       	in	r29, 0x3e	; 62
    int16_t local_error = NO_ERROR;
    2e02:	1a 82       	std	Y+2, r1	; 0x02
    2e04:	19 82       	std	Y+1, r1	; 0x01
    uint8_t* buffer_ptr = communication_buffer;
    2e06:	80 e3       	ldi	r24, 0x30	; 48
    2e08:	95 e0       	ldi	r25, 0x05	; 5
    2e0a:	9c 83       	std	Y+4, r25	; 0x04
    2e0c:	8b 83       	std	Y+3, r24	; 0x03
    uint16_t local_offset = 0;
    2e0e:	1e 82       	std	Y+6, r1	; 0x06
    2e10:	1d 82       	std	Y+5, r1	; 0x05
    local_offset =
        sensirion_i2c_add_command16_to_buffer(buffer_ptr, local_offset, 0x36f6);
    2e12:	2d 81       	ldd	r18, Y+5	; 0x05
    2e14:	3e 81       	ldd	r19, Y+6	; 0x06
    2e16:	8b 81       	ldd	r24, Y+3	; 0x03
    2e18:	9c 81       	ldd	r25, Y+4	; 0x04
    2e1a:	46 ef       	ldi	r20, 0xF6	; 246
    2e1c:	56 e3       	ldi	r21, 0x36	; 54
    2e1e:	b9 01       	movw	r22, r18
    2e20:	0e 94 c9 13 	call	0x2792	; 0x2792 <sensirion_i2c_add_command16_to_buffer>

int16_t scd4x_wake_up() {
    int16_t local_error = NO_ERROR;
    uint8_t* buffer_ptr = communication_buffer;
    uint16_t local_offset = 0;
    local_offset =
    2e24:	9e 83       	std	Y+6, r25	; 0x06
    2e26:	8d 83       	std	Y+5, r24	; 0x05
        sensirion_i2c_add_command16_to_buffer(buffer_ptr, local_offset, 0x36f6);
    sensirion_i2c_write_data(_i2c_address, buffer_ptr, local_offset);
    2e28:	e0 91 39 05 	lds	r30, 0x0539	; 0x800539 <_i2c_address>
    2e2c:	2d 81       	ldd	r18, Y+5	; 0x05
    2e2e:	3e 81       	ldd	r19, Y+6	; 0x06
    2e30:	8b 81       	ldd	r24, Y+3	; 0x03
    2e32:	9c 81       	ldd	r25, Y+4	; 0x04
    2e34:	a9 01       	movw	r20, r18
    2e36:	bc 01       	movw	r22, r24
    2e38:	8e 2f       	mov	r24, r30
    2e3a:	0e 94 8d 12 	call	0x251a	; 0x251a <sensirion_i2c_write_data>
    sensirion_sleep_usec(30 * 1000);
    2e3e:	60 e3       	ldi	r22, 0x30	; 48
    2e40:	75 e7       	ldi	r23, 0x75	; 117
    2e42:	80 e0       	ldi	r24, 0x00	; 0
    2e44:	90 e0       	ldi	r25, 0x00	; 0
    2e46:	0e 94 d8 0e 	call	0x1db0	; 0x1db0 <sensirion_sleep_usec>
    return local_error;
    2e4a:	89 81       	ldd	r24, Y+1	; 0x01
    2e4c:	9a 81       	ldd	r25, Y+2	; 0x02
}
    2e4e:	26 96       	adiw	r28, 0x06	; 6
    2e50:	0f b6       	in	r0, 0x3f	; 63
    2e52:	f8 94       	cli
    2e54:	de bf       	out	0x3e, r29	; 62
    2e56:	0f be       	out	0x3f, r0	; 63
    2e58:	cd bf       	out	0x3d, r28	; 61
    2e5a:	df 91       	pop	r29
    2e5c:	cf 91       	pop	r28
    2e5e:	08 95       	ret

00002e60 <__subsf3>:
    2e60:	50 58       	subi	r21, 0x80	; 128

00002e62 <__addsf3>:
    2e62:	bb 27       	eor	r27, r27
    2e64:	aa 27       	eor	r26, r26
    2e66:	0e 94 48 17 	call	0x2e90	; 0x2e90 <__addsf3x>
    2e6a:	0c 94 c2 18 	jmp	0x3184	; 0x3184 <__fp_round>
    2e6e:	0e 94 b4 18 	call	0x3168	; 0x3168 <__fp_pscA>
    2e72:	38 f0       	brcs	.+14     	; 0x2e82 <__addsf3+0x20>
    2e74:	0e 94 bb 18 	call	0x3176	; 0x3176 <__fp_pscB>
    2e78:	20 f0       	brcs	.+8      	; 0x2e82 <__addsf3+0x20>
    2e7a:	39 f4       	brne	.+14     	; 0x2e8a <__addsf3+0x28>
    2e7c:	9f 3f       	cpi	r25, 0xFF	; 255
    2e7e:	19 f4       	brne	.+6      	; 0x2e86 <__addsf3+0x24>
    2e80:	26 f4       	brtc	.+8      	; 0x2e8a <__addsf3+0x28>
    2e82:	0c 94 b1 18 	jmp	0x3162	; 0x3162 <__fp_nan>
    2e86:	0e f4       	brtc	.+2      	; 0x2e8a <__addsf3+0x28>
    2e88:	e0 95       	com	r30
    2e8a:	e7 fb       	bst	r30, 7
    2e8c:	0c 94 ab 18 	jmp	0x3156	; 0x3156 <__fp_inf>

00002e90 <__addsf3x>:
    2e90:	e9 2f       	mov	r30, r25
    2e92:	0e 94 d3 18 	call	0x31a6	; 0x31a6 <__fp_split3>
    2e96:	58 f3       	brcs	.-42     	; 0x2e6e <__addsf3+0xc>
    2e98:	ba 17       	cp	r27, r26
    2e9a:	62 07       	cpc	r22, r18
    2e9c:	73 07       	cpc	r23, r19
    2e9e:	84 07       	cpc	r24, r20
    2ea0:	95 07       	cpc	r25, r21
    2ea2:	20 f0       	brcs	.+8      	; 0x2eac <__addsf3x+0x1c>
    2ea4:	79 f4       	brne	.+30     	; 0x2ec4 <__addsf3x+0x34>
    2ea6:	a6 f5       	brtc	.+104    	; 0x2f10 <__addsf3x+0x80>
    2ea8:	0c 94 f5 18 	jmp	0x31ea	; 0x31ea <__fp_zero>
    2eac:	0e f4       	brtc	.+2      	; 0x2eb0 <__addsf3x+0x20>
    2eae:	e0 95       	com	r30
    2eb0:	0b 2e       	mov	r0, r27
    2eb2:	ba 2f       	mov	r27, r26
    2eb4:	a0 2d       	mov	r26, r0
    2eb6:	0b 01       	movw	r0, r22
    2eb8:	b9 01       	movw	r22, r18
    2eba:	90 01       	movw	r18, r0
    2ebc:	0c 01       	movw	r0, r24
    2ebe:	ca 01       	movw	r24, r20
    2ec0:	a0 01       	movw	r20, r0
    2ec2:	11 24       	eor	r1, r1
    2ec4:	ff 27       	eor	r31, r31
    2ec6:	59 1b       	sub	r21, r25
    2ec8:	99 f0       	breq	.+38     	; 0x2ef0 <__addsf3x+0x60>
    2eca:	59 3f       	cpi	r21, 0xF9	; 249
    2ecc:	50 f4       	brcc	.+20     	; 0x2ee2 <__addsf3x+0x52>
    2ece:	50 3e       	cpi	r21, 0xE0	; 224
    2ed0:	68 f1       	brcs	.+90     	; 0x2f2c <__addsf3x+0x9c>
    2ed2:	1a 16       	cp	r1, r26
    2ed4:	f0 40       	sbci	r31, 0x00	; 0
    2ed6:	a2 2f       	mov	r26, r18
    2ed8:	23 2f       	mov	r18, r19
    2eda:	34 2f       	mov	r19, r20
    2edc:	44 27       	eor	r20, r20
    2ede:	58 5f       	subi	r21, 0xF8	; 248
    2ee0:	f3 cf       	rjmp	.-26     	; 0x2ec8 <__addsf3x+0x38>
    2ee2:	46 95       	lsr	r20
    2ee4:	37 95       	ror	r19
    2ee6:	27 95       	ror	r18
    2ee8:	a7 95       	ror	r26
    2eea:	f0 40       	sbci	r31, 0x00	; 0
    2eec:	53 95       	inc	r21
    2eee:	c9 f7       	brne	.-14     	; 0x2ee2 <__addsf3x+0x52>
    2ef0:	7e f4       	brtc	.+30     	; 0x2f10 <__addsf3x+0x80>
    2ef2:	1f 16       	cp	r1, r31
    2ef4:	ba 0b       	sbc	r27, r26
    2ef6:	62 0b       	sbc	r22, r18
    2ef8:	73 0b       	sbc	r23, r19
    2efa:	84 0b       	sbc	r24, r20
    2efc:	ba f0       	brmi	.+46     	; 0x2f2c <__addsf3x+0x9c>
    2efe:	91 50       	subi	r25, 0x01	; 1
    2f00:	a1 f0       	breq	.+40     	; 0x2f2a <__addsf3x+0x9a>
    2f02:	ff 0f       	add	r31, r31
    2f04:	bb 1f       	adc	r27, r27
    2f06:	66 1f       	adc	r22, r22
    2f08:	77 1f       	adc	r23, r23
    2f0a:	88 1f       	adc	r24, r24
    2f0c:	c2 f7       	brpl	.-16     	; 0x2efe <__addsf3x+0x6e>
    2f0e:	0e c0       	rjmp	.+28     	; 0x2f2c <__addsf3x+0x9c>
    2f10:	ba 0f       	add	r27, r26
    2f12:	62 1f       	adc	r22, r18
    2f14:	73 1f       	adc	r23, r19
    2f16:	84 1f       	adc	r24, r20
    2f18:	48 f4       	brcc	.+18     	; 0x2f2c <__addsf3x+0x9c>
    2f1a:	87 95       	ror	r24
    2f1c:	77 95       	ror	r23
    2f1e:	67 95       	ror	r22
    2f20:	b7 95       	ror	r27
    2f22:	f7 95       	ror	r31
    2f24:	9e 3f       	cpi	r25, 0xFE	; 254
    2f26:	08 f0       	brcs	.+2      	; 0x2f2a <__addsf3x+0x9a>
    2f28:	b0 cf       	rjmp	.-160    	; 0x2e8a <__addsf3+0x28>
    2f2a:	93 95       	inc	r25
    2f2c:	88 0f       	add	r24, r24
    2f2e:	08 f0       	brcs	.+2      	; 0x2f32 <__addsf3x+0xa2>
    2f30:	99 27       	eor	r25, r25
    2f32:	ee 0f       	add	r30, r30
    2f34:	97 95       	ror	r25
    2f36:	87 95       	ror	r24
    2f38:	08 95       	ret

00002f3a <__cmpsf2>:
    2f3a:	0e 94 87 18 	call	0x310e	; 0x310e <__fp_cmp>
    2f3e:	08 f4       	brcc	.+2      	; 0x2f42 <__cmpsf2+0x8>
    2f40:	81 e0       	ldi	r24, 0x01	; 1
    2f42:	08 95       	ret

00002f44 <__divsf3>:
    2f44:	0e 94 b6 17 	call	0x2f6c	; 0x2f6c <__divsf3x>
    2f48:	0c 94 c2 18 	jmp	0x3184	; 0x3184 <__fp_round>
    2f4c:	0e 94 bb 18 	call	0x3176	; 0x3176 <__fp_pscB>
    2f50:	58 f0       	brcs	.+22     	; 0x2f68 <__divsf3+0x24>
    2f52:	0e 94 b4 18 	call	0x3168	; 0x3168 <__fp_pscA>
    2f56:	40 f0       	brcs	.+16     	; 0x2f68 <__divsf3+0x24>
    2f58:	29 f4       	brne	.+10     	; 0x2f64 <__divsf3+0x20>
    2f5a:	5f 3f       	cpi	r21, 0xFF	; 255
    2f5c:	29 f0       	breq	.+10     	; 0x2f68 <__divsf3+0x24>
    2f5e:	0c 94 ab 18 	jmp	0x3156	; 0x3156 <__fp_inf>
    2f62:	51 11       	cpse	r21, r1
    2f64:	0c 94 f6 18 	jmp	0x31ec	; 0x31ec <__fp_szero>
    2f68:	0c 94 b1 18 	jmp	0x3162	; 0x3162 <__fp_nan>

00002f6c <__divsf3x>:
    2f6c:	0e 94 d3 18 	call	0x31a6	; 0x31a6 <__fp_split3>
    2f70:	68 f3       	brcs	.-38     	; 0x2f4c <__divsf3+0x8>

00002f72 <__divsf3_pse>:
    2f72:	99 23       	and	r25, r25
    2f74:	b1 f3       	breq	.-20     	; 0x2f62 <__divsf3+0x1e>
    2f76:	55 23       	and	r21, r21
    2f78:	91 f3       	breq	.-28     	; 0x2f5e <__divsf3+0x1a>
    2f7a:	95 1b       	sub	r25, r21
    2f7c:	55 0b       	sbc	r21, r21
    2f7e:	bb 27       	eor	r27, r27
    2f80:	aa 27       	eor	r26, r26
    2f82:	62 17       	cp	r22, r18
    2f84:	73 07       	cpc	r23, r19
    2f86:	84 07       	cpc	r24, r20
    2f88:	38 f0       	brcs	.+14     	; 0x2f98 <__divsf3_pse+0x26>
    2f8a:	9f 5f       	subi	r25, 0xFF	; 255
    2f8c:	5f 4f       	sbci	r21, 0xFF	; 255
    2f8e:	22 0f       	add	r18, r18
    2f90:	33 1f       	adc	r19, r19
    2f92:	44 1f       	adc	r20, r20
    2f94:	aa 1f       	adc	r26, r26
    2f96:	a9 f3       	breq	.-22     	; 0x2f82 <__divsf3_pse+0x10>
    2f98:	35 d0       	rcall	.+106    	; 0x3004 <__divsf3_pse+0x92>
    2f9a:	0e 2e       	mov	r0, r30
    2f9c:	3a f0       	brmi	.+14     	; 0x2fac <__divsf3_pse+0x3a>
    2f9e:	e0 e8       	ldi	r30, 0x80	; 128
    2fa0:	32 d0       	rcall	.+100    	; 0x3006 <__divsf3_pse+0x94>
    2fa2:	91 50       	subi	r25, 0x01	; 1
    2fa4:	50 40       	sbci	r21, 0x00	; 0
    2fa6:	e6 95       	lsr	r30
    2fa8:	00 1c       	adc	r0, r0
    2faa:	ca f7       	brpl	.-14     	; 0x2f9e <__divsf3_pse+0x2c>
    2fac:	2b d0       	rcall	.+86     	; 0x3004 <__divsf3_pse+0x92>
    2fae:	fe 2f       	mov	r31, r30
    2fb0:	29 d0       	rcall	.+82     	; 0x3004 <__divsf3_pse+0x92>
    2fb2:	66 0f       	add	r22, r22
    2fb4:	77 1f       	adc	r23, r23
    2fb6:	88 1f       	adc	r24, r24
    2fb8:	bb 1f       	adc	r27, r27
    2fba:	26 17       	cp	r18, r22
    2fbc:	37 07       	cpc	r19, r23
    2fbe:	48 07       	cpc	r20, r24
    2fc0:	ab 07       	cpc	r26, r27
    2fc2:	b0 e8       	ldi	r27, 0x80	; 128
    2fc4:	09 f0       	breq	.+2      	; 0x2fc8 <__divsf3_pse+0x56>
    2fc6:	bb 0b       	sbc	r27, r27
    2fc8:	80 2d       	mov	r24, r0
    2fca:	bf 01       	movw	r22, r30
    2fcc:	ff 27       	eor	r31, r31
    2fce:	93 58       	subi	r25, 0x83	; 131
    2fd0:	5f 4f       	sbci	r21, 0xFF	; 255
    2fd2:	3a f0       	brmi	.+14     	; 0x2fe2 <__divsf3_pse+0x70>
    2fd4:	9e 3f       	cpi	r25, 0xFE	; 254
    2fd6:	51 05       	cpc	r21, r1
    2fd8:	78 f0       	brcs	.+30     	; 0x2ff8 <__divsf3_pse+0x86>
    2fda:	0c 94 ab 18 	jmp	0x3156	; 0x3156 <__fp_inf>
    2fde:	0c 94 f6 18 	jmp	0x31ec	; 0x31ec <__fp_szero>
    2fe2:	5f 3f       	cpi	r21, 0xFF	; 255
    2fe4:	e4 f3       	brlt	.-8      	; 0x2fde <__divsf3_pse+0x6c>
    2fe6:	98 3e       	cpi	r25, 0xE8	; 232
    2fe8:	d4 f3       	brlt	.-12     	; 0x2fde <__divsf3_pse+0x6c>
    2fea:	86 95       	lsr	r24
    2fec:	77 95       	ror	r23
    2fee:	67 95       	ror	r22
    2ff0:	b7 95       	ror	r27
    2ff2:	f7 95       	ror	r31
    2ff4:	9f 5f       	subi	r25, 0xFF	; 255
    2ff6:	c9 f7       	brne	.-14     	; 0x2fea <__divsf3_pse+0x78>
    2ff8:	88 0f       	add	r24, r24
    2ffa:	91 1d       	adc	r25, r1
    2ffc:	96 95       	lsr	r25
    2ffe:	87 95       	ror	r24
    3000:	97 f9       	bld	r25, 7
    3002:	08 95       	ret
    3004:	e1 e0       	ldi	r30, 0x01	; 1
    3006:	66 0f       	add	r22, r22
    3008:	77 1f       	adc	r23, r23
    300a:	88 1f       	adc	r24, r24
    300c:	bb 1f       	adc	r27, r27
    300e:	62 17       	cp	r22, r18
    3010:	73 07       	cpc	r23, r19
    3012:	84 07       	cpc	r24, r20
    3014:	ba 07       	cpc	r27, r26
    3016:	20 f0       	brcs	.+8      	; 0x3020 <__divsf3_pse+0xae>
    3018:	62 1b       	sub	r22, r18
    301a:	73 0b       	sbc	r23, r19
    301c:	84 0b       	sbc	r24, r20
    301e:	ba 0b       	sbc	r27, r26
    3020:	ee 1f       	adc	r30, r30
    3022:	88 f7       	brcc	.-30     	; 0x3006 <__divsf3_pse+0x94>
    3024:	e0 95       	com	r30
    3026:	08 95       	ret

00003028 <__fixsfsi>:
    3028:	0e 94 1b 18 	call	0x3036	; 0x3036 <__fixunssfsi>
    302c:	68 94       	set
    302e:	b1 11       	cpse	r27, r1
    3030:	0c 94 f6 18 	jmp	0x31ec	; 0x31ec <__fp_szero>
    3034:	08 95       	ret

00003036 <__fixunssfsi>:
    3036:	0e 94 db 18 	call	0x31b6	; 0x31b6 <__fp_splitA>
    303a:	88 f0       	brcs	.+34     	; 0x305e <__fixunssfsi+0x28>
    303c:	9f 57       	subi	r25, 0x7F	; 127
    303e:	98 f0       	brcs	.+38     	; 0x3066 <__fixunssfsi+0x30>
    3040:	b9 2f       	mov	r27, r25
    3042:	99 27       	eor	r25, r25
    3044:	b7 51       	subi	r27, 0x17	; 23
    3046:	b0 f0       	brcs	.+44     	; 0x3074 <__fixunssfsi+0x3e>
    3048:	e1 f0       	breq	.+56     	; 0x3082 <__fixunssfsi+0x4c>
    304a:	66 0f       	add	r22, r22
    304c:	77 1f       	adc	r23, r23
    304e:	88 1f       	adc	r24, r24
    3050:	99 1f       	adc	r25, r25
    3052:	1a f0       	brmi	.+6      	; 0x305a <__fixunssfsi+0x24>
    3054:	ba 95       	dec	r27
    3056:	c9 f7       	brne	.-14     	; 0x304a <__fixunssfsi+0x14>
    3058:	14 c0       	rjmp	.+40     	; 0x3082 <__fixunssfsi+0x4c>
    305a:	b1 30       	cpi	r27, 0x01	; 1
    305c:	91 f0       	breq	.+36     	; 0x3082 <__fixunssfsi+0x4c>
    305e:	0e 94 f5 18 	call	0x31ea	; 0x31ea <__fp_zero>
    3062:	b1 e0       	ldi	r27, 0x01	; 1
    3064:	08 95       	ret
    3066:	0c 94 f5 18 	jmp	0x31ea	; 0x31ea <__fp_zero>
    306a:	67 2f       	mov	r22, r23
    306c:	78 2f       	mov	r23, r24
    306e:	88 27       	eor	r24, r24
    3070:	b8 5f       	subi	r27, 0xF8	; 248
    3072:	39 f0       	breq	.+14     	; 0x3082 <__fixunssfsi+0x4c>
    3074:	b9 3f       	cpi	r27, 0xF9	; 249
    3076:	cc f3       	brlt	.-14     	; 0x306a <__fixunssfsi+0x34>
    3078:	86 95       	lsr	r24
    307a:	77 95       	ror	r23
    307c:	67 95       	ror	r22
    307e:	b3 95       	inc	r27
    3080:	d9 f7       	brne	.-10     	; 0x3078 <__fixunssfsi+0x42>
    3082:	3e f4       	brtc	.+14     	; 0x3092 <__fixunssfsi+0x5c>
    3084:	90 95       	com	r25
    3086:	80 95       	com	r24
    3088:	70 95       	com	r23
    308a:	61 95       	neg	r22
    308c:	7f 4f       	sbci	r23, 0xFF	; 255
    308e:	8f 4f       	sbci	r24, 0xFF	; 255
    3090:	9f 4f       	sbci	r25, 0xFF	; 255
    3092:	08 95       	ret

00003094 <__floatunsisf>:
    3094:	e8 94       	clt
    3096:	09 c0       	rjmp	.+18     	; 0x30aa <__floatsisf+0x12>

00003098 <__floatsisf>:
    3098:	97 fb       	bst	r25, 7
    309a:	3e f4       	brtc	.+14     	; 0x30aa <__floatsisf+0x12>
    309c:	90 95       	com	r25
    309e:	80 95       	com	r24
    30a0:	70 95       	com	r23
    30a2:	61 95       	neg	r22
    30a4:	7f 4f       	sbci	r23, 0xFF	; 255
    30a6:	8f 4f       	sbci	r24, 0xFF	; 255
    30a8:	9f 4f       	sbci	r25, 0xFF	; 255
    30aa:	99 23       	and	r25, r25
    30ac:	a9 f0       	breq	.+42     	; 0x30d8 <__floatsisf+0x40>
    30ae:	f9 2f       	mov	r31, r25
    30b0:	96 e9       	ldi	r25, 0x96	; 150
    30b2:	bb 27       	eor	r27, r27
    30b4:	93 95       	inc	r25
    30b6:	f6 95       	lsr	r31
    30b8:	87 95       	ror	r24
    30ba:	77 95       	ror	r23
    30bc:	67 95       	ror	r22
    30be:	b7 95       	ror	r27
    30c0:	f1 11       	cpse	r31, r1
    30c2:	f8 cf       	rjmp	.-16     	; 0x30b4 <__floatsisf+0x1c>
    30c4:	fa f4       	brpl	.+62     	; 0x3104 <__floatsisf+0x6c>
    30c6:	bb 0f       	add	r27, r27
    30c8:	11 f4       	brne	.+4      	; 0x30ce <__floatsisf+0x36>
    30ca:	60 ff       	sbrs	r22, 0
    30cc:	1b c0       	rjmp	.+54     	; 0x3104 <__floatsisf+0x6c>
    30ce:	6f 5f       	subi	r22, 0xFF	; 255
    30d0:	7f 4f       	sbci	r23, 0xFF	; 255
    30d2:	8f 4f       	sbci	r24, 0xFF	; 255
    30d4:	9f 4f       	sbci	r25, 0xFF	; 255
    30d6:	16 c0       	rjmp	.+44     	; 0x3104 <__floatsisf+0x6c>
    30d8:	88 23       	and	r24, r24
    30da:	11 f0       	breq	.+4      	; 0x30e0 <__floatsisf+0x48>
    30dc:	96 e9       	ldi	r25, 0x96	; 150
    30de:	11 c0       	rjmp	.+34     	; 0x3102 <__floatsisf+0x6a>
    30e0:	77 23       	and	r23, r23
    30e2:	21 f0       	breq	.+8      	; 0x30ec <__floatsisf+0x54>
    30e4:	9e e8       	ldi	r25, 0x8E	; 142
    30e6:	87 2f       	mov	r24, r23
    30e8:	76 2f       	mov	r23, r22
    30ea:	05 c0       	rjmp	.+10     	; 0x30f6 <__floatsisf+0x5e>
    30ec:	66 23       	and	r22, r22
    30ee:	71 f0       	breq	.+28     	; 0x310c <__floatsisf+0x74>
    30f0:	96 e8       	ldi	r25, 0x86	; 134
    30f2:	86 2f       	mov	r24, r22
    30f4:	70 e0       	ldi	r23, 0x00	; 0
    30f6:	60 e0       	ldi	r22, 0x00	; 0
    30f8:	2a f0       	brmi	.+10     	; 0x3104 <__floatsisf+0x6c>
    30fa:	9a 95       	dec	r25
    30fc:	66 0f       	add	r22, r22
    30fe:	77 1f       	adc	r23, r23
    3100:	88 1f       	adc	r24, r24
    3102:	da f7       	brpl	.-10     	; 0x30fa <__floatsisf+0x62>
    3104:	88 0f       	add	r24, r24
    3106:	96 95       	lsr	r25
    3108:	87 95       	ror	r24
    310a:	97 f9       	bld	r25, 7
    310c:	08 95       	ret

0000310e <__fp_cmp>:
    310e:	99 0f       	add	r25, r25
    3110:	00 08       	sbc	r0, r0
    3112:	55 0f       	add	r21, r21
    3114:	aa 0b       	sbc	r26, r26
    3116:	e0 e8       	ldi	r30, 0x80	; 128
    3118:	fe ef       	ldi	r31, 0xFE	; 254
    311a:	16 16       	cp	r1, r22
    311c:	17 06       	cpc	r1, r23
    311e:	e8 07       	cpc	r30, r24
    3120:	f9 07       	cpc	r31, r25
    3122:	c0 f0       	brcs	.+48     	; 0x3154 <__fp_cmp+0x46>
    3124:	12 16       	cp	r1, r18
    3126:	13 06       	cpc	r1, r19
    3128:	e4 07       	cpc	r30, r20
    312a:	f5 07       	cpc	r31, r21
    312c:	98 f0       	brcs	.+38     	; 0x3154 <__fp_cmp+0x46>
    312e:	62 1b       	sub	r22, r18
    3130:	73 0b       	sbc	r23, r19
    3132:	84 0b       	sbc	r24, r20
    3134:	95 0b       	sbc	r25, r21
    3136:	39 f4       	brne	.+14     	; 0x3146 <__fp_cmp+0x38>
    3138:	0a 26       	eor	r0, r26
    313a:	61 f0       	breq	.+24     	; 0x3154 <__fp_cmp+0x46>
    313c:	23 2b       	or	r18, r19
    313e:	24 2b       	or	r18, r20
    3140:	25 2b       	or	r18, r21
    3142:	21 f4       	brne	.+8      	; 0x314c <__fp_cmp+0x3e>
    3144:	08 95       	ret
    3146:	0a 26       	eor	r0, r26
    3148:	09 f4       	brne	.+2      	; 0x314c <__fp_cmp+0x3e>
    314a:	a1 40       	sbci	r26, 0x01	; 1
    314c:	a6 95       	lsr	r26
    314e:	8f ef       	ldi	r24, 0xFF	; 255
    3150:	81 1d       	adc	r24, r1
    3152:	81 1d       	adc	r24, r1
    3154:	08 95       	ret

00003156 <__fp_inf>:
    3156:	97 f9       	bld	r25, 7
    3158:	9f 67       	ori	r25, 0x7F	; 127
    315a:	80 e8       	ldi	r24, 0x80	; 128
    315c:	70 e0       	ldi	r23, 0x00	; 0
    315e:	60 e0       	ldi	r22, 0x00	; 0
    3160:	08 95       	ret

00003162 <__fp_nan>:
    3162:	9f ef       	ldi	r25, 0xFF	; 255
    3164:	80 ec       	ldi	r24, 0xC0	; 192
    3166:	08 95       	ret

00003168 <__fp_pscA>:
    3168:	00 24       	eor	r0, r0
    316a:	0a 94       	dec	r0
    316c:	16 16       	cp	r1, r22
    316e:	17 06       	cpc	r1, r23
    3170:	18 06       	cpc	r1, r24
    3172:	09 06       	cpc	r0, r25
    3174:	08 95       	ret

00003176 <__fp_pscB>:
    3176:	00 24       	eor	r0, r0
    3178:	0a 94       	dec	r0
    317a:	12 16       	cp	r1, r18
    317c:	13 06       	cpc	r1, r19
    317e:	14 06       	cpc	r1, r20
    3180:	05 06       	cpc	r0, r21
    3182:	08 95       	ret

00003184 <__fp_round>:
    3184:	09 2e       	mov	r0, r25
    3186:	03 94       	inc	r0
    3188:	00 0c       	add	r0, r0
    318a:	11 f4       	brne	.+4      	; 0x3190 <__fp_round+0xc>
    318c:	88 23       	and	r24, r24
    318e:	52 f0       	brmi	.+20     	; 0x31a4 <__fp_round+0x20>
    3190:	bb 0f       	add	r27, r27
    3192:	40 f4       	brcc	.+16     	; 0x31a4 <__fp_round+0x20>
    3194:	bf 2b       	or	r27, r31
    3196:	11 f4       	brne	.+4      	; 0x319c <__fp_round+0x18>
    3198:	60 ff       	sbrs	r22, 0
    319a:	04 c0       	rjmp	.+8      	; 0x31a4 <__fp_round+0x20>
    319c:	6f 5f       	subi	r22, 0xFF	; 255
    319e:	7f 4f       	sbci	r23, 0xFF	; 255
    31a0:	8f 4f       	sbci	r24, 0xFF	; 255
    31a2:	9f 4f       	sbci	r25, 0xFF	; 255
    31a4:	08 95       	ret

000031a6 <__fp_split3>:
    31a6:	57 fd       	sbrc	r21, 7
    31a8:	90 58       	subi	r25, 0x80	; 128
    31aa:	44 0f       	add	r20, r20
    31ac:	55 1f       	adc	r21, r21
    31ae:	59 f0       	breq	.+22     	; 0x31c6 <__fp_splitA+0x10>
    31b0:	5f 3f       	cpi	r21, 0xFF	; 255
    31b2:	71 f0       	breq	.+28     	; 0x31d0 <__fp_splitA+0x1a>
    31b4:	47 95       	ror	r20

000031b6 <__fp_splitA>:
    31b6:	88 0f       	add	r24, r24
    31b8:	97 fb       	bst	r25, 7
    31ba:	99 1f       	adc	r25, r25
    31bc:	61 f0       	breq	.+24     	; 0x31d6 <__fp_splitA+0x20>
    31be:	9f 3f       	cpi	r25, 0xFF	; 255
    31c0:	79 f0       	breq	.+30     	; 0x31e0 <__fp_splitA+0x2a>
    31c2:	87 95       	ror	r24
    31c4:	08 95       	ret
    31c6:	12 16       	cp	r1, r18
    31c8:	13 06       	cpc	r1, r19
    31ca:	14 06       	cpc	r1, r20
    31cc:	55 1f       	adc	r21, r21
    31ce:	f2 cf       	rjmp	.-28     	; 0x31b4 <__fp_split3+0xe>
    31d0:	46 95       	lsr	r20
    31d2:	f1 df       	rcall	.-30     	; 0x31b6 <__fp_splitA>
    31d4:	08 c0       	rjmp	.+16     	; 0x31e6 <__fp_splitA+0x30>
    31d6:	16 16       	cp	r1, r22
    31d8:	17 06       	cpc	r1, r23
    31da:	18 06       	cpc	r1, r24
    31dc:	99 1f       	adc	r25, r25
    31de:	f1 cf       	rjmp	.-30     	; 0x31c2 <__fp_splitA+0xc>
    31e0:	86 95       	lsr	r24
    31e2:	71 05       	cpc	r23, r1
    31e4:	61 05       	cpc	r22, r1
    31e6:	08 94       	sec
    31e8:	08 95       	ret

000031ea <__fp_zero>:
    31ea:	e8 94       	clt

000031ec <__fp_szero>:
    31ec:	bb 27       	eor	r27, r27
    31ee:	66 27       	eor	r22, r22
    31f0:	77 27       	eor	r23, r23
    31f2:	cb 01       	movw	r24, r22
    31f4:	97 f9       	bld	r25, 7
    31f6:	08 95       	ret

000031f8 <__gesf2>:
    31f8:	0e 94 87 18 	call	0x310e	; 0x310e <__fp_cmp>
    31fc:	08 f4       	brcc	.+2      	; 0x3200 <__gesf2+0x8>
    31fe:	8f ef       	ldi	r24, 0xFF	; 255
    3200:	08 95       	ret

00003202 <__mulsf3>:
    3202:	0e 94 14 19 	call	0x3228	; 0x3228 <__mulsf3x>
    3206:	0c 94 c2 18 	jmp	0x3184	; 0x3184 <__fp_round>
    320a:	0e 94 b4 18 	call	0x3168	; 0x3168 <__fp_pscA>
    320e:	38 f0       	brcs	.+14     	; 0x321e <__mulsf3+0x1c>
    3210:	0e 94 bb 18 	call	0x3176	; 0x3176 <__fp_pscB>
    3214:	20 f0       	brcs	.+8      	; 0x321e <__mulsf3+0x1c>
    3216:	95 23       	and	r25, r21
    3218:	11 f0       	breq	.+4      	; 0x321e <__mulsf3+0x1c>
    321a:	0c 94 ab 18 	jmp	0x3156	; 0x3156 <__fp_inf>
    321e:	0c 94 b1 18 	jmp	0x3162	; 0x3162 <__fp_nan>
    3222:	11 24       	eor	r1, r1
    3224:	0c 94 f6 18 	jmp	0x31ec	; 0x31ec <__fp_szero>

00003228 <__mulsf3x>:
    3228:	0e 94 d3 18 	call	0x31a6	; 0x31a6 <__fp_split3>
    322c:	70 f3       	brcs	.-36     	; 0x320a <__mulsf3+0x8>

0000322e <__mulsf3_pse>:
    322e:	95 9f       	mul	r25, r21
    3230:	c1 f3       	breq	.-16     	; 0x3222 <__mulsf3+0x20>
    3232:	95 0f       	add	r25, r21
    3234:	50 e0       	ldi	r21, 0x00	; 0
    3236:	55 1f       	adc	r21, r21
    3238:	62 9f       	mul	r22, r18
    323a:	f0 01       	movw	r30, r0
    323c:	72 9f       	mul	r23, r18
    323e:	bb 27       	eor	r27, r27
    3240:	f0 0d       	add	r31, r0
    3242:	b1 1d       	adc	r27, r1
    3244:	63 9f       	mul	r22, r19
    3246:	aa 27       	eor	r26, r26
    3248:	f0 0d       	add	r31, r0
    324a:	b1 1d       	adc	r27, r1
    324c:	aa 1f       	adc	r26, r26
    324e:	64 9f       	mul	r22, r20
    3250:	66 27       	eor	r22, r22
    3252:	b0 0d       	add	r27, r0
    3254:	a1 1d       	adc	r26, r1
    3256:	66 1f       	adc	r22, r22
    3258:	82 9f       	mul	r24, r18
    325a:	22 27       	eor	r18, r18
    325c:	b0 0d       	add	r27, r0
    325e:	a1 1d       	adc	r26, r1
    3260:	62 1f       	adc	r22, r18
    3262:	73 9f       	mul	r23, r19
    3264:	b0 0d       	add	r27, r0
    3266:	a1 1d       	adc	r26, r1
    3268:	62 1f       	adc	r22, r18
    326a:	83 9f       	mul	r24, r19
    326c:	a0 0d       	add	r26, r0
    326e:	61 1d       	adc	r22, r1
    3270:	22 1f       	adc	r18, r18
    3272:	74 9f       	mul	r23, r20
    3274:	33 27       	eor	r19, r19
    3276:	a0 0d       	add	r26, r0
    3278:	61 1d       	adc	r22, r1
    327a:	23 1f       	adc	r18, r19
    327c:	84 9f       	mul	r24, r20
    327e:	60 0d       	add	r22, r0
    3280:	21 1d       	adc	r18, r1
    3282:	82 2f       	mov	r24, r18
    3284:	76 2f       	mov	r23, r22
    3286:	6a 2f       	mov	r22, r26
    3288:	11 24       	eor	r1, r1
    328a:	9f 57       	subi	r25, 0x7F	; 127
    328c:	50 40       	sbci	r21, 0x00	; 0
    328e:	9a f0       	brmi	.+38     	; 0x32b6 <__mulsf3_pse+0x88>
    3290:	f1 f0       	breq	.+60     	; 0x32ce <__mulsf3_pse+0xa0>
    3292:	88 23       	and	r24, r24
    3294:	4a f0       	brmi	.+18     	; 0x32a8 <__mulsf3_pse+0x7a>
    3296:	ee 0f       	add	r30, r30
    3298:	ff 1f       	adc	r31, r31
    329a:	bb 1f       	adc	r27, r27
    329c:	66 1f       	adc	r22, r22
    329e:	77 1f       	adc	r23, r23
    32a0:	88 1f       	adc	r24, r24
    32a2:	91 50       	subi	r25, 0x01	; 1
    32a4:	50 40       	sbci	r21, 0x00	; 0
    32a6:	a9 f7       	brne	.-22     	; 0x3292 <__mulsf3_pse+0x64>
    32a8:	9e 3f       	cpi	r25, 0xFE	; 254
    32aa:	51 05       	cpc	r21, r1
    32ac:	80 f0       	brcs	.+32     	; 0x32ce <__mulsf3_pse+0xa0>
    32ae:	0c 94 ab 18 	jmp	0x3156	; 0x3156 <__fp_inf>
    32b2:	0c 94 f6 18 	jmp	0x31ec	; 0x31ec <__fp_szero>
    32b6:	5f 3f       	cpi	r21, 0xFF	; 255
    32b8:	e4 f3       	brlt	.-8      	; 0x32b2 <__mulsf3_pse+0x84>
    32ba:	98 3e       	cpi	r25, 0xE8	; 232
    32bc:	d4 f3       	brlt	.-12     	; 0x32b2 <__mulsf3_pse+0x84>
    32be:	86 95       	lsr	r24
    32c0:	77 95       	ror	r23
    32c2:	67 95       	ror	r22
    32c4:	b7 95       	ror	r27
    32c6:	f7 95       	ror	r31
    32c8:	e7 95       	ror	r30
    32ca:	9f 5f       	subi	r25, 0xFF	; 255
    32cc:	c1 f7       	brne	.-16     	; 0x32be <__mulsf3_pse+0x90>
    32ce:	fe 2b       	or	r31, r30
    32d0:	88 0f       	add	r24, r24
    32d2:	91 1d       	adc	r25, r1
    32d4:	96 95       	lsr	r25
    32d6:	87 95       	ror	r24
    32d8:	97 f9       	bld	r25, 7
    32da:	08 95       	ret

000032dc <vfprintf>:
    32dc:	a0 e1       	ldi	r26, 0x10	; 16
    32de:	b0 e0       	ldi	r27, 0x00	; 0
    32e0:	e4 e7       	ldi	r30, 0x74	; 116
    32e2:	f9 e1       	ldi	r31, 0x19	; 25
    32e4:	0c 94 f6 1c 	jmp	0x39ec	; 0x39ec <__prologue_saves__>
    32e8:	7c 01       	movw	r14, r24
    32ea:	1b 01       	movw	r2, r22
    32ec:	6a 01       	movw	r12, r20
    32ee:	fc 01       	movw	r30, r24
    32f0:	17 82       	std	Z+7, r1	; 0x07
    32f2:	16 82       	std	Z+6, r1	; 0x06
    32f4:	83 81       	ldd	r24, Z+3	; 0x03
    32f6:	81 ff       	sbrs	r24, 1
    32f8:	44 c3       	rjmp	.+1672   	; 0x3982 <vfprintf+0x6a6>
    32fa:	9e 01       	movw	r18, r28
    32fc:	2f 5f       	subi	r18, 0xFF	; 255
    32fe:	3f 4f       	sbci	r19, 0xFF	; 255
    3300:	39 01       	movw	r6, r18
    3302:	f7 01       	movw	r30, r14
    3304:	93 81       	ldd	r25, Z+3	; 0x03
    3306:	f1 01       	movw	r30, r2
    3308:	93 fd       	sbrc	r25, 3
    330a:	85 91       	lpm	r24, Z+
    330c:	93 ff       	sbrs	r25, 3
    330e:	81 91       	ld	r24, Z+
    3310:	1f 01       	movw	r2, r30
    3312:	88 23       	and	r24, r24
    3314:	09 f4       	brne	.+2      	; 0x3318 <vfprintf+0x3c>
    3316:	31 c3       	rjmp	.+1634   	; 0x397a <vfprintf+0x69e>
    3318:	85 32       	cpi	r24, 0x25	; 37
    331a:	39 f4       	brne	.+14     	; 0x332a <vfprintf+0x4e>
    331c:	93 fd       	sbrc	r25, 3
    331e:	85 91       	lpm	r24, Z+
    3320:	93 ff       	sbrs	r25, 3
    3322:	81 91       	ld	r24, Z+
    3324:	1f 01       	movw	r2, r30
    3326:	85 32       	cpi	r24, 0x25	; 37
    3328:	39 f4       	brne	.+14     	; 0x3338 <vfprintf+0x5c>
    332a:	b7 01       	movw	r22, r14
    332c:	90 e0       	ldi	r25, 0x00	; 0
    332e:	0e 94 31 1e 	call	0x3c62	; 0x3c62 <fputc>
    3332:	56 01       	movw	r10, r12
    3334:	65 01       	movw	r12, r10
    3336:	e5 cf       	rjmp	.-54     	; 0x3302 <vfprintf+0x26>
    3338:	10 e0       	ldi	r17, 0x00	; 0
    333a:	51 2c       	mov	r5, r1
    333c:	91 2c       	mov	r9, r1
    333e:	ff e1       	ldi	r31, 0x1F	; 31
    3340:	f9 15       	cp	r31, r9
    3342:	d8 f0       	brcs	.+54     	; 0x337a <vfprintf+0x9e>
    3344:	8b 32       	cpi	r24, 0x2B	; 43
    3346:	79 f0       	breq	.+30     	; 0x3366 <vfprintf+0x8a>
    3348:	38 f4       	brcc	.+14     	; 0x3358 <vfprintf+0x7c>
    334a:	80 32       	cpi	r24, 0x20	; 32
    334c:	79 f0       	breq	.+30     	; 0x336c <vfprintf+0x90>
    334e:	83 32       	cpi	r24, 0x23	; 35
    3350:	a1 f4       	brne	.+40     	; 0x337a <vfprintf+0x9e>
    3352:	f9 2d       	mov	r31, r9
    3354:	f0 61       	ori	r31, 0x10	; 16
    3356:	2e c0       	rjmp	.+92     	; 0x33b4 <vfprintf+0xd8>
    3358:	8d 32       	cpi	r24, 0x2D	; 45
    335a:	61 f0       	breq	.+24     	; 0x3374 <vfprintf+0x98>
    335c:	80 33       	cpi	r24, 0x30	; 48
    335e:	69 f4       	brne	.+26     	; 0x337a <vfprintf+0x9e>
    3360:	29 2d       	mov	r18, r9
    3362:	21 60       	ori	r18, 0x01	; 1
    3364:	2d c0       	rjmp	.+90     	; 0x33c0 <vfprintf+0xe4>
    3366:	39 2d       	mov	r19, r9
    3368:	32 60       	ori	r19, 0x02	; 2
    336a:	93 2e       	mov	r9, r19
    336c:	89 2d       	mov	r24, r9
    336e:	84 60       	ori	r24, 0x04	; 4
    3370:	98 2e       	mov	r9, r24
    3372:	2a c0       	rjmp	.+84     	; 0x33c8 <vfprintf+0xec>
    3374:	e9 2d       	mov	r30, r9
    3376:	e8 60       	ori	r30, 0x08	; 8
    3378:	15 c0       	rjmp	.+42     	; 0x33a4 <vfprintf+0xc8>
    337a:	97 fc       	sbrc	r9, 7
    337c:	2d c0       	rjmp	.+90     	; 0x33d8 <vfprintf+0xfc>
    337e:	20 ed       	ldi	r18, 0xD0	; 208
    3380:	28 0f       	add	r18, r24
    3382:	2a 30       	cpi	r18, 0x0A	; 10
    3384:	88 f4       	brcc	.+34     	; 0x33a8 <vfprintf+0xcc>
    3386:	96 fe       	sbrs	r9, 6
    3388:	06 c0       	rjmp	.+12     	; 0x3396 <vfprintf+0xba>
    338a:	3a e0       	ldi	r19, 0x0A	; 10
    338c:	13 9f       	mul	r17, r19
    338e:	20 0d       	add	r18, r0
    3390:	11 24       	eor	r1, r1
    3392:	12 2f       	mov	r17, r18
    3394:	19 c0       	rjmp	.+50     	; 0x33c8 <vfprintf+0xec>
    3396:	8a e0       	ldi	r24, 0x0A	; 10
    3398:	58 9e       	mul	r5, r24
    339a:	20 0d       	add	r18, r0
    339c:	11 24       	eor	r1, r1
    339e:	52 2e       	mov	r5, r18
    33a0:	e9 2d       	mov	r30, r9
    33a2:	e0 62       	ori	r30, 0x20	; 32
    33a4:	9e 2e       	mov	r9, r30
    33a6:	10 c0       	rjmp	.+32     	; 0x33c8 <vfprintf+0xec>
    33a8:	8e 32       	cpi	r24, 0x2E	; 46
    33aa:	31 f4       	brne	.+12     	; 0x33b8 <vfprintf+0xdc>
    33ac:	96 fc       	sbrc	r9, 6
    33ae:	e5 c2       	rjmp	.+1482   	; 0x397a <vfprintf+0x69e>
    33b0:	f9 2d       	mov	r31, r9
    33b2:	f0 64       	ori	r31, 0x40	; 64
    33b4:	9f 2e       	mov	r9, r31
    33b6:	08 c0       	rjmp	.+16     	; 0x33c8 <vfprintf+0xec>
    33b8:	8c 36       	cpi	r24, 0x6C	; 108
    33ba:	21 f4       	brne	.+8      	; 0x33c4 <vfprintf+0xe8>
    33bc:	29 2d       	mov	r18, r9
    33be:	20 68       	ori	r18, 0x80	; 128
    33c0:	92 2e       	mov	r9, r18
    33c2:	02 c0       	rjmp	.+4      	; 0x33c8 <vfprintf+0xec>
    33c4:	88 36       	cpi	r24, 0x68	; 104
    33c6:	41 f4       	brne	.+16     	; 0x33d8 <vfprintf+0xfc>
    33c8:	f1 01       	movw	r30, r2
    33ca:	93 fd       	sbrc	r25, 3
    33cc:	85 91       	lpm	r24, Z+
    33ce:	93 ff       	sbrs	r25, 3
    33d0:	81 91       	ld	r24, Z+
    33d2:	1f 01       	movw	r2, r30
    33d4:	81 11       	cpse	r24, r1
    33d6:	b3 cf       	rjmp	.-154    	; 0x333e <vfprintf+0x62>
    33d8:	9b eb       	ldi	r25, 0xBB	; 187
    33da:	98 0f       	add	r25, r24
    33dc:	93 30       	cpi	r25, 0x03	; 3
    33de:	20 f4       	brcc	.+8      	; 0x33e8 <vfprintf+0x10c>
    33e0:	99 2d       	mov	r25, r9
    33e2:	90 61       	ori	r25, 0x10	; 16
    33e4:	80 5e       	subi	r24, 0xE0	; 224
    33e6:	07 c0       	rjmp	.+14     	; 0x33f6 <vfprintf+0x11a>
    33e8:	9b e9       	ldi	r25, 0x9B	; 155
    33ea:	98 0f       	add	r25, r24
    33ec:	93 30       	cpi	r25, 0x03	; 3
    33ee:	08 f0       	brcs	.+2      	; 0x33f2 <vfprintf+0x116>
    33f0:	66 c1       	rjmp	.+716    	; 0x36be <vfprintf+0x3e2>
    33f2:	99 2d       	mov	r25, r9
    33f4:	9f 7e       	andi	r25, 0xEF	; 239
    33f6:	96 ff       	sbrs	r25, 6
    33f8:	16 e0       	ldi	r17, 0x06	; 6
    33fa:	9f 73       	andi	r25, 0x3F	; 63
    33fc:	99 2e       	mov	r9, r25
    33fe:	85 36       	cpi	r24, 0x65	; 101
    3400:	19 f4       	brne	.+6      	; 0x3408 <vfprintf+0x12c>
    3402:	90 64       	ori	r25, 0x40	; 64
    3404:	99 2e       	mov	r9, r25
    3406:	08 c0       	rjmp	.+16     	; 0x3418 <vfprintf+0x13c>
    3408:	86 36       	cpi	r24, 0x66	; 102
    340a:	21 f4       	brne	.+8      	; 0x3414 <vfprintf+0x138>
    340c:	39 2f       	mov	r19, r25
    340e:	30 68       	ori	r19, 0x80	; 128
    3410:	93 2e       	mov	r9, r19
    3412:	02 c0       	rjmp	.+4      	; 0x3418 <vfprintf+0x13c>
    3414:	11 11       	cpse	r17, r1
    3416:	11 50       	subi	r17, 0x01	; 1
    3418:	97 fe       	sbrs	r9, 7
    341a:	07 c0       	rjmp	.+14     	; 0x342a <vfprintf+0x14e>
    341c:	1c 33       	cpi	r17, 0x3C	; 60
    341e:	50 f4       	brcc	.+20     	; 0x3434 <vfprintf+0x158>
    3420:	44 24       	eor	r4, r4
    3422:	43 94       	inc	r4
    3424:	41 0e       	add	r4, r17
    3426:	27 e0       	ldi	r18, 0x07	; 7
    3428:	0b c0       	rjmp	.+22     	; 0x3440 <vfprintf+0x164>
    342a:	18 30       	cpi	r17, 0x08	; 8
    342c:	38 f0       	brcs	.+14     	; 0x343c <vfprintf+0x160>
    342e:	27 e0       	ldi	r18, 0x07	; 7
    3430:	17 e0       	ldi	r17, 0x07	; 7
    3432:	05 c0       	rjmp	.+10     	; 0x343e <vfprintf+0x162>
    3434:	27 e0       	ldi	r18, 0x07	; 7
    3436:	9c e3       	ldi	r25, 0x3C	; 60
    3438:	49 2e       	mov	r4, r25
    343a:	02 c0       	rjmp	.+4      	; 0x3440 <vfprintf+0x164>
    343c:	21 2f       	mov	r18, r17
    343e:	41 2c       	mov	r4, r1
    3440:	56 01       	movw	r10, r12
    3442:	84 e0       	ldi	r24, 0x04	; 4
    3444:	a8 0e       	add	r10, r24
    3446:	b1 1c       	adc	r11, r1
    3448:	f6 01       	movw	r30, r12
    344a:	60 81       	ld	r22, Z
    344c:	71 81       	ldd	r23, Z+1	; 0x01
    344e:	82 81       	ldd	r24, Z+2	; 0x02
    3450:	93 81       	ldd	r25, Z+3	; 0x03
    3452:	04 2d       	mov	r16, r4
    3454:	a3 01       	movw	r20, r6
    3456:	0e 94 3c 1d 	call	0x3a78	; 0x3a78 <__ftoa_engine>
    345a:	6c 01       	movw	r12, r24
    345c:	f9 81       	ldd	r31, Y+1	; 0x01
    345e:	fc 87       	std	Y+12, r31	; 0x0c
    3460:	f0 ff       	sbrs	r31, 0
    3462:	02 c0       	rjmp	.+4      	; 0x3468 <vfprintf+0x18c>
    3464:	f3 ff       	sbrs	r31, 3
    3466:	06 c0       	rjmp	.+12     	; 0x3474 <vfprintf+0x198>
    3468:	91 fc       	sbrc	r9, 1
    346a:	06 c0       	rjmp	.+12     	; 0x3478 <vfprintf+0x19c>
    346c:	92 fe       	sbrs	r9, 2
    346e:	06 c0       	rjmp	.+12     	; 0x347c <vfprintf+0x1a0>
    3470:	00 e2       	ldi	r16, 0x20	; 32
    3472:	05 c0       	rjmp	.+10     	; 0x347e <vfprintf+0x1a2>
    3474:	0d e2       	ldi	r16, 0x2D	; 45
    3476:	03 c0       	rjmp	.+6      	; 0x347e <vfprintf+0x1a2>
    3478:	0b e2       	ldi	r16, 0x2B	; 43
    347a:	01 c0       	rjmp	.+2      	; 0x347e <vfprintf+0x1a2>
    347c:	00 e0       	ldi	r16, 0x00	; 0
    347e:	8c 85       	ldd	r24, Y+12	; 0x0c
    3480:	8c 70       	andi	r24, 0x0C	; 12
    3482:	19 f0       	breq	.+6      	; 0x348a <vfprintf+0x1ae>
    3484:	01 11       	cpse	r16, r1
    3486:	5a c2       	rjmp	.+1204   	; 0x393c <vfprintf+0x660>
    3488:	9b c2       	rjmp	.+1334   	; 0x39c0 <vfprintf+0x6e4>
    348a:	97 fe       	sbrs	r9, 7
    348c:	10 c0       	rjmp	.+32     	; 0x34ae <vfprintf+0x1d2>
    348e:	4c 0c       	add	r4, r12
    3490:	fc 85       	ldd	r31, Y+12	; 0x0c
    3492:	f4 ff       	sbrs	r31, 4
    3494:	04 c0       	rjmp	.+8      	; 0x349e <vfprintf+0x1c2>
    3496:	8a 81       	ldd	r24, Y+2	; 0x02
    3498:	81 33       	cpi	r24, 0x31	; 49
    349a:	09 f4       	brne	.+2      	; 0x349e <vfprintf+0x1c2>
    349c:	4a 94       	dec	r4
    349e:	14 14       	cp	r1, r4
    34a0:	74 f5       	brge	.+92     	; 0x34fe <vfprintf+0x222>
    34a2:	28 e0       	ldi	r18, 0x08	; 8
    34a4:	24 15       	cp	r18, r4
    34a6:	78 f5       	brcc	.+94     	; 0x3506 <vfprintf+0x22a>
    34a8:	88 e0       	ldi	r24, 0x08	; 8
    34aa:	48 2e       	mov	r4, r24
    34ac:	2c c0       	rjmp	.+88     	; 0x3506 <vfprintf+0x22a>
    34ae:	96 fc       	sbrc	r9, 6
    34b0:	2a c0       	rjmp	.+84     	; 0x3506 <vfprintf+0x22a>
    34b2:	81 2f       	mov	r24, r17
    34b4:	90 e0       	ldi	r25, 0x00	; 0
    34b6:	8c 15       	cp	r24, r12
    34b8:	9d 05       	cpc	r25, r13
    34ba:	9c f0       	brlt	.+38     	; 0x34e2 <vfprintf+0x206>
    34bc:	3c ef       	ldi	r19, 0xFC	; 252
    34be:	c3 16       	cp	r12, r19
    34c0:	3f ef       	ldi	r19, 0xFF	; 255
    34c2:	d3 06       	cpc	r13, r19
    34c4:	74 f0       	brlt	.+28     	; 0x34e2 <vfprintf+0x206>
    34c6:	89 2d       	mov	r24, r9
    34c8:	80 68       	ori	r24, 0x80	; 128
    34ca:	98 2e       	mov	r9, r24
    34cc:	0a c0       	rjmp	.+20     	; 0x34e2 <vfprintf+0x206>
    34ce:	e2 e0       	ldi	r30, 0x02	; 2
    34d0:	f0 e0       	ldi	r31, 0x00	; 0
    34d2:	ec 0f       	add	r30, r28
    34d4:	fd 1f       	adc	r31, r29
    34d6:	e1 0f       	add	r30, r17
    34d8:	f1 1d       	adc	r31, r1
    34da:	80 81       	ld	r24, Z
    34dc:	80 33       	cpi	r24, 0x30	; 48
    34de:	19 f4       	brne	.+6      	; 0x34e6 <vfprintf+0x20a>
    34e0:	11 50       	subi	r17, 0x01	; 1
    34e2:	11 11       	cpse	r17, r1
    34e4:	f4 cf       	rjmp	.-24     	; 0x34ce <vfprintf+0x1f2>
    34e6:	97 fe       	sbrs	r9, 7
    34e8:	0e c0       	rjmp	.+28     	; 0x3506 <vfprintf+0x22a>
    34ea:	44 24       	eor	r4, r4
    34ec:	43 94       	inc	r4
    34ee:	41 0e       	add	r4, r17
    34f0:	81 2f       	mov	r24, r17
    34f2:	90 e0       	ldi	r25, 0x00	; 0
    34f4:	c8 16       	cp	r12, r24
    34f6:	d9 06       	cpc	r13, r25
    34f8:	2c f4       	brge	.+10     	; 0x3504 <vfprintf+0x228>
    34fa:	1c 19       	sub	r17, r12
    34fc:	04 c0       	rjmp	.+8      	; 0x3506 <vfprintf+0x22a>
    34fe:	44 24       	eor	r4, r4
    3500:	43 94       	inc	r4
    3502:	01 c0       	rjmp	.+2      	; 0x3506 <vfprintf+0x22a>
    3504:	10 e0       	ldi	r17, 0x00	; 0
    3506:	97 fe       	sbrs	r9, 7
    3508:	06 c0       	rjmp	.+12     	; 0x3516 <vfprintf+0x23a>
    350a:	1c 14       	cp	r1, r12
    350c:	1d 04       	cpc	r1, r13
    350e:	34 f4       	brge	.+12     	; 0x351c <vfprintf+0x240>
    3510:	c6 01       	movw	r24, r12
    3512:	01 96       	adiw	r24, 0x01	; 1
    3514:	05 c0       	rjmp	.+10     	; 0x3520 <vfprintf+0x244>
    3516:	85 e0       	ldi	r24, 0x05	; 5
    3518:	90 e0       	ldi	r25, 0x00	; 0
    351a:	02 c0       	rjmp	.+4      	; 0x3520 <vfprintf+0x244>
    351c:	81 e0       	ldi	r24, 0x01	; 1
    351e:	90 e0       	ldi	r25, 0x00	; 0
    3520:	01 11       	cpse	r16, r1
    3522:	01 96       	adiw	r24, 0x01	; 1
    3524:	11 23       	and	r17, r17
    3526:	31 f0       	breq	.+12     	; 0x3534 <vfprintf+0x258>
    3528:	21 2f       	mov	r18, r17
    352a:	30 e0       	ldi	r19, 0x00	; 0
    352c:	2f 5f       	subi	r18, 0xFF	; 255
    352e:	3f 4f       	sbci	r19, 0xFF	; 255
    3530:	82 0f       	add	r24, r18
    3532:	93 1f       	adc	r25, r19
    3534:	25 2d       	mov	r18, r5
    3536:	30 e0       	ldi	r19, 0x00	; 0
    3538:	82 17       	cp	r24, r18
    353a:	93 07       	cpc	r25, r19
    353c:	14 f4       	brge	.+4      	; 0x3542 <vfprintf+0x266>
    353e:	58 1a       	sub	r5, r24
    3540:	01 c0       	rjmp	.+2      	; 0x3544 <vfprintf+0x268>
    3542:	51 2c       	mov	r5, r1
    3544:	89 2d       	mov	r24, r9
    3546:	89 70       	andi	r24, 0x09	; 9
    3548:	49 f4       	brne	.+18     	; 0x355c <vfprintf+0x280>
    354a:	55 20       	and	r5, r5
    354c:	39 f0       	breq	.+14     	; 0x355c <vfprintf+0x280>
    354e:	b7 01       	movw	r22, r14
    3550:	80 e2       	ldi	r24, 0x20	; 32
    3552:	90 e0       	ldi	r25, 0x00	; 0
    3554:	0e 94 31 1e 	call	0x3c62	; 0x3c62 <fputc>
    3558:	5a 94       	dec	r5
    355a:	f7 cf       	rjmp	.-18     	; 0x354a <vfprintf+0x26e>
    355c:	00 23       	and	r16, r16
    355e:	29 f0       	breq	.+10     	; 0x356a <vfprintf+0x28e>
    3560:	b7 01       	movw	r22, r14
    3562:	80 2f       	mov	r24, r16
    3564:	90 e0       	ldi	r25, 0x00	; 0
    3566:	0e 94 31 1e 	call	0x3c62	; 0x3c62 <fputc>
    356a:	93 fc       	sbrc	r9, 3
    356c:	09 c0       	rjmp	.+18     	; 0x3580 <vfprintf+0x2a4>
    356e:	55 20       	and	r5, r5
    3570:	39 f0       	breq	.+14     	; 0x3580 <vfprintf+0x2a4>
    3572:	b7 01       	movw	r22, r14
    3574:	80 e3       	ldi	r24, 0x30	; 48
    3576:	90 e0       	ldi	r25, 0x00	; 0
    3578:	0e 94 31 1e 	call	0x3c62	; 0x3c62 <fputc>
    357c:	5a 94       	dec	r5
    357e:	f7 cf       	rjmp	.-18     	; 0x356e <vfprintf+0x292>
    3580:	97 fe       	sbrs	r9, 7
    3582:	4c c0       	rjmp	.+152    	; 0x361c <vfprintf+0x340>
    3584:	46 01       	movw	r8, r12
    3586:	d7 fe       	sbrs	r13, 7
    3588:	02 c0       	rjmp	.+4      	; 0x358e <vfprintf+0x2b2>
    358a:	81 2c       	mov	r8, r1
    358c:	91 2c       	mov	r9, r1
    358e:	c6 01       	movw	r24, r12
    3590:	88 19       	sub	r24, r8
    3592:	99 09       	sbc	r25, r9
    3594:	f3 01       	movw	r30, r6
    3596:	e8 0f       	add	r30, r24
    3598:	f9 1f       	adc	r31, r25
    359a:	fe 87       	std	Y+14, r31	; 0x0e
    359c:	ed 87       	std	Y+13, r30	; 0x0d
    359e:	96 01       	movw	r18, r12
    35a0:	24 19       	sub	r18, r4
    35a2:	31 09       	sbc	r19, r1
    35a4:	38 8b       	std	Y+16, r19	; 0x10
    35a6:	2f 87       	std	Y+15, r18	; 0x0f
    35a8:	01 2f       	mov	r16, r17
    35aa:	10 e0       	ldi	r17, 0x00	; 0
    35ac:	11 95       	neg	r17
    35ae:	01 95       	neg	r16
    35b0:	11 09       	sbc	r17, r1
    35b2:	3f ef       	ldi	r19, 0xFF	; 255
    35b4:	83 16       	cp	r8, r19
    35b6:	93 06       	cpc	r9, r19
    35b8:	29 f4       	brne	.+10     	; 0x35c4 <vfprintf+0x2e8>
    35ba:	b7 01       	movw	r22, r14
    35bc:	8e e2       	ldi	r24, 0x2E	; 46
    35be:	90 e0       	ldi	r25, 0x00	; 0
    35c0:	0e 94 31 1e 	call	0x3c62	; 0x3c62 <fputc>
    35c4:	c8 14       	cp	r12, r8
    35c6:	d9 04       	cpc	r13, r9
    35c8:	4c f0       	brlt	.+18     	; 0x35dc <vfprintf+0x300>
    35ca:	8f 85       	ldd	r24, Y+15	; 0x0f
    35cc:	98 89       	ldd	r25, Y+16	; 0x10
    35ce:	88 15       	cp	r24, r8
    35d0:	99 05       	cpc	r25, r9
    35d2:	24 f4       	brge	.+8      	; 0x35dc <vfprintf+0x300>
    35d4:	ed 85       	ldd	r30, Y+13	; 0x0d
    35d6:	fe 85       	ldd	r31, Y+14	; 0x0e
    35d8:	81 81       	ldd	r24, Z+1	; 0x01
    35da:	01 c0       	rjmp	.+2      	; 0x35de <vfprintf+0x302>
    35dc:	80 e3       	ldi	r24, 0x30	; 48
    35de:	f1 e0       	ldi	r31, 0x01	; 1
    35e0:	8f 1a       	sub	r8, r31
    35e2:	91 08       	sbc	r9, r1
    35e4:	2d 85       	ldd	r18, Y+13	; 0x0d
    35e6:	3e 85       	ldd	r19, Y+14	; 0x0e
    35e8:	2f 5f       	subi	r18, 0xFF	; 255
    35ea:	3f 4f       	sbci	r19, 0xFF	; 255
    35ec:	3e 87       	std	Y+14, r19	; 0x0e
    35ee:	2d 87       	std	Y+13, r18	; 0x0d
    35f0:	80 16       	cp	r8, r16
    35f2:	91 06       	cpc	r9, r17
    35f4:	2c f0       	brlt	.+10     	; 0x3600 <vfprintf+0x324>
    35f6:	b7 01       	movw	r22, r14
    35f8:	90 e0       	ldi	r25, 0x00	; 0
    35fa:	0e 94 31 1e 	call	0x3c62	; 0x3c62 <fputc>
    35fe:	d9 cf       	rjmp	.-78     	; 0x35b2 <vfprintf+0x2d6>
    3600:	c8 14       	cp	r12, r8
    3602:	d9 04       	cpc	r13, r9
    3604:	41 f4       	brne	.+16     	; 0x3616 <vfprintf+0x33a>
    3606:	9a 81       	ldd	r25, Y+2	; 0x02
    3608:	96 33       	cpi	r25, 0x36	; 54
    360a:	20 f4       	brcc	.+8      	; 0x3614 <vfprintf+0x338>
    360c:	95 33       	cpi	r25, 0x35	; 53
    360e:	19 f4       	brne	.+6      	; 0x3616 <vfprintf+0x33a>
    3610:	3c 85       	ldd	r19, Y+12	; 0x0c
    3612:	34 ff       	sbrs	r19, 4
    3614:	81 e3       	ldi	r24, 0x31	; 49
    3616:	b7 01       	movw	r22, r14
    3618:	90 e0       	ldi	r25, 0x00	; 0
    361a:	4e c0       	rjmp	.+156    	; 0x36b8 <vfprintf+0x3dc>
    361c:	8a 81       	ldd	r24, Y+2	; 0x02
    361e:	81 33       	cpi	r24, 0x31	; 49
    3620:	19 f0       	breq	.+6      	; 0x3628 <vfprintf+0x34c>
    3622:	9c 85       	ldd	r25, Y+12	; 0x0c
    3624:	9f 7e       	andi	r25, 0xEF	; 239
    3626:	9c 87       	std	Y+12, r25	; 0x0c
    3628:	b7 01       	movw	r22, r14
    362a:	90 e0       	ldi	r25, 0x00	; 0
    362c:	0e 94 31 1e 	call	0x3c62	; 0x3c62 <fputc>
    3630:	11 11       	cpse	r17, r1
    3632:	05 c0       	rjmp	.+10     	; 0x363e <vfprintf+0x362>
    3634:	94 fc       	sbrc	r9, 4
    3636:	18 c0       	rjmp	.+48     	; 0x3668 <vfprintf+0x38c>
    3638:	85 e6       	ldi	r24, 0x65	; 101
    363a:	90 e0       	ldi	r25, 0x00	; 0
    363c:	17 c0       	rjmp	.+46     	; 0x366c <vfprintf+0x390>
    363e:	b7 01       	movw	r22, r14
    3640:	8e e2       	ldi	r24, 0x2E	; 46
    3642:	90 e0       	ldi	r25, 0x00	; 0
    3644:	0e 94 31 1e 	call	0x3c62	; 0x3c62 <fputc>
    3648:	1e 5f       	subi	r17, 0xFE	; 254
    364a:	82 e0       	ldi	r24, 0x02	; 2
    364c:	01 e0       	ldi	r16, 0x01	; 1
    364e:	08 0f       	add	r16, r24
    3650:	f3 01       	movw	r30, r6
    3652:	e8 0f       	add	r30, r24
    3654:	f1 1d       	adc	r31, r1
    3656:	80 81       	ld	r24, Z
    3658:	b7 01       	movw	r22, r14
    365a:	90 e0       	ldi	r25, 0x00	; 0
    365c:	0e 94 31 1e 	call	0x3c62	; 0x3c62 <fputc>
    3660:	80 2f       	mov	r24, r16
    3662:	01 13       	cpse	r16, r17
    3664:	f3 cf       	rjmp	.-26     	; 0x364c <vfprintf+0x370>
    3666:	e6 cf       	rjmp	.-52     	; 0x3634 <vfprintf+0x358>
    3668:	85 e4       	ldi	r24, 0x45	; 69
    366a:	90 e0       	ldi	r25, 0x00	; 0
    366c:	b7 01       	movw	r22, r14
    366e:	0e 94 31 1e 	call	0x3c62	; 0x3c62 <fputc>
    3672:	d7 fc       	sbrc	r13, 7
    3674:	06 c0       	rjmp	.+12     	; 0x3682 <vfprintf+0x3a6>
    3676:	c1 14       	cp	r12, r1
    3678:	d1 04       	cpc	r13, r1
    367a:	41 f4       	brne	.+16     	; 0x368c <vfprintf+0x3b0>
    367c:	ec 85       	ldd	r30, Y+12	; 0x0c
    367e:	e4 ff       	sbrs	r30, 4
    3680:	05 c0       	rjmp	.+10     	; 0x368c <vfprintf+0x3b0>
    3682:	d1 94       	neg	r13
    3684:	c1 94       	neg	r12
    3686:	d1 08       	sbc	r13, r1
    3688:	8d e2       	ldi	r24, 0x2D	; 45
    368a:	01 c0       	rjmp	.+2      	; 0x368e <vfprintf+0x3b2>
    368c:	8b e2       	ldi	r24, 0x2B	; 43
    368e:	b7 01       	movw	r22, r14
    3690:	90 e0       	ldi	r25, 0x00	; 0
    3692:	0e 94 31 1e 	call	0x3c62	; 0x3c62 <fputc>
    3696:	80 e3       	ldi	r24, 0x30	; 48
    3698:	2a e0       	ldi	r18, 0x0A	; 10
    369a:	c2 16       	cp	r12, r18
    369c:	d1 04       	cpc	r13, r1
    369e:	2c f0       	brlt	.+10     	; 0x36aa <vfprintf+0x3ce>
    36a0:	8f 5f       	subi	r24, 0xFF	; 255
    36a2:	fa e0       	ldi	r31, 0x0A	; 10
    36a4:	cf 1a       	sub	r12, r31
    36a6:	d1 08       	sbc	r13, r1
    36a8:	f7 cf       	rjmp	.-18     	; 0x3698 <vfprintf+0x3bc>
    36aa:	b7 01       	movw	r22, r14
    36ac:	90 e0       	ldi	r25, 0x00	; 0
    36ae:	0e 94 31 1e 	call	0x3c62	; 0x3c62 <fputc>
    36b2:	b7 01       	movw	r22, r14
    36b4:	c6 01       	movw	r24, r12
    36b6:	c0 96       	adiw	r24, 0x30	; 48
    36b8:	0e 94 31 1e 	call	0x3c62	; 0x3c62 <fputc>
    36bc:	54 c1       	rjmp	.+680    	; 0x3966 <vfprintf+0x68a>
    36be:	83 36       	cpi	r24, 0x63	; 99
    36c0:	31 f0       	breq	.+12     	; 0x36ce <vfprintf+0x3f2>
    36c2:	83 37       	cpi	r24, 0x73	; 115
    36c4:	79 f0       	breq	.+30     	; 0x36e4 <vfprintf+0x408>
    36c6:	83 35       	cpi	r24, 0x53	; 83
    36c8:	09 f0       	breq	.+2      	; 0x36cc <vfprintf+0x3f0>
    36ca:	56 c0       	rjmp	.+172    	; 0x3778 <vfprintf+0x49c>
    36cc:	20 c0       	rjmp	.+64     	; 0x370e <vfprintf+0x432>
    36ce:	56 01       	movw	r10, r12
    36d0:	32 e0       	ldi	r19, 0x02	; 2
    36d2:	a3 0e       	add	r10, r19
    36d4:	b1 1c       	adc	r11, r1
    36d6:	f6 01       	movw	r30, r12
    36d8:	80 81       	ld	r24, Z
    36da:	89 83       	std	Y+1, r24	; 0x01
    36dc:	01 e0       	ldi	r16, 0x01	; 1
    36de:	10 e0       	ldi	r17, 0x00	; 0
    36e0:	63 01       	movw	r12, r6
    36e2:	12 c0       	rjmp	.+36     	; 0x3708 <vfprintf+0x42c>
    36e4:	56 01       	movw	r10, r12
    36e6:	f2 e0       	ldi	r31, 0x02	; 2
    36e8:	af 0e       	add	r10, r31
    36ea:	b1 1c       	adc	r11, r1
    36ec:	f6 01       	movw	r30, r12
    36ee:	c0 80       	ld	r12, Z
    36f0:	d1 80       	ldd	r13, Z+1	; 0x01
    36f2:	96 fe       	sbrs	r9, 6
    36f4:	03 c0       	rjmp	.+6      	; 0x36fc <vfprintf+0x420>
    36f6:	61 2f       	mov	r22, r17
    36f8:	70 e0       	ldi	r23, 0x00	; 0
    36fa:	02 c0       	rjmp	.+4      	; 0x3700 <vfprintf+0x424>
    36fc:	6f ef       	ldi	r22, 0xFF	; 255
    36fe:	7f ef       	ldi	r23, 0xFF	; 255
    3700:	c6 01       	movw	r24, r12
    3702:	0e 94 26 1e 	call	0x3c4c	; 0x3c4c <strnlen>
    3706:	8c 01       	movw	r16, r24
    3708:	f9 2d       	mov	r31, r9
    370a:	ff 77       	andi	r31, 0x7F	; 127
    370c:	14 c0       	rjmp	.+40     	; 0x3736 <vfprintf+0x45a>
    370e:	56 01       	movw	r10, r12
    3710:	22 e0       	ldi	r18, 0x02	; 2
    3712:	a2 0e       	add	r10, r18
    3714:	b1 1c       	adc	r11, r1
    3716:	f6 01       	movw	r30, r12
    3718:	c0 80       	ld	r12, Z
    371a:	d1 80       	ldd	r13, Z+1	; 0x01
    371c:	96 fe       	sbrs	r9, 6
    371e:	03 c0       	rjmp	.+6      	; 0x3726 <vfprintf+0x44a>
    3720:	61 2f       	mov	r22, r17
    3722:	70 e0       	ldi	r23, 0x00	; 0
    3724:	02 c0       	rjmp	.+4      	; 0x372a <vfprintf+0x44e>
    3726:	6f ef       	ldi	r22, 0xFF	; 255
    3728:	7f ef       	ldi	r23, 0xFF	; 255
    372a:	c6 01       	movw	r24, r12
    372c:	0e 94 14 1e 	call	0x3c28	; 0x3c28 <strnlen_P>
    3730:	8c 01       	movw	r16, r24
    3732:	f9 2d       	mov	r31, r9
    3734:	f0 68       	ori	r31, 0x80	; 128
    3736:	9f 2e       	mov	r9, r31
    3738:	f3 fd       	sbrc	r31, 3
    373a:	1a c0       	rjmp	.+52     	; 0x3770 <vfprintf+0x494>
    373c:	85 2d       	mov	r24, r5
    373e:	90 e0       	ldi	r25, 0x00	; 0
    3740:	08 17       	cp	r16, r24
    3742:	19 07       	cpc	r17, r25
    3744:	a8 f4       	brcc	.+42     	; 0x3770 <vfprintf+0x494>
    3746:	b7 01       	movw	r22, r14
    3748:	80 e2       	ldi	r24, 0x20	; 32
    374a:	90 e0       	ldi	r25, 0x00	; 0
    374c:	0e 94 31 1e 	call	0x3c62	; 0x3c62 <fputc>
    3750:	5a 94       	dec	r5
    3752:	f4 cf       	rjmp	.-24     	; 0x373c <vfprintf+0x460>
    3754:	f6 01       	movw	r30, r12
    3756:	97 fc       	sbrc	r9, 7
    3758:	85 91       	lpm	r24, Z+
    375a:	97 fe       	sbrs	r9, 7
    375c:	81 91       	ld	r24, Z+
    375e:	6f 01       	movw	r12, r30
    3760:	b7 01       	movw	r22, r14
    3762:	90 e0       	ldi	r25, 0x00	; 0
    3764:	0e 94 31 1e 	call	0x3c62	; 0x3c62 <fputc>
    3768:	51 10       	cpse	r5, r1
    376a:	5a 94       	dec	r5
    376c:	01 50       	subi	r16, 0x01	; 1
    376e:	11 09       	sbc	r17, r1
    3770:	01 15       	cp	r16, r1
    3772:	11 05       	cpc	r17, r1
    3774:	79 f7       	brne	.-34     	; 0x3754 <vfprintf+0x478>
    3776:	f7 c0       	rjmp	.+494    	; 0x3966 <vfprintf+0x68a>
    3778:	84 36       	cpi	r24, 0x64	; 100
    377a:	11 f0       	breq	.+4      	; 0x3780 <vfprintf+0x4a4>
    377c:	89 36       	cpi	r24, 0x69	; 105
    377e:	61 f5       	brne	.+88     	; 0x37d8 <vfprintf+0x4fc>
    3780:	56 01       	movw	r10, r12
    3782:	97 fe       	sbrs	r9, 7
    3784:	09 c0       	rjmp	.+18     	; 0x3798 <vfprintf+0x4bc>
    3786:	24 e0       	ldi	r18, 0x04	; 4
    3788:	a2 0e       	add	r10, r18
    378a:	b1 1c       	adc	r11, r1
    378c:	f6 01       	movw	r30, r12
    378e:	60 81       	ld	r22, Z
    3790:	71 81       	ldd	r23, Z+1	; 0x01
    3792:	82 81       	ldd	r24, Z+2	; 0x02
    3794:	93 81       	ldd	r25, Z+3	; 0x03
    3796:	0a c0       	rjmp	.+20     	; 0x37ac <vfprintf+0x4d0>
    3798:	f2 e0       	ldi	r31, 0x02	; 2
    379a:	af 0e       	add	r10, r31
    379c:	b1 1c       	adc	r11, r1
    379e:	f6 01       	movw	r30, r12
    37a0:	60 81       	ld	r22, Z
    37a2:	71 81       	ldd	r23, Z+1	; 0x01
    37a4:	07 2e       	mov	r0, r23
    37a6:	00 0c       	add	r0, r0
    37a8:	88 0b       	sbc	r24, r24
    37aa:	99 0b       	sbc	r25, r25
    37ac:	f9 2d       	mov	r31, r9
    37ae:	ff 76       	andi	r31, 0x6F	; 111
    37b0:	9f 2e       	mov	r9, r31
    37b2:	97 ff       	sbrs	r25, 7
    37b4:	09 c0       	rjmp	.+18     	; 0x37c8 <vfprintf+0x4ec>
    37b6:	90 95       	com	r25
    37b8:	80 95       	com	r24
    37ba:	70 95       	com	r23
    37bc:	61 95       	neg	r22
    37be:	7f 4f       	sbci	r23, 0xFF	; 255
    37c0:	8f 4f       	sbci	r24, 0xFF	; 255
    37c2:	9f 4f       	sbci	r25, 0xFF	; 255
    37c4:	f0 68       	ori	r31, 0x80	; 128
    37c6:	9f 2e       	mov	r9, r31
    37c8:	2a e0       	ldi	r18, 0x0A	; 10
    37ca:	30 e0       	ldi	r19, 0x00	; 0
    37cc:	a3 01       	movw	r20, r6
    37ce:	0e 94 dc 1e 	call	0x3db8	; 0x3db8 <__ultoa_invert>
    37d2:	c8 2e       	mov	r12, r24
    37d4:	c6 18       	sub	r12, r6
    37d6:	3f c0       	rjmp	.+126    	; 0x3856 <vfprintf+0x57a>
    37d8:	09 2d       	mov	r16, r9
    37da:	85 37       	cpi	r24, 0x75	; 117
    37dc:	21 f4       	brne	.+8      	; 0x37e6 <vfprintf+0x50a>
    37de:	0f 7e       	andi	r16, 0xEF	; 239
    37e0:	2a e0       	ldi	r18, 0x0A	; 10
    37e2:	30 e0       	ldi	r19, 0x00	; 0
    37e4:	1d c0       	rjmp	.+58     	; 0x3820 <vfprintf+0x544>
    37e6:	09 7f       	andi	r16, 0xF9	; 249
    37e8:	8f 36       	cpi	r24, 0x6F	; 111
    37ea:	91 f0       	breq	.+36     	; 0x3810 <vfprintf+0x534>
    37ec:	18 f4       	brcc	.+6      	; 0x37f4 <vfprintf+0x518>
    37ee:	88 35       	cpi	r24, 0x58	; 88
    37f0:	59 f0       	breq	.+22     	; 0x3808 <vfprintf+0x52c>
    37f2:	c3 c0       	rjmp	.+390    	; 0x397a <vfprintf+0x69e>
    37f4:	80 37       	cpi	r24, 0x70	; 112
    37f6:	19 f0       	breq	.+6      	; 0x37fe <vfprintf+0x522>
    37f8:	88 37       	cpi	r24, 0x78	; 120
    37fa:	11 f0       	breq	.+4      	; 0x3800 <vfprintf+0x524>
    37fc:	be c0       	rjmp	.+380    	; 0x397a <vfprintf+0x69e>
    37fe:	00 61       	ori	r16, 0x10	; 16
    3800:	04 ff       	sbrs	r16, 4
    3802:	09 c0       	rjmp	.+18     	; 0x3816 <vfprintf+0x53a>
    3804:	04 60       	ori	r16, 0x04	; 4
    3806:	07 c0       	rjmp	.+14     	; 0x3816 <vfprintf+0x53a>
    3808:	94 fe       	sbrs	r9, 4
    380a:	08 c0       	rjmp	.+16     	; 0x381c <vfprintf+0x540>
    380c:	06 60       	ori	r16, 0x06	; 6
    380e:	06 c0       	rjmp	.+12     	; 0x381c <vfprintf+0x540>
    3810:	28 e0       	ldi	r18, 0x08	; 8
    3812:	30 e0       	ldi	r19, 0x00	; 0
    3814:	05 c0       	rjmp	.+10     	; 0x3820 <vfprintf+0x544>
    3816:	20 e1       	ldi	r18, 0x10	; 16
    3818:	30 e0       	ldi	r19, 0x00	; 0
    381a:	02 c0       	rjmp	.+4      	; 0x3820 <vfprintf+0x544>
    381c:	20 e1       	ldi	r18, 0x10	; 16
    381e:	32 e0       	ldi	r19, 0x02	; 2
    3820:	56 01       	movw	r10, r12
    3822:	07 ff       	sbrs	r16, 7
    3824:	09 c0       	rjmp	.+18     	; 0x3838 <vfprintf+0x55c>
    3826:	84 e0       	ldi	r24, 0x04	; 4
    3828:	a8 0e       	add	r10, r24
    382a:	b1 1c       	adc	r11, r1
    382c:	f6 01       	movw	r30, r12
    382e:	60 81       	ld	r22, Z
    3830:	71 81       	ldd	r23, Z+1	; 0x01
    3832:	82 81       	ldd	r24, Z+2	; 0x02
    3834:	93 81       	ldd	r25, Z+3	; 0x03
    3836:	08 c0       	rjmp	.+16     	; 0x3848 <vfprintf+0x56c>
    3838:	f2 e0       	ldi	r31, 0x02	; 2
    383a:	af 0e       	add	r10, r31
    383c:	b1 1c       	adc	r11, r1
    383e:	f6 01       	movw	r30, r12
    3840:	60 81       	ld	r22, Z
    3842:	71 81       	ldd	r23, Z+1	; 0x01
    3844:	80 e0       	ldi	r24, 0x00	; 0
    3846:	90 e0       	ldi	r25, 0x00	; 0
    3848:	a3 01       	movw	r20, r6
    384a:	0e 94 dc 1e 	call	0x3db8	; 0x3db8 <__ultoa_invert>
    384e:	c8 2e       	mov	r12, r24
    3850:	c6 18       	sub	r12, r6
    3852:	0f 77       	andi	r16, 0x7F	; 127
    3854:	90 2e       	mov	r9, r16
    3856:	96 fe       	sbrs	r9, 6
    3858:	0b c0       	rjmp	.+22     	; 0x3870 <vfprintf+0x594>
    385a:	09 2d       	mov	r16, r9
    385c:	0e 7f       	andi	r16, 0xFE	; 254
    385e:	c1 16       	cp	r12, r17
    3860:	50 f4       	brcc	.+20     	; 0x3876 <vfprintf+0x59a>
    3862:	94 fe       	sbrs	r9, 4
    3864:	0a c0       	rjmp	.+20     	; 0x387a <vfprintf+0x59e>
    3866:	92 fc       	sbrc	r9, 2
    3868:	08 c0       	rjmp	.+16     	; 0x387a <vfprintf+0x59e>
    386a:	09 2d       	mov	r16, r9
    386c:	0e 7e       	andi	r16, 0xEE	; 238
    386e:	05 c0       	rjmp	.+10     	; 0x387a <vfprintf+0x59e>
    3870:	dc 2c       	mov	r13, r12
    3872:	09 2d       	mov	r16, r9
    3874:	03 c0       	rjmp	.+6      	; 0x387c <vfprintf+0x5a0>
    3876:	dc 2c       	mov	r13, r12
    3878:	01 c0       	rjmp	.+2      	; 0x387c <vfprintf+0x5a0>
    387a:	d1 2e       	mov	r13, r17
    387c:	04 ff       	sbrs	r16, 4
    387e:	0d c0       	rjmp	.+26     	; 0x389a <vfprintf+0x5be>
    3880:	fe 01       	movw	r30, r28
    3882:	ec 0d       	add	r30, r12
    3884:	f1 1d       	adc	r31, r1
    3886:	80 81       	ld	r24, Z
    3888:	80 33       	cpi	r24, 0x30	; 48
    388a:	11 f4       	brne	.+4      	; 0x3890 <vfprintf+0x5b4>
    388c:	09 7e       	andi	r16, 0xE9	; 233
    388e:	09 c0       	rjmp	.+18     	; 0x38a2 <vfprintf+0x5c6>
    3890:	02 ff       	sbrs	r16, 2
    3892:	06 c0       	rjmp	.+12     	; 0x38a0 <vfprintf+0x5c4>
    3894:	d3 94       	inc	r13
    3896:	d3 94       	inc	r13
    3898:	04 c0       	rjmp	.+8      	; 0x38a2 <vfprintf+0x5c6>
    389a:	80 2f       	mov	r24, r16
    389c:	86 78       	andi	r24, 0x86	; 134
    389e:	09 f0       	breq	.+2      	; 0x38a2 <vfprintf+0x5c6>
    38a0:	d3 94       	inc	r13
    38a2:	03 fd       	sbrc	r16, 3
    38a4:	11 c0       	rjmp	.+34     	; 0x38c8 <vfprintf+0x5ec>
    38a6:	00 ff       	sbrs	r16, 0
    38a8:	06 c0       	rjmp	.+12     	; 0x38b6 <vfprintf+0x5da>
    38aa:	1c 2d       	mov	r17, r12
    38ac:	d5 14       	cp	r13, r5
    38ae:	80 f4       	brcc	.+32     	; 0x38d0 <vfprintf+0x5f4>
    38b0:	15 0d       	add	r17, r5
    38b2:	1d 19       	sub	r17, r13
    38b4:	0d c0       	rjmp	.+26     	; 0x38d0 <vfprintf+0x5f4>
    38b6:	d5 14       	cp	r13, r5
    38b8:	58 f4       	brcc	.+22     	; 0x38d0 <vfprintf+0x5f4>
    38ba:	b7 01       	movw	r22, r14
    38bc:	80 e2       	ldi	r24, 0x20	; 32
    38be:	90 e0       	ldi	r25, 0x00	; 0
    38c0:	0e 94 31 1e 	call	0x3c62	; 0x3c62 <fputc>
    38c4:	d3 94       	inc	r13
    38c6:	f7 cf       	rjmp	.-18     	; 0x38b6 <vfprintf+0x5da>
    38c8:	d5 14       	cp	r13, r5
    38ca:	10 f4       	brcc	.+4      	; 0x38d0 <vfprintf+0x5f4>
    38cc:	5d 18       	sub	r5, r13
    38ce:	01 c0       	rjmp	.+2      	; 0x38d2 <vfprintf+0x5f6>
    38d0:	51 2c       	mov	r5, r1
    38d2:	04 ff       	sbrs	r16, 4
    38d4:	10 c0       	rjmp	.+32     	; 0x38f6 <vfprintf+0x61a>
    38d6:	b7 01       	movw	r22, r14
    38d8:	80 e3       	ldi	r24, 0x30	; 48
    38da:	90 e0       	ldi	r25, 0x00	; 0
    38dc:	0e 94 31 1e 	call	0x3c62	; 0x3c62 <fputc>
    38e0:	02 ff       	sbrs	r16, 2
    38e2:	17 c0       	rjmp	.+46     	; 0x3912 <vfprintf+0x636>
    38e4:	01 fd       	sbrc	r16, 1
    38e6:	03 c0       	rjmp	.+6      	; 0x38ee <vfprintf+0x612>
    38e8:	88 e7       	ldi	r24, 0x78	; 120
    38ea:	90 e0       	ldi	r25, 0x00	; 0
    38ec:	02 c0       	rjmp	.+4      	; 0x38f2 <vfprintf+0x616>
    38ee:	88 e5       	ldi	r24, 0x58	; 88
    38f0:	90 e0       	ldi	r25, 0x00	; 0
    38f2:	b7 01       	movw	r22, r14
    38f4:	0c c0       	rjmp	.+24     	; 0x390e <vfprintf+0x632>
    38f6:	80 2f       	mov	r24, r16
    38f8:	86 78       	andi	r24, 0x86	; 134
    38fa:	59 f0       	breq	.+22     	; 0x3912 <vfprintf+0x636>
    38fc:	01 ff       	sbrs	r16, 1
    38fe:	02 c0       	rjmp	.+4      	; 0x3904 <vfprintf+0x628>
    3900:	8b e2       	ldi	r24, 0x2B	; 43
    3902:	01 c0       	rjmp	.+2      	; 0x3906 <vfprintf+0x62a>
    3904:	80 e2       	ldi	r24, 0x20	; 32
    3906:	07 fd       	sbrc	r16, 7
    3908:	8d e2       	ldi	r24, 0x2D	; 45
    390a:	b7 01       	movw	r22, r14
    390c:	90 e0       	ldi	r25, 0x00	; 0
    390e:	0e 94 31 1e 	call	0x3c62	; 0x3c62 <fputc>
    3912:	c1 16       	cp	r12, r17
    3914:	38 f4       	brcc	.+14     	; 0x3924 <vfprintf+0x648>
    3916:	b7 01       	movw	r22, r14
    3918:	80 e3       	ldi	r24, 0x30	; 48
    391a:	90 e0       	ldi	r25, 0x00	; 0
    391c:	0e 94 31 1e 	call	0x3c62	; 0x3c62 <fputc>
    3920:	11 50       	subi	r17, 0x01	; 1
    3922:	f7 cf       	rjmp	.-18     	; 0x3912 <vfprintf+0x636>
    3924:	ca 94       	dec	r12
    3926:	f3 01       	movw	r30, r6
    3928:	ec 0d       	add	r30, r12
    392a:	f1 1d       	adc	r31, r1
    392c:	80 81       	ld	r24, Z
    392e:	b7 01       	movw	r22, r14
    3930:	90 e0       	ldi	r25, 0x00	; 0
    3932:	0e 94 31 1e 	call	0x3c62	; 0x3c62 <fputc>
    3936:	c1 10       	cpse	r12, r1
    3938:	f5 cf       	rjmp	.-22     	; 0x3924 <vfprintf+0x648>
    393a:	15 c0       	rjmp	.+42     	; 0x3966 <vfprintf+0x68a>
    393c:	f4 e0       	ldi	r31, 0x04	; 4
    393e:	f5 15       	cp	r31, r5
    3940:	60 f5       	brcc	.+88     	; 0x399a <vfprintf+0x6be>
    3942:	84 e0       	ldi	r24, 0x04	; 4
    3944:	58 1a       	sub	r5, r24
    3946:	93 fe       	sbrs	r9, 3
    3948:	1f c0       	rjmp	.+62     	; 0x3988 <vfprintf+0x6ac>
    394a:	01 11       	cpse	r16, r1
    394c:	27 c0       	rjmp	.+78     	; 0x399c <vfprintf+0x6c0>
    394e:	2c 85       	ldd	r18, Y+12	; 0x0c
    3950:	23 ff       	sbrs	r18, 3
    3952:	2a c0       	rjmp	.+84     	; 0x39a8 <vfprintf+0x6cc>
    3954:	04 eb       	ldi	r16, 0xB4	; 180
    3956:	10 e0       	ldi	r17, 0x00	; 0
    3958:	39 2d       	mov	r19, r9
    395a:	30 71       	andi	r19, 0x10	; 16
    395c:	93 2e       	mov	r9, r19
    395e:	f8 01       	movw	r30, r16
    3960:	84 91       	lpm	r24, Z
    3962:	81 11       	cpse	r24, r1
    3964:	24 c0       	rjmp	.+72     	; 0x39ae <vfprintf+0x6d2>
    3966:	55 20       	and	r5, r5
    3968:	09 f4       	brne	.+2      	; 0x396c <vfprintf+0x690>
    396a:	e4 cc       	rjmp	.-1592   	; 0x3334 <vfprintf+0x58>
    396c:	b7 01       	movw	r22, r14
    396e:	80 e2       	ldi	r24, 0x20	; 32
    3970:	90 e0       	ldi	r25, 0x00	; 0
    3972:	0e 94 31 1e 	call	0x3c62	; 0x3c62 <fputc>
    3976:	5a 94       	dec	r5
    3978:	f6 cf       	rjmp	.-20     	; 0x3966 <vfprintf+0x68a>
    397a:	f7 01       	movw	r30, r14
    397c:	86 81       	ldd	r24, Z+6	; 0x06
    397e:	97 81       	ldd	r25, Z+7	; 0x07
    3980:	26 c0       	rjmp	.+76     	; 0x39ce <vfprintf+0x6f2>
    3982:	8f ef       	ldi	r24, 0xFF	; 255
    3984:	9f ef       	ldi	r25, 0xFF	; 255
    3986:	23 c0       	rjmp	.+70     	; 0x39ce <vfprintf+0x6f2>
    3988:	b7 01       	movw	r22, r14
    398a:	80 e2       	ldi	r24, 0x20	; 32
    398c:	90 e0       	ldi	r25, 0x00	; 0
    398e:	0e 94 31 1e 	call	0x3c62	; 0x3c62 <fputc>
    3992:	5a 94       	dec	r5
    3994:	51 10       	cpse	r5, r1
    3996:	f8 cf       	rjmp	.-16     	; 0x3988 <vfprintf+0x6ac>
    3998:	d8 cf       	rjmp	.-80     	; 0x394a <vfprintf+0x66e>
    399a:	51 2c       	mov	r5, r1
    399c:	b7 01       	movw	r22, r14
    399e:	80 2f       	mov	r24, r16
    39a0:	90 e0       	ldi	r25, 0x00	; 0
    39a2:	0e 94 31 1e 	call	0x3c62	; 0x3c62 <fputc>
    39a6:	d3 cf       	rjmp	.-90     	; 0x394e <vfprintf+0x672>
    39a8:	08 eb       	ldi	r16, 0xB8	; 184
    39aa:	10 e0       	ldi	r17, 0x00	; 0
    39ac:	d5 cf       	rjmp	.-86     	; 0x3958 <vfprintf+0x67c>
    39ae:	91 10       	cpse	r9, r1
    39b0:	80 52       	subi	r24, 0x20	; 32
    39b2:	b7 01       	movw	r22, r14
    39b4:	90 e0       	ldi	r25, 0x00	; 0
    39b6:	0e 94 31 1e 	call	0x3c62	; 0x3c62 <fputc>
    39ba:	0f 5f       	subi	r16, 0xFF	; 255
    39bc:	1f 4f       	sbci	r17, 0xFF	; 255
    39be:	cf cf       	rjmp	.-98     	; 0x395e <vfprintf+0x682>
    39c0:	23 e0       	ldi	r18, 0x03	; 3
    39c2:	25 15       	cp	r18, r5
    39c4:	10 f4       	brcc	.+4      	; 0x39ca <vfprintf+0x6ee>
    39c6:	83 e0       	ldi	r24, 0x03	; 3
    39c8:	bd cf       	rjmp	.-134    	; 0x3944 <vfprintf+0x668>
    39ca:	51 2c       	mov	r5, r1
    39cc:	c0 cf       	rjmp	.-128    	; 0x394e <vfprintf+0x672>
    39ce:	60 96       	adiw	r28, 0x10	; 16
    39d0:	e2 e1       	ldi	r30, 0x12	; 18
    39d2:	0c 94 12 1d 	jmp	0x3a24	; 0x3a24 <__epilogue_restores__>

000039d6 <__muluhisi3>:
    39d6:	0e 94 2d 1d 	call	0x3a5a	; 0x3a5a <__umulhisi3>
    39da:	a5 9f       	mul	r26, r21
    39dc:	90 0d       	add	r25, r0
    39de:	b4 9f       	mul	r27, r20
    39e0:	90 0d       	add	r25, r0
    39e2:	a4 9f       	mul	r26, r20
    39e4:	80 0d       	add	r24, r0
    39e6:	91 1d       	adc	r25, r1
    39e8:	11 24       	eor	r1, r1
    39ea:	08 95       	ret

000039ec <__prologue_saves__>:
    39ec:	2f 92       	push	r2
    39ee:	3f 92       	push	r3
    39f0:	4f 92       	push	r4
    39f2:	5f 92       	push	r5
    39f4:	6f 92       	push	r6
    39f6:	7f 92       	push	r7
    39f8:	8f 92       	push	r8
    39fa:	9f 92       	push	r9
    39fc:	af 92       	push	r10
    39fe:	bf 92       	push	r11
    3a00:	cf 92       	push	r12
    3a02:	df 92       	push	r13
    3a04:	ef 92       	push	r14
    3a06:	ff 92       	push	r15
    3a08:	0f 93       	push	r16
    3a0a:	1f 93       	push	r17
    3a0c:	cf 93       	push	r28
    3a0e:	df 93       	push	r29
    3a10:	cd b7       	in	r28, 0x3d	; 61
    3a12:	de b7       	in	r29, 0x3e	; 62
    3a14:	ca 1b       	sub	r28, r26
    3a16:	db 0b       	sbc	r29, r27
    3a18:	0f b6       	in	r0, 0x3f	; 63
    3a1a:	f8 94       	cli
    3a1c:	de bf       	out	0x3e, r29	; 62
    3a1e:	0f be       	out	0x3f, r0	; 63
    3a20:	cd bf       	out	0x3d, r28	; 61
    3a22:	09 94       	ijmp

00003a24 <__epilogue_restores__>:
    3a24:	2a 88       	ldd	r2, Y+18	; 0x12
    3a26:	39 88       	ldd	r3, Y+17	; 0x11
    3a28:	48 88       	ldd	r4, Y+16	; 0x10
    3a2a:	5f 84       	ldd	r5, Y+15	; 0x0f
    3a2c:	6e 84       	ldd	r6, Y+14	; 0x0e
    3a2e:	7d 84       	ldd	r7, Y+13	; 0x0d
    3a30:	8c 84       	ldd	r8, Y+12	; 0x0c
    3a32:	9b 84       	ldd	r9, Y+11	; 0x0b
    3a34:	aa 84       	ldd	r10, Y+10	; 0x0a
    3a36:	b9 84       	ldd	r11, Y+9	; 0x09
    3a38:	c8 84       	ldd	r12, Y+8	; 0x08
    3a3a:	df 80       	ldd	r13, Y+7	; 0x07
    3a3c:	ee 80       	ldd	r14, Y+6	; 0x06
    3a3e:	fd 80       	ldd	r15, Y+5	; 0x05
    3a40:	0c 81       	ldd	r16, Y+4	; 0x04
    3a42:	1b 81       	ldd	r17, Y+3	; 0x03
    3a44:	aa 81       	ldd	r26, Y+2	; 0x02
    3a46:	b9 81       	ldd	r27, Y+1	; 0x01
    3a48:	ce 0f       	add	r28, r30
    3a4a:	d1 1d       	adc	r29, r1
    3a4c:	0f b6       	in	r0, 0x3f	; 63
    3a4e:	f8 94       	cli
    3a50:	de bf       	out	0x3e, r29	; 62
    3a52:	0f be       	out	0x3f, r0	; 63
    3a54:	cd bf       	out	0x3d, r28	; 61
    3a56:	ed 01       	movw	r28, r26
    3a58:	08 95       	ret

00003a5a <__umulhisi3>:
    3a5a:	a2 9f       	mul	r26, r18
    3a5c:	b0 01       	movw	r22, r0
    3a5e:	b3 9f       	mul	r27, r19
    3a60:	c0 01       	movw	r24, r0
    3a62:	a3 9f       	mul	r26, r19
    3a64:	70 0d       	add	r23, r0
    3a66:	81 1d       	adc	r24, r1
    3a68:	11 24       	eor	r1, r1
    3a6a:	91 1d       	adc	r25, r1
    3a6c:	b2 9f       	mul	r27, r18
    3a6e:	70 0d       	add	r23, r0
    3a70:	81 1d       	adc	r24, r1
    3a72:	11 24       	eor	r1, r1
    3a74:	91 1d       	adc	r25, r1
    3a76:	08 95       	ret

00003a78 <__ftoa_engine>:
    3a78:	28 30       	cpi	r18, 0x08	; 8
    3a7a:	08 f0       	brcs	.+2      	; 0x3a7e <__ftoa_engine+0x6>
    3a7c:	27 e0       	ldi	r18, 0x07	; 7
    3a7e:	33 27       	eor	r19, r19
    3a80:	da 01       	movw	r26, r20
    3a82:	99 0f       	add	r25, r25
    3a84:	31 1d       	adc	r19, r1
    3a86:	87 fd       	sbrc	r24, 7
    3a88:	91 60       	ori	r25, 0x01	; 1
    3a8a:	00 96       	adiw	r24, 0x00	; 0
    3a8c:	61 05       	cpc	r22, r1
    3a8e:	71 05       	cpc	r23, r1
    3a90:	39 f4       	brne	.+14     	; 0x3aa0 <__ftoa_engine+0x28>
    3a92:	32 60       	ori	r19, 0x02	; 2
    3a94:	2e 5f       	subi	r18, 0xFE	; 254
    3a96:	3d 93       	st	X+, r19
    3a98:	30 e3       	ldi	r19, 0x30	; 48
    3a9a:	2a 95       	dec	r18
    3a9c:	e1 f7       	brne	.-8      	; 0x3a96 <__ftoa_engine+0x1e>
    3a9e:	08 95       	ret
    3aa0:	9f 3f       	cpi	r25, 0xFF	; 255
    3aa2:	30 f0       	brcs	.+12     	; 0x3ab0 <__ftoa_engine+0x38>
    3aa4:	80 38       	cpi	r24, 0x80	; 128
    3aa6:	71 05       	cpc	r23, r1
    3aa8:	61 05       	cpc	r22, r1
    3aaa:	09 f0       	breq	.+2      	; 0x3aae <__ftoa_engine+0x36>
    3aac:	3c 5f       	subi	r19, 0xFC	; 252
    3aae:	3c 5f       	subi	r19, 0xFC	; 252
    3ab0:	3d 93       	st	X+, r19
    3ab2:	91 30       	cpi	r25, 0x01	; 1
    3ab4:	08 f0       	brcs	.+2      	; 0x3ab8 <__ftoa_engine+0x40>
    3ab6:	80 68       	ori	r24, 0x80	; 128
    3ab8:	91 1d       	adc	r25, r1
    3aba:	df 93       	push	r29
    3abc:	cf 93       	push	r28
    3abe:	1f 93       	push	r17
    3ac0:	0f 93       	push	r16
    3ac2:	ff 92       	push	r15
    3ac4:	ef 92       	push	r14
    3ac6:	19 2f       	mov	r17, r25
    3ac8:	98 7f       	andi	r25, 0xF8	; 248
    3aca:	96 95       	lsr	r25
    3acc:	e9 2f       	mov	r30, r25
    3ace:	96 95       	lsr	r25
    3ad0:	96 95       	lsr	r25
    3ad2:	e9 0f       	add	r30, r25
    3ad4:	ff 27       	eor	r31, r31
    3ad6:	ea 5e       	subi	r30, 0xEA	; 234
    3ad8:	fe 4f       	sbci	r31, 0xFE	; 254
    3ada:	99 27       	eor	r25, r25
    3adc:	33 27       	eor	r19, r19
    3ade:	ee 24       	eor	r14, r14
    3ae0:	ff 24       	eor	r15, r15
    3ae2:	a7 01       	movw	r20, r14
    3ae4:	e7 01       	movw	r28, r14
    3ae6:	05 90       	lpm	r0, Z+
    3ae8:	08 94       	sec
    3aea:	07 94       	ror	r0
    3aec:	28 f4       	brcc	.+10     	; 0x3af8 <__ftoa_engine+0x80>
    3aee:	36 0f       	add	r19, r22
    3af0:	e7 1e       	adc	r14, r23
    3af2:	f8 1e       	adc	r15, r24
    3af4:	49 1f       	adc	r20, r25
    3af6:	51 1d       	adc	r21, r1
    3af8:	66 0f       	add	r22, r22
    3afa:	77 1f       	adc	r23, r23
    3afc:	88 1f       	adc	r24, r24
    3afe:	99 1f       	adc	r25, r25
    3b00:	06 94       	lsr	r0
    3b02:	a1 f7       	brne	.-24     	; 0x3aec <__ftoa_engine+0x74>
    3b04:	05 90       	lpm	r0, Z+
    3b06:	07 94       	ror	r0
    3b08:	28 f4       	brcc	.+10     	; 0x3b14 <__ftoa_engine+0x9c>
    3b0a:	e7 0e       	add	r14, r23
    3b0c:	f8 1e       	adc	r15, r24
    3b0e:	49 1f       	adc	r20, r25
    3b10:	56 1f       	adc	r21, r22
    3b12:	c1 1d       	adc	r28, r1
    3b14:	77 0f       	add	r23, r23
    3b16:	88 1f       	adc	r24, r24
    3b18:	99 1f       	adc	r25, r25
    3b1a:	66 1f       	adc	r22, r22
    3b1c:	06 94       	lsr	r0
    3b1e:	a1 f7       	brne	.-24     	; 0x3b08 <__ftoa_engine+0x90>
    3b20:	05 90       	lpm	r0, Z+
    3b22:	07 94       	ror	r0
    3b24:	28 f4       	brcc	.+10     	; 0x3b30 <__ftoa_engine+0xb8>
    3b26:	f8 0e       	add	r15, r24
    3b28:	49 1f       	adc	r20, r25
    3b2a:	56 1f       	adc	r21, r22
    3b2c:	c7 1f       	adc	r28, r23
    3b2e:	d1 1d       	adc	r29, r1
    3b30:	88 0f       	add	r24, r24
    3b32:	99 1f       	adc	r25, r25
    3b34:	66 1f       	adc	r22, r22
    3b36:	77 1f       	adc	r23, r23
    3b38:	06 94       	lsr	r0
    3b3a:	a1 f7       	brne	.-24     	; 0x3b24 <__ftoa_engine+0xac>
    3b3c:	05 90       	lpm	r0, Z+
    3b3e:	07 94       	ror	r0
    3b40:	20 f4       	brcc	.+8      	; 0x3b4a <__ftoa_engine+0xd2>
    3b42:	49 0f       	add	r20, r25
    3b44:	56 1f       	adc	r21, r22
    3b46:	c7 1f       	adc	r28, r23
    3b48:	d8 1f       	adc	r29, r24
    3b4a:	99 0f       	add	r25, r25
    3b4c:	66 1f       	adc	r22, r22
    3b4e:	77 1f       	adc	r23, r23
    3b50:	88 1f       	adc	r24, r24
    3b52:	06 94       	lsr	r0
    3b54:	a9 f7       	brne	.-22     	; 0x3b40 <__ftoa_engine+0xc8>
    3b56:	84 91       	lpm	r24, Z
    3b58:	10 95       	com	r17
    3b5a:	17 70       	andi	r17, 0x07	; 7
    3b5c:	41 f0       	breq	.+16     	; 0x3b6e <__ftoa_engine+0xf6>
    3b5e:	d6 95       	lsr	r29
    3b60:	c7 95       	ror	r28
    3b62:	57 95       	ror	r21
    3b64:	47 95       	ror	r20
    3b66:	f7 94       	ror	r15
    3b68:	e7 94       	ror	r14
    3b6a:	1a 95       	dec	r17
    3b6c:	c1 f7       	brne	.-16     	; 0x3b5e <__ftoa_engine+0xe6>
    3b6e:	ec eb       	ldi	r30, 0xBC	; 188
    3b70:	f0 e0       	ldi	r31, 0x00	; 0
    3b72:	68 94       	set
    3b74:	15 90       	lpm	r1, Z+
    3b76:	15 91       	lpm	r17, Z+
    3b78:	35 91       	lpm	r19, Z+
    3b7a:	65 91       	lpm	r22, Z+
    3b7c:	95 91       	lpm	r25, Z+
    3b7e:	05 90       	lpm	r0, Z+
    3b80:	7f e2       	ldi	r23, 0x2F	; 47
    3b82:	73 95       	inc	r23
    3b84:	e1 18       	sub	r14, r1
    3b86:	f1 0a       	sbc	r15, r17
    3b88:	43 0b       	sbc	r20, r19
    3b8a:	56 0b       	sbc	r21, r22
    3b8c:	c9 0b       	sbc	r28, r25
    3b8e:	d0 09       	sbc	r29, r0
    3b90:	c0 f7       	brcc	.-16     	; 0x3b82 <__ftoa_engine+0x10a>
    3b92:	e1 0c       	add	r14, r1
    3b94:	f1 1e       	adc	r15, r17
    3b96:	43 1f       	adc	r20, r19
    3b98:	56 1f       	adc	r21, r22
    3b9a:	c9 1f       	adc	r28, r25
    3b9c:	d0 1d       	adc	r29, r0
    3b9e:	7e f4       	brtc	.+30     	; 0x3bbe <__ftoa_engine+0x146>
    3ba0:	70 33       	cpi	r23, 0x30	; 48
    3ba2:	11 f4       	brne	.+4      	; 0x3ba8 <__ftoa_engine+0x130>
    3ba4:	8a 95       	dec	r24
    3ba6:	e6 cf       	rjmp	.-52     	; 0x3b74 <__ftoa_engine+0xfc>
    3ba8:	e8 94       	clt
    3baa:	01 50       	subi	r16, 0x01	; 1
    3bac:	30 f0       	brcs	.+12     	; 0x3bba <__ftoa_engine+0x142>
    3bae:	08 0f       	add	r16, r24
    3bb0:	0a f4       	brpl	.+2      	; 0x3bb4 <__ftoa_engine+0x13c>
    3bb2:	00 27       	eor	r16, r16
    3bb4:	02 17       	cp	r16, r18
    3bb6:	08 f4       	brcc	.+2      	; 0x3bba <__ftoa_engine+0x142>
    3bb8:	20 2f       	mov	r18, r16
    3bba:	23 95       	inc	r18
    3bbc:	02 2f       	mov	r16, r18
    3bbe:	7a 33       	cpi	r23, 0x3A	; 58
    3bc0:	28 f0       	brcs	.+10     	; 0x3bcc <__ftoa_engine+0x154>
    3bc2:	79 e3       	ldi	r23, 0x39	; 57
    3bc4:	7d 93       	st	X+, r23
    3bc6:	2a 95       	dec	r18
    3bc8:	e9 f7       	brne	.-6      	; 0x3bc4 <__ftoa_engine+0x14c>
    3bca:	10 c0       	rjmp	.+32     	; 0x3bec <__ftoa_engine+0x174>
    3bcc:	7d 93       	st	X+, r23
    3bce:	2a 95       	dec	r18
    3bd0:	89 f6       	brne	.-94     	; 0x3b74 <__ftoa_engine+0xfc>
    3bd2:	06 94       	lsr	r0
    3bd4:	97 95       	ror	r25
    3bd6:	67 95       	ror	r22
    3bd8:	37 95       	ror	r19
    3bda:	17 95       	ror	r17
    3bdc:	17 94       	ror	r1
    3bde:	e1 18       	sub	r14, r1
    3be0:	f1 0a       	sbc	r15, r17
    3be2:	43 0b       	sbc	r20, r19
    3be4:	56 0b       	sbc	r21, r22
    3be6:	c9 0b       	sbc	r28, r25
    3be8:	d0 09       	sbc	r29, r0
    3bea:	98 f0       	brcs	.+38     	; 0x3c12 <__ftoa_engine+0x19a>
    3bec:	23 95       	inc	r18
    3bee:	7e 91       	ld	r23, -X
    3bf0:	73 95       	inc	r23
    3bf2:	7a 33       	cpi	r23, 0x3A	; 58
    3bf4:	08 f0       	brcs	.+2      	; 0x3bf8 <__ftoa_engine+0x180>
    3bf6:	70 e3       	ldi	r23, 0x30	; 48
    3bf8:	7c 93       	st	X, r23
    3bfa:	20 13       	cpse	r18, r16
    3bfc:	b8 f7       	brcc	.-18     	; 0x3bec <__ftoa_engine+0x174>
    3bfe:	7e 91       	ld	r23, -X
    3c00:	70 61       	ori	r23, 0x10	; 16
    3c02:	7d 93       	st	X+, r23
    3c04:	30 f0       	brcs	.+12     	; 0x3c12 <__ftoa_engine+0x19a>
    3c06:	83 95       	inc	r24
    3c08:	71 e3       	ldi	r23, 0x31	; 49
    3c0a:	7d 93       	st	X+, r23
    3c0c:	70 e3       	ldi	r23, 0x30	; 48
    3c0e:	2a 95       	dec	r18
    3c10:	e1 f7       	brne	.-8      	; 0x3c0a <__ftoa_engine+0x192>
    3c12:	11 24       	eor	r1, r1
    3c14:	ef 90       	pop	r14
    3c16:	ff 90       	pop	r15
    3c18:	0f 91       	pop	r16
    3c1a:	1f 91       	pop	r17
    3c1c:	cf 91       	pop	r28
    3c1e:	df 91       	pop	r29
    3c20:	99 27       	eor	r25, r25
    3c22:	87 fd       	sbrc	r24, 7
    3c24:	90 95       	com	r25
    3c26:	08 95       	ret

00003c28 <strnlen_P>:
    3c28:	fc 01       	movw	r30, r24
    3c2a:	05 90       	lpm	r0, Z+
    3c2c:	61 50       	subi	r22, 0x01	; 1
    3c2e:	70 40       	sbci	r23, 0x00	; 0
    3c30:	01 10       	cpse	r0, r1
    3c32:	d8 f7       	brcc	.-10     	; 0x3c2a <strnlen_P+0x2>
    3c34:	80 95       	com	r24
    3c36:	90 95       	com	r25
    3c38:	8e 0f       	add	r24, r30
    3c3a:	9f 1f       	adc	r25, r31
    3c3c:	08 95       	ret

00003c3e <memset>:
    3c3e:	dc 01       	movw	r26, r24
    3c40:	01 c0       	rjmp	.+2      	; 0x3c44 <memset+0x6>
    3c42:	6d 93       	st	X+, r22
    3c44:	41 50       	subi	r20, 0x01	; 1
    3c46:	50 40       	sbci	r21, 0x00	; 0
    3c48:	e0 f7       	brcc	.-8      	; 0x3c42 <memset+0x4>
    3c4a:	08 95       	ret

00003c4c <strnlen>:
    3c4c:	fc 01       	movw	r30, r24
    3c4e:	61 50       	subi	r22, 0x01	; 1
    3c50:	70 40       	sbci	r23, 0x00	; 0
    3c52:	01 90       	ld	r0, Z+
    3c54:	01 10       	cpse	r0, r1
    3c56:	d8 f7       	brcc	.-10     	; 0x3c4e <strnlen+0x2>
    3c58:	80 95       	com	r24
    3c5a:	90 95       	com	r25
    3c5c:	8e 0f       	add	r24, r30
    3c5e:	9f 1f       	adc	r25, r31
    3c60:	08 95       	ret

00003c62 <fputc>:
    3c62:	0f 93       	push	r16
    3c64:	1f 93       	push	r17
    3c66:	cf 93       	push	r28
    3c68:	df 93       	push	r29
    3c6a:	fb 01       	movw	r30, r22
    3c6c:	23 81       	ldd	r18, Z+3	; 0x03
    3c6e:	21 fd       	sbrc	r18, 1
    3c70:	03 c0       	rjmp	.+6      	; 0x3c78 <fputc+0x16>
    3c72:	8f ef       	ldi	r24, 0xFF	; 255
    3c74:	9f ef       	ldi	r25, 0xFF	; 255
    3c76:	2c c0       	rjmp	.+88     	; 0x3cd0 <fputc+0x6e>
    3c78:	22 ff       	sbrs	r18, 2
    3c7a:	16 c0       	rjmp	.+44     	; 0x3ca8 <fputc+0x46>
    3c7c:	46 81       	ldd	r20, Z+6	; 0x06
    3c7e:	57 81       	ldd	r21, Z+7	; 0x07
    3c80:	24 81       	ldd	r18, Z+4	; 0x04
    3c82:	35 81       	ldd	r19, Z+5	; 0x05
    3c84:	42 17       	cp	r20, r18
    3c86:	53 07       	cpc	r21, r19
    3c88:	44 f4       	brge	.+16     	; 0x3c9a <fputc+0x38>
    3c8a:	a0 81       	ld	r26, Z
    3c8c:	b1 81       	ldd	r27, Z+1	; 0x01
    3c8e:	9d 01       	movw	r18, r26
    3c90:	2f 5f       	subi	r18, 0xFF	; 255
    3c92:	3f 4f       	sbci	r19, 0xFF	; 255
    3c94:	31 83       	std	Z+1, r19	; 0x01
    3c96:	20 83       	st	Z, r18
    3c98:	8c 93       	st	X, r24
    3c9a:	26 81       	ldd	r18, Z+6	; 0x06
    3c9c:	37 81       	ldd	r19, Z+7	; 0x07
    3c9e:	2f 5f       	subi	r18, 0xFF	; 255
    3ca0:	3f 4f       	sbci	r19, 0xFF	; 255
    3ca2:	37 83       	std	Z+7, r19	; 0x07
    3ca4:	26 83       	std	Z+6, r18	; 0x06
    3ca6:	14 c0       	rjmp	.+40     	; 0x3cd0 <fputc+0x6e>
    3ca8:	8b 01       	movw	r16, r22
    3caa:	ec 01       	movw	r28, r24
    3cac:	fb 01       	movw	r30, r22
    3cae:	00 84       	ldd	r0, Z+8	; 0x08
    3cb0:	f1 85       	ldd	r31, Z+9	; 0x09
    3cb2:	e0 2d       	mov	r30, r0
    3cb4:	09 95       	icall
    3cb6:	89 2b       	or	r24, r25
    3cb8:	e1 f6       	brne	.-72     	; 0x3c72 <fputc+0x10>
    3cba:	d8 01       	movw	r26, r16
    3cbc:	16 96       	adiw	r26, 0x06	; 6
    3cbe:	8d 91       	ld	r24, X+
    3cc0:	9c 91       	ld	r25, X
    3cc2:	17 97       	sbiw	r26, 0x07	; 7
    3cc4:	01 96       	adiw	r24, 0x01	; 1
    3cc6:	17 96       	adiw	r26, 0x07	; 7
    3cc8:	9c 93       	st	X, r25
    3cca:	8e 93       	st	-X, r24
    3ccc:	16 97       	sbiw	r26, 0x06	; 6
    3cce:	ce 01       	movw	r24, r28
    3cd0:	df 91       	pop	r29
    3cd2:	cf 91       	pop	r28
    3cd4:	1f 91       	pop	r17
    3cd6:	0f 91       	pop	r16
    3cd8:	08 95       	ret

00003cda <printf>:
    3cda:	a0 e0       	ldi	r26, 0x00	; 0
    3cdc:	b0 e0       	ldi	r27, 0x00	; 0
    3cde:	e3 e7       	ldi	r30, 0x73	; 115
    3ce0:	fe e1       	ldi	r31, 0x1E	; 30
    3ce2:	0c 94 06 1d 	jmp	0x3a0c	; 0x3a0c <__prologue_saves__+0x20>
    3ce6:	ae 01       	movw	r20, r28
    3ce8:	4b 5f       	subi	r20, 0xFB	; 251
    3cea:	5f 4f       	sbci	r21, 0xFF	; 255
    3cec:	fa 01       	movw	r30, r20
    3cee:	61 91       	ld	r22, Z+
    3cf0:	71 91       	ld	r23, Z+
    3cf2:	af 01       	movw	r20, r30
    3cf4:	80 91 a4 05 	lds	r24, 0x05A4	; 0x8005a4 <__iob+0x2>
    3cf8:	90 91 a5 05 	lds	r25, 0x05A5	; 0x8005a5 <__iob+0x3>
    3cfc:	0e 94 6e 19 	call	0x32dc	; 0x32dc <vfprintf>
    3d00:	e2 e0       	ldi	r30, 0x02	; 2
    3d02:	0c 94 22 1d 	jmp	0x3a44	; 0x3a44 <__epilogue_restores__+0x20>

00003d06 <putchar>:
    3d06:	60 91 a4 05 	lds	r22, 0x05A4	; 0x8005a4 <__iob+0x2>
    3d0a:	70 91 a5 05 	lds	r23, 0x05A5	; 0x8005a5 <__iob+0x3>
    3d0e:	0e 94 31 1e 	call	0x3c62	; 0x3c62 <fputc>
    3d12:	08 95       	ret

00003d14 <puts>:
    3d14:	0f 93       	push	r16
    3d16:	1f 93       	push	r17
    3d18:	cf 93       	push	r28
    3d1a:	df 93       	push	r29
    3d1c:	e0 91 a4 05 	lds	r30, 0x05A4	; 0x8005a4 <__iob+0x2>
    3d20:	f0 91 a5 05 	lds	r31, 0x05A5	; 0x8005a5 <__iob+0x3>
    3d24:	23 81       	ldd	r18, Z+3	; 0x03
    3d26:	21 ff       	sbrs	r18, 1
    3d28:	1b c0       	rjmp	.+54     	; 0x3d60 <puts+0x4c>
    3d2a:	8c 01       	movw	r16, r24
    3d2c:	d0 e0       	ldi	r29, 0x00	; 0
    3d2e:	c0 e0       	ldi	r28, 0x00	; 0
    3d30:	f8 01       	movw	r30, r16
    3d32:	81 91       	ld	r24, Z+
    3d34:	8f 01       	movw	r16, r30
    3d36:	60 91 a4 05 	lds	r22, 0x05A4	; 0x8005a4 <__iob+0x2>
    3d3a:	70 91 a5 05 	lds	r23, 0x05A5	; 0x8005a5 <__iob+0x3>
    3d3e:	db 01       	movw	r26, r22
    3d40:	18 96       	adiw	r26, 0x08	; 8
    3d42:	ed 91       	ld	r30, X+
    3d44:	fc 91       	ld	r31, X
    3d46:	19 97       	sbiw	r26, 0x09	; 9
    3d48:	88 23       	and	r24, r24
    3d4a:	31 f0       	breq	.+12     	; 0x3d58 <puts+0x44>
    3d4c:	09 95       	icall
    3d4e:	89 2b       	or	r24, r25
    3d50:	79 f3       	breq	.-34     	; 0x3d30 <puts+0x1c>
    3d52:	df ef       	ldi	r29, 0xFF	; 255
    3d54:	cf ef       	ldi	r28, 0xFF	; 255
    3d56:	ec cf       	rjmp	.-40     	; 0x3d30 <puts+0x1c>
    3d58:	8a e0       	ldi	r24, 0x0A	; 10
    3d5a:	09 95       	icall
    3d5c:	89 2b       	or	r24, r25
    3d5e:	19 f0       	breq	.+6      	; 0x3d66 <puts+0x52>
    3d60:	8f ef       	ldi	r24, 0xFF	; 255
    3d62:	9f ef       	ldi	r25, 0xFF	; 255
    3d64:	02 c0       	rjmp	.+4      	; 0x3d6a <puts+0x56>
    3d66:	8d 2f       	mov	r24, r29
    3d68:	9c 2f       	mov	r25, r28
    3d6a:	df 91       	pop	r29
    3d6c:	cf 91       	pop	r28
    3d6e:	1f 91       	pop	r17
    3d70:	0f 91       	pop	r16
    3d72:	08 95       	ret

00003d74 <sprintf>:
    3d74:	ae e0       	ldi	r26, 0x0E	; 14
    3d76:	b0 e0       	ldi	r27, 0x00	; 0
    3d78:	e0 ec       	ldi	r30, 0xC0	; 192
    3d7a:	fe e1       	ldi	r31, 0x1E	; 30
    3d7c:	0c 94 04 1d 	jmp	0x3a08	; 0x3a08 <__prologue_saves__+0x1c>
    3d80:	0d 89       	ldd	r16, Y+21	; 0x15
    3d82:	1e 89       	ldd	r17, Y+22	; 0x16
    3d84:	86 e0       	ldi	r24, 0x06	; 6
    3d86:	8c 83       	std	Y+4, r24	; 0x04
    3d88:	1a 83       	std	Y+2, r17	; 0x02
    3d8a:	09 83       	std	Y+1, r16	; 0x01
    3d8c:	8f ef       	ldi	r24, 0xFF	; 255
    3d8e:	9f e7       	ldi	r25, 0x7F	; 127
    3d90:	9e 83       	std	Y+6, r25	; 0x06
    3d92:	8d 83       	std	Y+5, r24	; 0x05
    3d94:	ae 01       	movw	r20, r28
    3d96:	47 5e       	subi	r20, 0xE7	; 231
    3d98:	5f 4f       	sbci	r21, 0xFF	; 255
    3d9a:	6f 89       	ldd	r22, Y+23	; 0x17
    3d9c:	78 8d       	ldd	r23, Y+24	; 0x18
    3d9e:	ce 01       	movw	r24, r28
    3da0:	01 96       	adiw	r24, 0x01	; 1
    3da2:	0e 94 6e 19 	call	0x32dc	; 0x32dc <vfprintf>
    3da6:	ef 81       	ldd	r30, Y+7	; 0x07
    3da8:	f8 85       	ldd	r31, Y+8	; 0x08
    3daa:	e0 0f       	add	r30, r16
    3dac:	f1 1f       	adc	r31, r17
    3dae:	10 82       	st	Z, r1
    3db0:	2e 96       	adiw	r28, 0x0e	; 14
    3db2:	e4 e0       	ldi	r30, 0x04	; 4
    3db4:	0c 94 20 1d 	jmp	0x3a40	; 0x3a40 <__epilogue_restores__+0x1c>

00003db8 <__ultoa_invert>:
    3db8:	fa 01       	movw	r30, r20
    3dba:	aa 27       	eor	r26, r26
    3dbc:	28 30       	cpi	r18, 0x08	; 8
    3dbe:	51 f1       	breq	.+84     	; 0x3e14 <__ultoa_invert+0x5c>
    3dc0:	20 31       	cpi	r18, 0x10	; 16
    3dc2:	81 f1       	breq	.+96     	; 0x3e24 <__ultoa_invert+0x6c>
    3dc4:	e8 94       	clt
    3dc6:	6f 93       	push	r22
    3dc8:	6e 7f       	andi	r22, 0xFE	; 254
    3dca:	6e 5f       	subi	r22, 0xFE	; 254
    3dcc:	7f 4f       	sbci	r23, 0xFF	; 255
    3dce:	8f 4f       	sbci	r24, 0xFF	; 255
    3dd0:	9f 4f       	sbci	r25, 0xFF	; 255
    3dd2:	af 4f       	sbci	r26, 0xFF	; 255
    3dd4:	b1 e0       	ldi	r27, 0x01	; 1
    3dd6:	3e d0       	rcall	.+124    	; 0x3e54 <__ultoa_invert+0x9c>
    3dd8:	b4 e0       	ldi	r27, 0x04	; 4
    3dda:	3c d0       	rcall	.+120    	; 0x3e54 <__ultoa_invert+0x9c>
    3ddc:	67 0f       	add	r22, r23
    3dde:	78 1f       	adc	r23, r24
    3de0:	89 1f       	adc	r24, r25
    3de2:	9a 1f       	adc	r25, r26
    3de4:	a1 1d       	adc	r26, r1
    3de6:	68 0f       	add	r22, r24
    3de8:	79 1f       	adc	r23, r25
    3dea:	8a 1f       	adc	r24, r26
    3dec:	91 1d       	adc	r25, r1
    3dee:	a1 1d       	adc	r26, r1
    3df0:	6a 0f       	add	r22, r26
    3df2:	71 1d       	adc	r23, r1
    3df4:	81 1d       	adc	r24, r1
    3df6:	91 1d       	adc	r25, r1
    3df8:	a1 1d       	adc	r26, r1
    3dfa:	20 d0       	rcall	.+64     	; 0x3e3c <__ultoa_invert+0x84>
    3dfc:	09 f4       	brne	.+2      	; 0x3e00 <__ultoa_invert+0x48>
    3dfe:	68 94       	set
    3e00:	3f 91       	pop	r19
    3e02:	2a e0       	ldi	r18, 0x0A	; 10
    3e04:	26 9f       	mul	r18, r22
    3e06:	11 24       	eor	r1, r1
    3e08:	30 19       	sub	r19, r0
    3e0a:	30 5d       	subi	r19, 0xD0	; 208
    3e0c:	31 93       	st	Z+, r19
    3e0e:	de f6       	brtc	.-74     	; 0x3dc6 <__ultoa_invert+0xe>
    3e10:	cf 01       	movw	r24, r30
    3e12:	08 95       	ret
    3e14:	46 2f       	mov	r20, r22
    3e16:	47 70       	andi	r20, 0x07	; 7
    3e18:	40 5d       	subi	r20, 0xD0	; 208
    3e1a:	41 93       	st	Z+, r20
    3e1c:	b3 e0       	ldi	r27, 0x03	; 3
    3e1e:	0f d0       	rcall	.+30     	; 0x3e3e <__ultoa_invert+0x86>
    3e20:	c9 f7       	brne	.-14     	; 0x3e14 <__ultoa_invert+0x5c>
    3e22:	f6 cf       	rjmp	.-20     	; 0x3e10 <__ultoa_invert+0x58>
    3e24:	46 2f       	mov	r20, r22
    3e26:	4f 70       	andi	r20, 0x0F	; 15
    3e28:	40 5d       	subi	r20, 0xD0	; 208
    3e2a:	4a 33       	cpi	r20, 0x3A	; 58
    3e2c:	18 f0       	brcs	.+6      	; 0x3e34 <__ultoa_invert+0x7c>
    3e2e:	49 5d       	subi	r20, 0xD9	; 217
    3e30:	31 fd       	sbrc	r19, 1
    3e32:	40 52       	subi	r20, 0x20	; 32
    3e34:	41 93       	st	Z+, r20
    3e36:	02 d0       	rcall	.+4      	; 0x3e3c <__ultoa_invert+0x84>
    3e38:	a9 f7       	brne	.-22     	; 0x3e24 <__ultoa_invert+0x6c>
    3e3a:	ea cf       	rjmp	.-44     	; 0x3e10 <__ultoa_invert+0x58>
    3e3c:	b4 e0       	ldi	r27, 0x04	; 4
    3e3e:	a6 95       	lsr	r26
    3e40:	97 95       	ror	r25
    3e42:	87 95       	ror	r24
    3e44:	77 95       	ror	r23
    3e46:	67 95       	ror	r22
    3e48:	ba 95       	dec	r27
    3e4a:	c9 f7       	brne	.-14     	; 0x3e3e <__ultoa_invert+0x86>
    3e4c:	00 97       	sbiw	r24, 0x00	; 0
    3e4e:	61 05       	cpc	r22, r1
    3e50:	71 05       	cpc	r23, r1
    3e52:	08 95       	ret
    3e54:	9b 01       	movw	r18, r22
    3e56:	ac 01       	movw	r20, r24
    3e58:	0a 2e       	mov	r0, r26
    3e5a:	06 94       	lsr	r0
    3e5c:	57 95       	ror	r21
    3e5e:	47 95       	ror	r20
    3e60:	37 95       	ror	r19
    3e62:	27 95       	ror	r18
    3e64:	ba 95       	dec	r27
    3e66:	c9 f7       	brne	.-14     	; 0x3e5a <__ultoa_invert+0xa2>
    3e68:	62 0f       	add	r22, r18
    3e6a:	73 1f       	adc	r23, r19
    3e6c:	84 1f       	adc	r24, r20
    3e6e:	95 1f       	adc	r25, r21
    3e70:	a0 1d       	adc	r26, r0
    3e72:	08 95       	ret

00003e74 <_exit>:
    3e74:	f8 94       	cli

00003e76 <__stop_program>:
    3e76:	ff cf       	rjmp	.-2      	; 0x3e76 <__stop_program>
